[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The microbiota of banana plants",
    "section": "",
    "text": "Figure 1. Graphic representation of banana plants\n\n\nThis repository includes all the scripts employed for the processing of amplicon sequencing reads and the scripts needed for all the subsequent ecological analyses."
  },
  {
    "objectID": "index.html#scripts-to-process-and-analyze-high-throughput-sequencing-reads",
    "href": "index.html#scripts-to-process-and-analyze-high-throughput-sequencing-reads",
    "title": "The microbiota of banana plants",
    "section": "",
    "text": "Figure 1. Graphic representation of banana plants\n\n\nThis repository includes all the scripts employed for the processing of amplicon sequencing reads and the scripts needed for all the subsequent ecological analyses."
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "The microbiota of banana plants",
    "section": "1. Introduction",
    "text": "1. Introduction\nThese analyses were made for the project EVOMICROBIA (Evolución dirigida de consorcios microbianos mejorados para el biocontrol de la Fusariosis vascular del Plátano de Canarias). The main aim of this work was to analyze the microbial communities (bacteria and fungi) associated to the roots of banana plants (Musa acuminata cv. Pequeña Enana synonymous with Dwarf Cavendish). We also aimed at determining whether microbial members are transferred from mother to sucker plants through the root system, and if possible, to decipher which part of the microbiota is transferred from mothers to first suckers and from these to second sucker plants. We focused on two plots(orchards) located in different points in Tenerife Island (Canary Islands, Spain), with different agronomic management. In the following map, the location of both plots its indicated (Figure 2):\n\n\n\nFigure 2. Map of Tenerife Island (Canary Islands, Spain) and photographs of both orchards under study\n\n\n\n1.1 But.. how do banana plants develop?\nBanana mats are comprised of the underground rhizome (also named corm) from which “suckers” or new clonal shoots arise close to mother plants, the pseudostem (composed by tightly packed overlapping leaf sheaths), stem and leafs. Thus, suckers are forms of vegetative reproduction, and can develop and produce an inflorescence when they reach the adult state. Once mother plants produce fruit bunches and they are harvested, mother plants are cut since they do not produce bananas any more. This cycle repeats periodically, so suckers become mothers and so happens with all the clonal progeny (clonal “offspring”)."
  },
  {
    "objectID": "index.html#experimental-design",
    "href": "index.html#experimental-design",
    "title": "The microbiota of banana plants",
    "section": "2. Experimental design",
    "text": "2. Experimental design\nSamples were taken in two consecutive campaigns:\n\nYear 2022: 12 healthy banana mother plants whose sucker plants were actively growing were selected from each of the orchards. Samples from rhizosphere soil of the 12 mother plants were manually collected, along with rhizosphere soils from the sucker plant growing close to the each mother. Roots from each mother and sucker plants were also collected in each orchard Thus, a total of 12 replicates x 2 plants in different developmental state (mother and sucker) x 2 orchards x 2 plant compartments = 96 samples.\nYear 2023: the same sampling scheme was followed. However, it should be taken into account that plants that were suckers in 2022 acted as mothers in 2023, and their suckers were considered as the second suckers.\n\nHave a look at the next table that summarizes the sampling scheme.\n\nNumber of samples analyzed in each year, plant compartment and plot.\n\n\n\n\n\n\n\n\n\n\nYear 2022\n\n\n\n\n\n\n\n\n\nPlot 1 (South)\n\nPlot 2 (North)\n\n\n\n\n\nMother\nSucker\nMother\nSucker\n\n\n\nRhizosphere\n12\n12\n12\n12\n\n\n\nEndosphere\n12\n12\n12\n12\n\n\nYear 2023\n\n\n\n\n\n\n\n\nRhizosphere\n12\n12\n12\n12\n\n\n\nEndosphere\n12\n12\n12\n12"
  },
  {
    "objectID": "index.html#sequencing-scheme",
    "href": "index.html#sequencing-scheme",
    "title": "The microbiota of banana plants",
    "section": "3. Sequencing scheme",
    "text": "3. Sequencing scheme\nWe started from 192 samples, from which total DNA was isolated (in the case of the roots, they were surface sterilized previously). Thus, we got 192 DNA samples. However, it should be taken into account that we wanted to analyze both bacterial and fungal communities. Thus, we had to sequence 192 x 2 = 384 samples (and also the controls). Due to the high amount of samples and the different sampling campaigns, our sequencing plan was divided into different runs. Furthermore, the sequencing service (Instituto de Parasitología y Biomedicina López-Neyra, CSIC, Granada) had to resequence some samples due to technical issues. Thus, our sequencing project had to be divided into the following sequencing runs:\n\nBacteria:\n\nRun 1: most of the samples corresponding to the first sampling campaign (2022).\nRun 2: some additional samples corresponding to year 2022.\nRun 3: samples corresponding to the second campaign (2023).\nRun 4: resequencing of some samples corresponding to year 2023.\n\n\n\n\nFungi:\n\nRun 5: most of the samples corresponding to the first campaign (2022).\nRun 6: other samples corresponding to 2022.\nRun 7: all the samples corresponding to 2023\n\n\nIt should be pointed out that in each sequencing run (just in the case of the bacterial dataset) three replicates of the mock community ZymoBIOMICS Microbial Community Standard II (ZYMO Research) were included."
  },
  {
    "objectID": "index.html#sample-naming",
    "href": "index.html#sample-naming",
    "title": "The microbiota of banana plants",
    "section": "4. Sample naming",
    "text": "4. Sample naming\nThe name of the samples was composed by a combination of alphanumeric characters.\n\nFirst character: letter “A” for samples obtained in 2022, and “B” for those obtained in 2023.\nSecond character: numer “1” for the plot located in the south orchard, and “2” for the plot in the north of the island.\nThird character: letter “M” for mother plants, and “S” for suckers.\nFourth and fifth character: the number of the replicate. It should be taken into account that from 1 to 9, replicates are names as 01-09.\nSixth character: letter “E” for root endosphere and “R” for rhizosphere soil samples.\n\nThus, rhizosphere soil of the mother plant number 7 located in the north orchard sampled in 2023 will be named as B2M07E."
  },
  {
    "objectID": "index.html#technical-issues",
    "href": "index.html#technical-issues",
    "title": "The microbiota of banana plants",
    "section": "5. Technical issues",
    "text": "5. Technical issues\n-In the case of bacteria, the hypervariable regions V3-V4 of the prokaryotic gene 16S rRNA were sequenced. For that purpose, the primer pair Pro341F and Pro805R was employed (Takahashi et al., 2014)\n-In the case of fungi, the ITS2 region was sequenced. For that purpose, the primer pair ITS4 and fiTS7 was employed (White et al., 1990 and Ihrmark et al., 2012\n-In order to diminish the amplification and sequencing of the DNA from the plant host (from mitochondria, chloroplast etc), DNA was treated with the PNA PCR Clamps proposed by Lunderberg et al., (2013)\n-MiSeq Illumina platform was used for the sequencing, and two types of Paired-End strategies were followed:\n\nRuns 1, 2, 3, 5, 6 and 7: 2x275 PE strategy\nRun 4: 2x300 PE strategy\n\nThe remaining technical issues are explained in the Research Article"
  },
  {
    "objectID": "index.html#what-will-i-find-in-this-github-project",
    "href": "index.html#what-will-i-find-in-this-github-project",
    "title": "The microbiota of banana plants",
    "section": "6. What will I find in this GitHub project?",
    "text": "6. What will I find in this GitHub project?\nIn this repository, you will find all the scripts that we used for two types of approaches: 1) Processing of Illumina MiSeq reads and 2) Ecological analyses\n\n6.1 Scripts for the processing of MiSeq reads\nThese scripts explain all the steps to process the Illumina reads, from the fastq files to a filtered ASV table.\n16S rRNA reads\nITS2 reads\n\n\n6.2 Script for the ecological analyses\nAll the steps from the previously obtained ASV table to the alpha and beta diversity, differential abundance analysis, etc.\nAnalysis of bacterial dataset\nAnalysis of fungal dataset"
  },
  {
    "objectID": "index.html#authors",
    "href": "index.html#authors",
    "title": "The microbiota of banana plants",
    "section": "7. Authors",
    "text": "7. Authors\n\nAna V. Lasa  \nAntonio José Fernández-González  \nPablo J. Villadas  \n\n-Carmen Gómez-Lama Cabanás  \n-Antonio Valverde Corredor  \n\nManuel Fernández-López  \nJesús Mercado-Blanco"
  },
  {
    "objectID": "index.html#how-to-cite",
    "href": "index.html#how-to-cite",
    "title": "The microbiota of banana plants",
    "section": "8. How to cite",
    "text": "8. How to cite\n\n8.1 Main paper\nStill building"
  },
  {
    "objectID": "index.html#repository",
    "href": "index.html#repository",
    "title": "The microbiota of banana plants",
    "section": "7.2 Repository",
    "text": "7.2 Repository"
  },
  {
    "objectID": "index.html#references",
    "href": "index.html#references",
    "title": "The microbiota of banana plants",
    "section": "8. References",
    "text": "8. References\nIhrmark, K., Bödeker, I.T.M., Cruz-Martinez, K., Friberg, H., Kubartova, A., et al., 2012. New primers to amplify the fungal ITS2 region – evaluation by 454- sequencing of artificial and natural communities. FEMS Microbiol. Ecol. 82, 666–677. https://doi.org/10.1111/j.1574-6941.2012.01437.x\nLundberg, D.S., Yourstone, S., Mieczkowski, P., Jones, C.D., Dangl, J.L., 2013. Practical innovations for high-throughput amplicon sequencing. Nat. Methods. 10, 999–1002. https://doi.org/10.1038/nmeth.2634\nTakahashi, S., Tomita, J., Nishioka, K., Hisada, T., Nishijima, M., 2014. Development of a prokaryotic universal primer for simultaneous analysis of bacteria and archaea using next-generation sequencing. PloS One. 9, 8. https://doi.org/10.1371/journal. pone.0105592.\nWhite, T.J., Bruns, T.D., Lee, S.B., Taylor, J.W., 1990. Amplification and direct sequencing of fungal ribosomal RNA genes for phylogenetics, Iin: Innis, M.A., Gelfand, D.H., Sninsky, J.J., White, T.J. (Eds.), PCR Protocols: A Guide to Methods and Applications. Academics Press, San Diego, pp. 315–322."
  },
  {
    "objectID": "Fungi_data_analysis.html",
    "href": "Fungi_data_analysis.html",
    "title": "Ecological analyses of fungal dataset",
    "section": "",
    "text": "Firstly, we have to install and load many packages needed to analyze our fungal data:\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))\n  install.packages(\"BiocManager\")\nBiocManager::install(\"ANCOMBC\")\nBiocManager::install(\"phyloseq\")\nif (!require(\"BiocManager\", quietly = TRUE))\n  install.packages(\"BiocManager\")\nBiocManager::install(\"microbiome\")\ninstall.packages(\"dplyr\")\ninstall.packages(\"tidyverse\")\ninstall.packages(\"ggplot2\")\ninstall.packages(\"GUniFrac\")\ninstall.packages(\"phangorn\")\ninstall.packages(\"vegan\")\ninstall.packages(\"gdata\")\ninstall.packages(\"purrr\")\ninstall.packages(\"devtools\")\ninstall.packages(\"rstatix\")\ninstall.packages(\"ggstasplot\")\ninstall.packages(\"DescTools\")\ninstall.packages(\"tibble\")\ninstall.packages(\"WRS2\")\ninstall.packages(\"tibble\")\ninstall.packages(\"ARTool\")\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))\n  install.packages(\"BiocManager\")\nBiocManager::install(\"edgeR\")\nremotes::install_github(\"wilkelab/ggtext\") \ninstall_github(\"pmartinezarbizu/pairwiseAdonis/pairwiseAdonis\")\ninstall_github(\"nuriamw/micro4all\")\n\nlibrary(ANCOMBC)\nlibrary(phyloseq)\nlibrary(microbiome)\nlibrary(dplyr)\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(GUniFrac)\nlibrary(vegan)\nlibrary(gdata)\nlibrary(purrr)\nlibrary(devtools)\nlibrary(rstatix)\nlibrary(ggstatsplot)\nlibrary(DescTools)\nlibrary(tibble)\nlibrary(WRS2)\nlibrary(ARTool)\nlibrary(edgeR)\nlibrary(pairwiseAdonis)\nlibrary(micro4all)\nOur analyses will based on phyloseq objects. That is to say, we are going to use phyloseq package"
  },
  {
    "objectID": "Fungi_data_analysis.html#statistical-analysis",
    "href": "Fungi_data_analysis.html#statistical-analysis",
    "title": "Ecological analyses of fungal dataset",
    "section": "4.1 Statistical analysis",
    "text": "4.1 Statistical analysis\nWe have just calculated the alpha indices per sample and per group of samples, but we have to compare them among group of samples. For that purpose, we will apply univariate statistic test. We will go into different steps, which briefly consist of:\n\nCheck the normality of the data: we have to confirm whether our variables follow a normal distribution. If they are not normally distributed, we will also check if they are very far from the normal distribution.\nCheck the homoscedasticity of the data: confirm if dispersion of the variable is the same in all the groups of samples to compare. If the distribution of the variables is normal (or almost normal) and there is homogeneity of variances, we will apply parametric tests. Otherwise, we will use non-parametric tests.\nCheck the presence of the outliers. Outliers are not a problem, but we have to check if they are extreme outliers. In that case, we will apply robust tests.\nApply the proper statistical test. Depending on the characteristics of the variables and the experimental design (one factor to be studied: one-way statistics; two factors: two-way statistical tests).\nCalculate the size of the effect. In case we find statistical differences among groups of samples in the studied variables, we have to measure the magnitude of the effect.\n\nWe have to study separately each individual variable (in this case, each alpha diversity index).\nIn this example, we are interested in two factors: the effect of the sampling year, and the effect of the plants’ developmental stage, also named Condition in this web.\n\n#a) ENDOSPHERE\n#a.1) North plot\n\n#Normality\nindices_endo1%&gt;%  group_by(Condition, Year)%&gt;%  shapiro_test(Observed)\n \nindices_endo1%&gt;%  group_by(Condition, Year)%&gt;%  shapiro_test(Shannon)\n\nindices_endo1%&gt;%  group_by(Condition, Year)%&gt;%  shapiro_test(InvSimpson)\n\nindices_endo1%&gt;%  group_by(Condition, Year)%&gt;%  shapiro_test(Pielou)\n\nx11()#let's see how far are our data from the normal distribution into a qq-plot.\nggqqplot(indices_endo1, \"InvSimpson\", ggtheme = theme_bw()) +\n  facet_grid(Condition ~ Year)\n\n#Homoscedasticity\nindices_endo1 %&gt;% levene_test(Observed ~ Condition*Year)\nindices_endo1 %&gt;% levene_test(Shannon ~ Condition*Year)\nindices_endo1 %&gt;% levene_test(InvSimpson ~ Condition*Year)\nindices_endo1 %&gt;% levene_test(Pielou ~ Condition*Year)\n \n#Outliers\na=indices_endo1 %&gt;%  group_by(Condition,Year)%&gt;%  identify_outliers(Observed); View(a)\nb=indices_endo1 %&gt;%  group_by(Condition, Year)%&gt;%  identify_outliers(Shannon) ; View(b)\nc=indices_endo1 %&gt;%  group_by(Condition, Year)%&gt;%  identify_outliers(InvSimpson); View(c)\nd=indices_endo1 %&gt;%  group_by(Condition, Year)%&gt;%  identify_outliers(Pielou); View(d)\n\n#Hypothesis contrasting tests \nindices_endo1 %&gt;%  anova_test(Shannon ~ Condition * Year)#two-way ANOVA\nindices_endo1 %&gt;%  anova_test(InvSimpson ~ Condition * Year)\nindices_endo1 %&gt;%  anova_test(Pielou ~ Condition * Year)\n\nindices_endo1$Condition=as.factor(indices_endo1$Condition)\nindices_endo1$Year=as.factor(indices_endo1$Year)\nt2way(Observed ~ Year*Condition, data=indices_endo1)#two-way robust test\n\n#We did not find the interaction between Year and plant developmental Condition significant in any of the variables studied, but the effect of Year or Condition (or both) was statistaclly significant on some of the indices. In that case, we have to study the effect of each factor individually:\n\n#Post-hoc tests\nindices_endo1 %&gt;%pairwise_t_test(Observed~Year,p.adjust.method = \"holm\")\ntest=mcp2atm(Observed~Year*Condition, data=indices_endo1)\n\n#Effect size\nz=lm(Observed~Condition*Year, data=indices_endo1)\neta_squared(z)\n\n#a.2) North plot\n\n#Normality\nindices_endo2%&gt;%  group_by(Condition, Year)%&gt;%  shapiro_test(Observed)\nindices_endo2%&gt;%  group_by(Condition, Year)%&gt;%  shapiro_test(Shannon)\nindices_endo2%&gt;%  group_by(Condition, Year)%&gt;%  shapiro_test(InvSimpson)\nindices_endo2%&gt;%  group_by(Condition, Year)%&gt;%  shapiro_test(Pielou)\n\nx11()\nggqqplot(indices_endo2, \"Observed\", ggtheme = theme_bw()) +\n  facet_grid(Condition ~ Year)\n\n#Homoscedasticity\nindices_endo2 %&gt;% levene_test(Observed ~ Condition*Year)#heterocedastic\nindices_endo2 %&gt;% levene_test(Shannon ~ Condition*Year)\nindices_endo2 %&gt;% levene_test(InvSimpson ~ Condition*Year)\nindices_endo2 %&gt;% levene_test(Pielou ~ Condition*Year)\n\n#Outliers\na=indices_endo2 %&gt;%  group_by(Condition,Year)%&gt;%  identify_outliers(Observed); View(a)\nb=indices_endo2 %&gt;%  group_by(Condition, Year)%&gt;%  identify_outliers(Shannon); View(b) \nc=indices_endo2 %&gt;%  group_by(Condition, Year)%&gt;%  identify_outliers(InvSimpson); View(c)\nd=indices_endo2 %&gt;%  group_by(Condition, Year)%&gt;%  identify_outliers(Pielou); View(d)\n\n#Check wether with robust test the homoscedasticity is maintained\nindices_endo2%&gt;%   filter(between(InvSimpson, quantile(InvSimpson,0.1), quantile(InvSimpson, 0.9)))%&gt;%\n  levene_test(InvSimpson ~ Year*Condition)\n\n#Hypothesis contrasting tests \n#Observed ASVs is not homoscedastic, thus, we should apply non-parametric tests. However, there is not a suitable option for two-way tests, so let's transformate the data and then apply the corresponding test. Check this link:  http://depts.washington.edu/acelab/proj/art/index.html\nindices_endo2$Condition=as.factor(indices_endo2$Condition)\nindices_endo2$Year=as.factor(indices_endo2$Year)\nm = art(Observed ~ Year * Condition, data=indices_endo2) # linear model syntax; see lm()\nanova(m)\neta_squared(m)\n\nindices_endo2 %&gt;%  anova_test(Shannon ~ Condition * Year)\nt2way(InvSimpson ~ Condition*Year, data=indices_endo2)\nindices_endo2 %&gt;%  anova_test(Pielou ~ Condition * Year)\n\n#Post-hoc tests\nart.con(m, \"Year:Condition\", adjust=\"holm\") %&gt;%  \n  summary() %&gt;%  # add significance stars to the output\n  mutate(sig. = symnum(p.value, corr=FALSE, na=FALSE,\n                       cutpoints = c(0, .001, .01, .05, .10, 1),\n                       symbols = c(\"***\", \"**\", \"*\", \".\", \" \")))\n\n\nt_test(Observed~Year, data=indices_endo2, var.equal=F)\nindices_endo2 %&gt;%pairwise_t_test(Shannon~Year)\nindices_endo2 %&gt;%pairwise_t_test(Shannon~Condition)\n\n#b) RHIZOSPHERE\n#b.1) South plot\n#Normality\nindices_rizo1%&gt;%  group_by(Condition, Year)%&gt;%  shapiro_test(Observed)\nindices_rizo1%&gt;%  group_by(Condition, Year)%&gt;%  shapiro_test(Shannon)\nindices_rizo1%&gt;%  group_by(Condition, Year)%&gt;%  shapiro_test(InvSimpson)\nindices_rizo1%&gt;%  group_by(Condition, Year)%&gt;%  shapiro_test(Pielou)\n\nx11()\nggqqplot(indices_rizo1, \"Shannon\", ggtheme = theme_bw()) +\n  facet_grid(Condition ~ Year)\nx11()\nggqqplot(indices_rizo1, \"Pielou\", ggtheme = theme_bw()) +\n  facet_grid(Condition ~ Year)\n\n#Homoscedasticity\nindices_rizo1 %&gt;% levene_test(Observed ~ Condition*Year)\nindices_rizo1 %&gt;% levene_test(Shannon ~ Condition*Year)\nindices_rizo1 %&gt;% levene_test(InvSimpson ~ Condition*Year)\nindices_rizo1 %&gt;% levene_test(Pielou ~ Condition*Year)\n\n#Outliers\na=indices_rizo1 %&gt;%  group_by(Condition,Year)%&gt;%  identify_outliers(Observed); View(a)\nb=indices_rizo1 %&gt;%  group_by(Condition, Year)%&gt;%  identify_outliers(Shannon); View(b)\nc=indices_rizo1 %&gt;%  group_by(Condition, Year)%&gt;%  identify_outliers(InvSimpson); View(c)\nd=indices_rizo1 %&gt;%  group_by(Condition, Year)%&gt;%  identify_outliers(Pielou); View(d)\n\n#check wether robust test mantain the homoscedasticity\nindices_rizo1%&gt;%  filter(between(Shannon,quantile(Shannon,0.1), quantile(Shannon, 0.9)))%&gt;% levene_test(Shannon ~ Year*Condition)\n\nindices_rizo1%&gt;%   filter(between(Pielou,quantile(Pielou,0.1),  quantile(Pielou, 0.9)))%&gt;%levene_test(Pielou ~ Year*Condition)\n\n#Hypothesis contrasting tests\nindices_rizo1$Condition=as.factor(indices_rizo1$Condition)\nindices_rizo1$Year=as.factor(indices_rizo1$Year)\n\nindices_rizo1 %&gt;%  anova_test(Observed ~ Condition * Year)\nindices_rizo1$Year=as.factor(indices_rizo1$Year); indices_rizo1$Condition=as.factor(indices_rizo1$Condition)\nt2way(Shannon ~ Condition*Year, data=indices_rizo1)\nindices_rizo1 %&gt;%  anova_test(InvSimpson ~ Condition * Year)\nindices_rizo1 %&gt;%  anova_test(Pielou ~ Condition * Year)\nt2way(Pielou ~ Condition*Year, data=indices_rizo1)\n\n#Post-hoc tests\nindices_rizo1 %&gt;%pairwise_t_test(Observed~Year,p.adjust.method = \"holm\") indices_rizo1 %&gt;%pairwise_t_test(Observed~Condition,p.adjust.method = \"holm\")\nmcp2atm(InvSimpson~Year*Condition, data=indices_rizo1)\nmcp2atm(Pielou~Year*Condition, data=indices_rizo1)\n\n#Effect size:\ny=lm(Pielou~Year*Condition, data=indices_rizo1)\neta_squared(y)\n\n#b.2) North plot\n#Normality\nindices_rizo2%&gt;%  group_by(Condition, Year)%&gt;%  shapiro_test(Observed)\nindices_rizo2%&gt;%  group_by(Condition, Year)%&gt;%  shapiro_test(Shannon)\nindices_rizo2%&gt;%  group_by(Condition, Year)%&gt;%  shapiro_test(InvSimpson)\nindices_rizo2%&gt;%  group_by(Condition, Year)%&gt;%  shapiro_test(Pielou)\n\nx11()\nggqqplot(indices_rizo2, \"Shannon\", ggtheme = theme_bw()) +\n  facet_grid(Condition ~ Year)\nx11()\nggqqplot(indices_rizo2, \"Pielou\", ggtheme = theme_bw()) +\n  facet_grid(Condition ~ Year)\n\n#Homoscedasticity\nindices_rizo2 %&gt;% levene_test(Observed ~ Condition*Year)\nindices_rizo2 %&gt;% levene_test(Shannon ~ Condition*Year)\nindices_rizo2 %&gt;% levene_test(InvSimpson ~ Condition*Year)\nindices_rizo2 %&gt;% levene_test(Pielou ~ Condition*Year)\n\n#Outliers\na=indices_rizo2 %&gt;%  group_by(Condition,Year)%&gt;%  identify_outliers(Observed);View(a)\nb=indices_rizo2 %&gt;%  group_by(Condition, Year)%&gt;%  identify_outliers(Shannon);View(b) \nc=indices_rizo2 %&gt;%  group_by(Condition, Year)%&gt;%  identify_outliers(InvSimpson); View(c)\nd=indices_rizo2 %&gt;%  group_by(Condition, Year)%&gt;%  identify_outliers(Pielou); View(d)\n\nindices_rizo2%&gt;% \n  filter(between(Shannon,\n                 quantile(Shannon,0.1), \n                 quantile(Shannon, 0.9)))%&gt;%\n  levene_test(Shannon ~ Year*Condition)\nindices_rizo2%&gt;% \n  filter(between(Pielou,\n                 quantile(Pielou,0.1),  \n                 quantile(Pielou, 0.9)))%&gt;%\n  levene_test(Pielou ~ Year*Condition)\n\n#Hypothesis contrasting tests\nindices_rizo2 %&gt;%  anova_test(Observed ~ Condition * Year)\nindices_rizo2$Year=as.factor(indices_rizo2$Year)\nindices_rizo2$Condition=as.factor(indices_rizo2$Condition)\nt2way(Shannon ~ Condition*Year, data=indices_rizo2)\nindices_rizo2 %&gt;%  anova_test(InvSimpson ~ Condition * Year)\nt2way(Pielou ~ Condition*Year, data=indices_rizo2)\n\n#Post-hoc tests\nindices_rizo2 %&gt;%pairwise_t_test(Observed~Year)\n\nWe can also compare if the alpha diversity indices of fungal communities associated to mothers, first and second suckers are different each other. In the index of this website, you can find more details about the concepts of Mothers, first suckers and second suckers. These concepts are very similar to the concept of “Generation” in sexually reproducing plants, and that’s exactly the name of the factor employed here. So, we will compare the indices of these groups, by the factor Generation.\n\n#a) Rhizosphere \n#a.1) South plot\n\n#Normality \nindices_rizo1%&gt;% group_by(Generation)%&gt;% shapiro_test(Observed) indices_rizo1%&gt;% group_by(Generation)%&gt;% shapiro_test(Shannon) indices_rizo1%&gt;% group_by(Generation)%&gt;% shapiro_test(InvSimpson) indices_rizo1%&gt;% group_by(Generation)%&gt;% shapiro_test(Pielou)\n\nx11() ggqqplot(indices_rizo1, \"Shannon\", ggtheme = theme_bw()) + facet_grid(Generation~Plot)\n\nx11() ggqqplot(indices_rizo1, \"Pielou\", ggtheme = theme_bw()) + facet_grid(Generation~ Plot)\n\n#Homoscedasticity \nindices_rizo1 %&gt;% levene_test(Observed ~ Generation) indices_rizo1 %&gt;% levene_test(Shannon ~ Generation) indices_rizo1 %&gt;% levene_test(InvSimpson ~ Generation) indices_rizo1 %&gt;% levene_test(Pielou ~ Generation)\n\n#outliers \na=indices_rizo1 %&gt;% group_by(Generation)%&gt;% identify_outliers(Observed); View(a) \nb=indices_rizo1 %&gt;% group_by(Generation)%&gt;% identify_outliers(Shannon) ;View(b) \nc=indices_rizo1 %&gt;% group_by(Generation)%&gt;% identify_outliers(InvSimpson);View(c) \nd=indices_rizo1 %&gt;% group_by(Generation)%&gt;% identify_outliers(Pielou);View(d)\n\n#Check whether with robust methods the data are still homocedastic\nindices_rizo1%&gt;% filter(between(Shannon, quantile(Shannon,0.1),\nquantile(Shannon, 0.9)))%&gt;% levene_test(Shannon ~ Generation)\n\nindices_rizo1%&gt;% filter(between(InvSimpson, quantile(InvSimpson,0.1), quantile(InvSimpson, 0.9)))%&gt;% levene_test(InvSimpson ~ Generation)\n\nindices_rizo1%&gt;% filter(between(Pielou, quantile(Pielou,0.1), quantile(Pielou, 0.9)))%&gt;% levene_test(Pielou ~ Generation)\n\n#Hypothesis contrasting tests \nindices_rizo1 %&gt;% anova_test(Observed ~ Generation) t1way(Shannon~Generation, data=indices_rizo1) \nt1way(InvSimpson~Generation, data=indices_rizo1) \nt1way(Pielou~Generation, data=indices_rizo1)\n\n#Post-hoc test \nindices_rizo1%&gt;% pairwise_t_test(Observed~Generation)\n\n#a.2) North plots \n#Normality \nindices_rizo2%&gt;% group_by(Generation)%&gt;% shapiro_test(Observed) indices_rizo2%&gt;% group_by(Generation)%&gt;% shapiro_test(Shannon) indices_rizo2%&gt;% group_by(Generation)%&gt;% shapiro_test(InvSimpson) indices_rizo2%&gt;% group_by(Generation)%&gt;% shapiro_test(Pielou)\n\nx11() \nggqqplot(indices_rizo2, \"Shannon\", ggtheme = theme_bw()) + facet_grid(Generation~Plot)\n\nx11() \nggqqplot(indices_rizo2, \"Pielou\", ggtheme = theme_bw()) + facet_grid(Generation ~ Plot)\n\n#Homoscedasticity \nindices_rizo2 %&gt;% levene_test(Observed ~ Generation) \nindices_rizo2 %&gt;% levene_test(Shannon ~ Generation) \nindices_rizo2 %&gt;% levene_test(InvSimpson ~ Generation) \nindices_rizo2 %&gt;% levene_test(Pielou ~ Generation)\n\n#outliers \na=indices_rizo2 %&gt;% group_by(Generation)%&gt;% identify_outliers(Observed); View(a)\nb=indices_rizo2 %&gt;% group_by(Generation)%&gt;% identify_outliers(Shannon) ;View(b) \nc=indices_rizo2 %&gt;% group_by(Generation)%&gt;% identify_outliers(InvSimpson);View(c) \nd=indices_rizo2 %&gt;% group_by(Generation)%&gt;% identify_outliers(Pielou);View(d)\n\n#Check whether with robust tests the data are still homocedastic\n\nindices_rizo2%&gt;% filter(between(Shannon, quantile(Shannon,0.1),\nquantile(Shannon, 0.9)))%&gt;% levene_test(Shannon ~ Generation)\n\nindices_rizo2%&gt;% filter(between(InvSimpson, quantile(InvSimpson,0.1),\nquantile(InvSimpson, 0.9)))%\\&gt;% levene_test(InvSimpson ~ Generation)\n\nindices_rizo2%&gt;% filter(between(Pielou, quantile(Pielou,0.1),\nquantile(Pielou, 0.9)))%&gt;% levene_test(Pielou~ Generation)\n\n#Hypothesis contrasting tests \nindices_rizo2 %&gt;% welch_anova_test(Observed~Generation)#ANOVA test that does no assume that the data are homocedastic\nt1way(Shannon~Generation, data=indices_rizo2) t1way(InvSimpson~Generation, data=indices_rizo2) t1way(Pielou~Generation, data=indices_rizo2)\n\nq=lm(Observed~Generation, data=indices_rizo2) eta_squared(q)\n\n#Post-hoc tests \nindices_rizo2%&gt;% pairwise_t_test(Observed~Generation,p.adjust.method = \"holm\", pool.sd = F)\n\n#b) Endosphere \n#b.1) South plot\n#Normality \nindices_endo1%&gt;% group_by(Generation)%&gt;% shapiro_test(Observed) indices_endo1%&gt;% group_by(Generation)%&gt;% shapiro_test(Shannon) indices_endo1%&gt;% group_by(Generation)%&gt;% shapiro_test(InvSimpson) indices_endo1%&gt;% group_by(Generation)%\\&gt;% shapiro_test(Pielou)\n\nx11() \nggqqplot(indices_endo1, \"InvSimpson\", ggtheme = theme_bw()) + facet_grid(Generation~Plot)\n\n#Homoscedasticity \nindices_endo1 %&gt;% levene_test(Observed ~ Generation) \nindices_endo1 %&gt;% levene_test(Shannon ~ Generation) \nindices_endo1 %&gt;% levene_test(InvSimpson ~ Generation) \nindices_endo1 %&gt;% levene_test(Pielou ~ Generation)\n\n#outliers \na=indices_endo1 %&gt;% group_by(Generation)%&gt;% identify_outliers(Observed);View(a) \nb=indices_endo1 %&gt;% group_by(Generation)%&gt;% identify_outliers(Shannon);View(b) \nc=indices_endo1 %&gt;% group_by(Generation)%&gt;% identify_outliers(InvSimpson);View(c) \nd=indices_endo1 %&gt;% group_by(Generation)%&gt;% identify_outliers(Pielou);View(d)\n\n#Check whether with robust test the data are still homocedastic \nindices_endo1%&gt;% filter(between(InvSimpson, quantile(InvSimpson,0.1),\nquantile(InvSimpson, 0.9)))%\\&gt;% levene_test(InvSimpson ~ Generation)\n\n#Hypothesis contrasting tests \nindices_endo1 %&gt;% anova_test(Observed ~ Generation) \nindices_endo1 %&gt;% anova_test(Shannon ~ Generation) t1way(InvSimpson~Generation, data=indices_endo1)\nindices_endo1 %&gt;% anova_test(Pielou ~ Generation)\n\n#Post-hoc \nindices_endo1%&gt;% pairwise_t_test(Observed~Generation)\n\n#b.2) North plot \n#Normality \nindices_endo2%&gt;% group_by(Generation)%&gt;% shapiro_test(Observed) indices_endo2%&gt;% group_by(Generation)%&gt;% shapiro_test(Shannon) indices_endo2%&gt;% group_by(Generation)%&gt;% shapiro_test(InvSimpson) indices_endo2%&gt;% group_by(Generation)%&gt;% shapiro_test(Pielou)\n\nx11() \nggqqplot(indices_endo2, \"Observed\", ggtheme = theme_bw()) + facet_grid(Generation~Plot)\n\nx11() \nggqqplot(indices_endo2, \"InvSimpson\", ggtheme = theme_bw()) + facet_grid(Generation ~ Plot)\n\n#Homoscedasticity \nindices_endo2 %&gt;% levene_test(Observed ~ Generation) \nindices_endo2 %&gt;% levene_test(Shannon ~ Generation) \nindices_endo2 %&gt;% levene_test(InvSimpson ~ Generation) \nindices_endo2 %&gt;% levene_test(Pielou ~ Generation)\n\n#outliers \na=indices_endo2 %&gt;% group_by(Generation)%&gt;% identify_outliers(Observed); View(a) \nb=indices_endo2 %&gt;% group_by(Generation)%&gt;% identify_outliers(Shannon);View(b) \nc=indices_endo2 %&gt;% group_by(Generation)%&gt;% identify_outliers(InvSimpson);View(c) \nd=indices_endo2 %&gt;% group_by(Generation)%&gt;% identify_outliers(Pielou);View(d)\n\n#check whether with robust tests data are still homocedastic \nindices_endo2%&gt;% filter(between(Shannon, quantile(Shannon,0.1),\nquantile(Shannon, 0.9)))%&gt;% levene_test(Shannon ~ Generation)\n\nindices_endo2%&gt;% filter(between(InvSimpson, quantile(InvSimpson,0.1),\nquantile(InvSimpson, 0.9)))%&gt;% levene_test(InvSimpson ~ Generation)\n\n#Hypothesis contrasting tests \nindices_endo2 %&gt;% anova_test(Observed ~ Generation) \nindices_endo2 %&gt;% anova_test(Shannon ~ Generation) t1way(InvSimpson~Generation, data=indices_endo2)\nindices_endo2 %&gt;% anova_test(Pielou ~ Generation)"
  },
  {
    "objectID": "Fungi_data_analysis.html#tmm-normalization",
    "href": "Fungi_data_analysis.html#tmm-normalization",
    "title": "Ecological analyses of fungal dataset",
    "section": "5.1 TMM Normalization",
    "text": "5.1 TMM Normalization\nWe are going to use this normalization for both multivariate plots and for multivariate statistics.\n\n#a)RHIZOSPHERE\n#a.1) South plot\nrizo1_ASV=as.data.frame(otu_table(rizo1,taxa_are_rows = T))#extract the ASV table from the phyloseq object\nrizo1_mt=as.data.frame(sample_data(rizo1))#extract the metadata table from the phyloseq object\nrizo1_tax=as.data.frame(tax_table(rizo1))#extract the taxonomy table from the phyloseq object\n\n#Create a new object suitbale for the normalization by the package edgeR\nrizo1_edgeR = DGEList(counts = rizo1_ASV, samples = rizo1_mt, genes = rizo1_tax)\n#Calculate the normalization factors to correct the differences in sequencing depth\nrizo1_edgeR = calcNormFactors(rizo1_edgeR)\n#Extract the normalized abundance\nrizo1_ASV_norm = cpm(rizo1_edgeR, normalized.lib.sizes=T, log=F)\n#Create the phyloseq elements with the ASV counts normalized\nrizo1_phy_OTU_norm=otu_table(as.data.frame(rizo1_ASV_norm,row.names=F), taxa_are_rows = T)\nrizo1_phy_taxonomy_norm=tax_table(as.matrix(rizo1_tax))\nrizo1_phy_metadata_norm=sample_data(rizo1_mt)\ntaxa_names(rizo1_phy_OTU_norm)= taxa_names(rizo1_phy_taxonomy_norm)\n\nidentical(rownames(rizo1_ASV_norm), rownames(rizo1_tax))#it should give \"TRUE\"\n#Join all the elements into a new phyloseq object\nrizo1_normalized_phyloseq&lt;-phyloseq(rizo1_phy_OTU_norm,\n                                          rizo1_phy_taxonomy_norm,\n                                          rizo1_phy_metadata_norm)\n\n#a.2) North plot\nrizo2_ASV=as.data.frame(otu_table(rizo2,taxa_are_rows = T))\nrizo2_mt=as.data.frame(sample_data(rizo2))\nrizo2_tax=as.data.frame(tax_table(rizo2))\n\nrizo2_edgeR = DGEList(counts = rizo2_ASV, samples = rizo2_mt, genes = rizo2_tax)\nrizo2_edgeR = calcNormFactors(rizo2_edgeR)\nrizo2_ASV_norm = cpm(rizo2_edgeR, normalized.lib.sizes=T, log=F)\nrizo2_phy_OTU_norm=otu_table(as.data.frame(rizo2_ASV_norm,row.names=F), taxa_are_rows = T)\nrizo2_phy_taxonomy_norm=tax_table(as.matrix(rizo2_tax))\nrizo2_phy_metadata_norm=sample_data(rizo2_mt)\ntaxa_names(rizo2_phy_OTU_norm)= taxa_names(rizo2_phy_taxonomy_norm)\n\nidentical(rownames(rizo2_ASV_norm), rownames(rizo2_tax))\nrizo2_normalized_phyloseq&lt;-phyloseq(rizo2_phy_OTU_norm,\n                                    rizo2_phy_taxonomy_norm,\n                                    rizo2_phy_metadata_norm)\n\n#b) ENDOSPHERE\n#b.1) South plot\nendo1_ASV=as.data.frame(otu_table(endo1,taxa_are_rows = T))\nendo1_mt=as.data.frame(sample_data(endo1))\nendo1_tax=as.data.frame(tax_table(endo1))\n\nendo1_edgeR = DGEList(counts = endo1_ASV, samples = endo1_mt, genes = endo1_tax)\nendo1_edgeR = calcNormFactors(endo1_edgeR)\nendo1_ASV_norm = cpm(endo1_edgeR, normalized.lib.sizes=T, log=F)\nendo1_phy_OTU_norm=otu_table(as.data.frame(endo1_ASV_norm,row.names=F), taxa_are_rows = T)\nendo1_phy_taxonomy_norm=tax_table(as.matrix(endo1_tax))\nendo1_phy_metadata_norm=sample_data(endo1_mt)\ntaxa_names(endo1_phy_OTU_norm)= taxa_names(endo1_phy_taxonomy_norm)\n\nidentical(rownames(endo1_ASV_norm), rownames(endo1_tax))\nendo1_normalized_phyloseq&lt;-phyloseq(endo1_phy_OTU_norm,\n                                    endo1_phy_taxonomy_norm,\n                                    endo1_phy_metadata_norm)\n#b.2) North plot\nendo2_ASV=as.data.frame(otu_table(endo2,taxa_are_rows = T))\nendo2_mt=as.data.frame(sample_data(endo2))\nendo2_tax=as.data.frame(tax_table(endo2))\n\nendo2_edgeR = DGEList(counts = endo2_ASV, samples = endo2_mt, genes = endo2_tax)\nendo2_edgeR = calcNormFactors(endo2_edgeR)\nendo2_ASV_norm = cpm(endo2_edgeR, normalized.lib.sizes=T, log=F)\nendo2_phy_OTU_norm=otu_table(as.data.frame(endo2_ASV_norm,row.names=F), taxa_are_rows = T)\nendo2_phy_taxonomy_norm=tax_table(as.matrix(endo2_tax))\nendo2_phy_metadata_norm=sample_data(endo2_mt)\n#Anyadimos el nombre de los taxones\ntaxa_names(endo2_phy_OTU_norm)= taxa_names(endo2_phy_taxonomy_norm)\n\nidentical(rownames(endo2_ASV_norm), rownames(endo2_tax))\nendo2_normalized_phyloseq&lt;-phyloseq(endo2_phy_OTU_norm,\n                                    endo2_phy_taxonomy_norm,\n                                    endo2_phy_metadata_norm)"
  },
  {
    "objectID": "Fungi_data_analysis.html#multivariate-statistical-tests",
    "href": "Fungi_data_analysis.html#multivariate-statistical-tests",
    "title": "Ecological analyses of fungal dataset",
    "section": "5.2 Multivariate statistical tests",
    "text": "5.2 Multivariate statistical tests\nThe best options to test whether the groups of samples have the same dispersion is to apply the test PERMDISP2, while PERMANOVA (Permutational Multivariate Analysis of Variance Using Distance Matrices) is a test suitable to check whether the centroid (concept similar to the mean of groups of samples) of all the groups of samples to be compared is homogenus. Thus, these tests are the multivariate version of Levene’s and ANOVA tests. However, both of them are based on distance matrices. That is to say, we have to calculate the distance between all sample pairs. There are many different distance or dissimilarity measures, but here we are going to use Bray-Curtis dissimilarity.\nNull hypotheses of both tests: PERMANOVA H0: no significant differences in the centroids (mean values) of the groups of samples PERMDISPD2 H0: no significant differences in the dispersion of the groups of samples\n\n\n\n\n\n\nImportant\n\n\n\nBe careful with unbalanced experiments. As stated Anderson and Walsh (2013), when the groups of samples to be compared have different number of replicates (unbalanced design), heterocedasticity becomes a problem. In that cases, PERMANOVA cannot distinguish between the differences between groups of samples are due to the different dispersion or due to differences in the centroids. So, in case of unbalances designs, it is superimportant to check the dispersion of the data.\n\n\n\n#a) RHIZOSPHERE\n#a.1) South plot\ndf_r1=data.frame(sample_data(rizo1_normalized_phyloseq))#extract the metadata table from the phyloseq object (NORMALIZED phyloseq!)\nb_r1=distance(rizo1_normalized_phyloseq, \"bray\")#calculate Bray-Curtis dissimilarity\n\nadonis_rizo1=adonis2(b_r1~Condition*Year, data=df_r1, permutations = 9999)#apply the PERMANOVA test. Here we test the model Community structure~Plant type*Sampling year\nadonis_rizo1#check the results\n\npairwise.adonis(b_r1, phyloseq::sample_data(rizo1_normalized_phyloseq)$Year, p.adjust.m = \"holm\")#pairwise PERMANOVAs as post-hoc tests\n\nbetadisper_r1=betadisper(b_r1, df_r1$Condition_Year)#check the betadispersion of each factor separately\npermutest(betadisper_r1)\n\nbetadisper_r1_condition=betadisper(b_r1, df_r1$Condition)#Check the betadispersion of the factor \"Condition\"\npermutest(betadisper_r1_condition)\n\nbetadisper_r1_year=betadisper(b_r1, df_r1$Year)#Check the betadispersion of the factor \"sampling year\"\npermutest(betadisper_r1_year)\n\n#a.2) North plot\ndf_r2=data.frame(sample_data(rizo2_normalized_phyloseq))\nb_r2=distance(rizo2_normalized_phyloseq,\"bray\")\n\nadonis_rizo2=adonis2(b_r2~Condition*Year, data=df_r2, permutations = 9999)\nadonis_rizo2\n\npairwise.adonis(b_r2, phyloseq::sample_data(rizo2_normalized_phyloseq)$Year, p.adjust.m = \"holm\")\nbetadisper_r2=betadisper(b_r2, df_r2$Condition_Year)\npermutest(betadisper_r2)\n\nbetadisper_r2_condition=betadisper(b_r2, df_r2$Condition)\npermutest(betadisper_r2_condition)\n\nbetadisper_r2_year=betadisper(b_r2, df_r2$Year)\npermutest(betadisper_r2_year)\n\n#b) ENDOSPHERE\n#b.1) South plot\ndf_e1=data.frame(sample_data(endo1_normalized_phyloseq))\nb_e1=distance(endo1_normalized_phyloseq, \"bray\")\n\nadonis_endo1=adonis2(b_e1~Condition*Year, data=df_e1, permutations = 9999)\nadonis_endo1\n\npairwise.adonis(b_e1, phyloseq::sample_data(endo1_normalized_phyloseq)$Year, p.adjust.m = \"holm\")\npairwise.adonis(b_e1, phyloseq::sample_data(endo1_normalized_phyloseq)$Condition, p.adjust.m = \"holm\")\n\npairwise.adonis(b_e1, phyloseq::sample_data(endo1_normalized_phyloseq)$Fusion, p.adjust.m = \"holm\")\n\nbetadisper_e1=betadisper(b_e1, df_e1$Condition_Year)\npermutest(betadisper_e1)\n\nbetadisper_e1_condition=betadisper(b_e1, df_e1$Condition)\npermutest(betadisper_e1_condition)\n\nbetadisper_e1_year=betadisper(b_e1, df_e1$Year)\npermutest(betadisper_e1_year)\n\n#b.2) North plot\ndf_e2=data.frame(sample_data(endo2_normalized_phyloseq))\nb_e2=distance(endo2_normalized_phyloseq, \"bray\")\n\nadonis_endo2=adonis2(b_e2~Condition*Year, data=df_e2, permutations = 9999)\nadonis_endo2\n\npairwise.adonis(b_e2, phyloseq::sample_data(endo2_normalized_phyloseq)$Fusion, p.adjust.m = \"holm\")\n\nbetadisper_e2=betadisper(b_e2, df_e2$Condition_Year)\npermutest(betadisper_e2)\n\nbetadisper_e2_condition=betadisper(b_e2, df_e2$Condition)\npermutest(betadisper_e2_condition)\n\nbetadisper_e2_year=betadisper(b_e2, df_e2$Year)\npermutest(betadisper_e2_year)\n\n#Let's calculate the size of the effects. But first, we have to create the function that calculates the size of the effect:\nadonis_OmegaSq &lt;- function(adonisOutput, partial = TRUE){\n  if(!(is(adonisOutput, \"adonis\") || is(adonisOutput, \"anova.cca\")))\n    stop(\"Input should be an adonis object\")\n  if (is(adonisOutput, \"anova.cca\")) {\n    aov_tab &lt;- adonisOutput\n    aov_tab$MeanSqs &lt;- aov_tab$SumOfSqs / aov_tab$Df\n    aov_tab$MeanSqs[length(aov_tab$Df)] &lt;- NA\n  } else {\n    aov_tab &lt;- adonisOutput$aov.tab\n  }\n  heading &lt;- attr(aov_tab, \"heading\")\n  MS_res &lt;- aov_tab[pmatch(\"Residual\", rownames(aov_tab)), \"MeanSqs\"]\n  SS_tot &lt;- aov_tab[rownames(aov_tab) == \"Total\", \"SumsOfSqs\"]\n  N &lt;- aov_tab[rownames(aov_tab) == \"Total\", \"Df\"] + 1\n  if(partial){\n    omega &lt;- apply(aov_tab, 1, function(x) (x[\"Df\"]*(x[\"MeanSqs\"]-MS_res))/(x[\"Df\"]*x[\"MeanSqs\"]+(N-x[\"Df\"])*MS_res))\n    aov_tab$parOmegaSq &lt;- c(omega[1:(length(omega)-2)], NA, NA)\n  } else {\n    omega &lt;- apply(aov_tab, 1, function(x) (x[\"SumsOfSqs\"]-x[\"Df\"]*MS_res)/(SS_tot+MS_res))\n    aov_tab$OmegaSq &lt;- c(omega[1:(length(omega)-2)], NA, NA)\n  }\n  if (is(adonisOutput, \"adonis\"))\n    cn_order &lt;- c(\"Df\", \"SumsOfSqs\", \"MeanSqs\", \"F.Model\", \"R2\",\n                  if (partial) \"parOmegaSq\" else \"OmegaSq\", \"Pr(&gt;F)\")\n  else\n    cn_order &lt;- c(\"Df\", \"SumOfSqs\", \"F\", if (partial) \"parOmegaSq\" else \"OmegaSq\",\n                  \"Pr(&gt;F)\")\n  aov_tab &lt;- aov_tab[, cn_order]\n  attr(aov_tab, \"names\") &lt;- cn_order\n  attr(aov_tab, \"heading\") &lt;- heading\n  if (is(adonisOutput, \"adonis\"))\n    adonisOutput$aov.tab &lt;- aov_tab\n  else\n    adonisOutput &lt;- aov_tab\n  return(adonisOutput)\n}\n\n#apply just in that cases in which PERMANOVA gives significant results:\nadonis_OmegaSq(adonis_rizo1)\nadonis_OmegaSq(adonis_rizo2)\nadonis_OmegaSq(adonis_endo1)\nadonis_OmegaSq(adonis_endo2)\n\nNow, let’s compare the structure of bacterial communities of mothers, first and second suckers:\n\n#a) RHIZOSPHERE\n#a.1) South plot\nadonis_rizo1_generation=adonis2(b_r1~Generation, data=df_rizo1, permutations = 9999)\nadonis_rizo1_generation\n\nbetadisper_rizo1_generation=betadisper(b_r1, df_rizo1$Generation)\npermutest(betadisper_rizo1_generation)\n\nadonis_OmegaSq(adonis_rizo1_generation)\n\npairwise.adonis(b_r1, phyloseq::sample_data(rizo1)$Generation, p.adjust.m = \"holm\")\npa=pairwise.adonis(b_r1, phyloseq::sample_data(rizo1)$Generation, p.adjust.m = \"holm\")\n\n#a.2) North plot\nadonis_rizo2_generation=adonis2(b_r2~Generation, data=df_rizo2, permutations = 9999)\nadonis_rizo2_generation\n\nbetadisper_rizo2_generation=betadisper(b_r2, df_rizo2$Generation)\npermutest(betadisper_rizo2_generation)\n\nadonis_OmegaSq(adonis_rizo2_generation)\npairwise.adonis(b_r2, phyloseq::sample_data(rizo2)$Generation, p.adjust.m = \"holm\")\n\n#b) ENDOSPHERE\n#b.1) South plot\nadonis_endo1_generation=adonis2(b_e1~Generation, data=df_endo1, permutations = 9999)\nadonis_endo1_generation\n\nbetadisper_endo1_generation=betadisper(b_e1, df_endo1$Generation)\npermutest(betadisper_endo1_generation)\n\n#b.2) North plot\nadonis_endo2_generation=adonis2(b_e2~Generation, data=df_endo2, permutations = 9999)\nadonis_endo2_generation\n\nbetadisper_endo2_generation=betadisper(b_e2, df_endo2$Generation)\npermutest(betadisper_endo2_generation)\n\nadonis_OmegaSq(adonis_endo2_generation)\npairwise.adonis(b_e2, phyloseq::sample_data(endo2)$Generation, p.adjust.m = \"holm\")"
  },
  {
    "objectID": "Fungi_data_analysis.html#phylum-level",
    "href": "Fungi_data_analysis.html#phylum-level",
    "title": "Ecological analyses of fungal dataset",
    "section": "6.1 Phylum level",
    "text": "6.1 Phylum level\n\n6.1.1 Obtaining tables with the relative abundance and standard deviation values\nWe are going to obtain the relative abundance of each phylum detected in our samples.\n\nphylum_relabun=tax_glom(phy_data_relabun, taxrank = \"Phylum\") #aglomerate at Phylum level\ncolSums(otu_table(phylum_relabun)) #check that the relative abundance sums 100% in all cases\n\n#Now we are going to create a table with the relative abundance of each taxa in each replicate so that we can work on it, for instance, in Excel\na=as.data.frame(otu_table(phylum_relabun))\naa=cbind(tax_table(phylum_relabun),a)\nidentical(rownames(a),rownames(aa))#comprobamos que sean identicos (tiene uqe salir por consola \"TRUE\")\nwrite.table(data.frame(\"TAXA\"=rownames(aa),aa),file=\"abundrel_phylum_porReplicas.txt\", sep=\"\\t\",row.names =F)\n\n#Another table, with the mean and standard deviation of the relative abundance of each phylum:\ntable_phylum = otu_table(phylum_relabun)[,] %&gt;% t() %&gt;% as.data.frame()\ntax_phylum=tax_table(phylum_relabun)\n\nphylum_media=aggregate(table_phylum, by=list(as.data.frame(sample_data(phylum_relabun))$Fusion), FUN=mean)%&gt;% column_to_rownames(\"Group.1\") %&gt;% t() #calculate the mean values of the relative abundance of each phylum in each group of samples \n\nphylum_sd = aggregate(table_phylum, by=list(as.data.frame(sample_data(phylum_relabun))$Fusion), FUN=sd)%&gt;% column_to_rownames(\"Group.1\")  %&gt;% t()  %&gt;% \n  as.data.frame() %&gt;% rename_with(.fn= ~paste0(colnames(phylum_media), \"_SD\"))#calculate the standard deviation of the relative abundance of each phylum in each group of samples\n\nphylum_media_sd=merge(tax_phylum, phylum_media, by=0) %&gt;%column_to_rownames(\"Row.names\") %&gt;% #bind mean and sd values into one table\n  merge(phylum_sd, by=0) %&gt;% column_to_rownames(\"Row.names\")\ncolSums(phylum_media_sd[,9:ncol(phylum_media_sd)])\n\nwrite.table(data.frame(\"TAXA\"=rownames(phylum_media_sd),phylum_media_sd), file=\"abundrel_media_sd_phylum.txt\", sep=\"\\t\",row.names =F)\n\n\n\n6.1.2 Plotting\nWe are going to make a stacked bars plot, just indicating the most abundant phyla\nFirstly, we have to prepare the data and modify the table so that we can obtain tables suitable for the plotting with the package ggplot2.\n\ndf_melt_phylum = psmelt(physeq = phylum_relabun) #transform the phyloseq object into a dataframe in which the abundance of each phylum is in rows\ncolnames(df_melt_phylum)#check the content of the dataframe\n\n#Here we aggregate the data by the factor we indicate in the argument \"by\"\ndf_melt_aggreg1 = aggregate(df_melt_phylum$Abundance, \n                            by=list(Group=df_melt_phylum$Fusion, \n                                    Sample=df_melt_phylum$Sample,Phylum=df_melt_phylum$Phylum,\n                                                              Compartment=df_melt_phylum$Compartment,\n                                    Plot=df_melt_phylum$Plot, Year=df_melt_phylum$Year, Condition=df_melt_phylum$Condition), FUN=sum)#it sums the abundance of each phylum in all the replicates corresponding to the same group of samples\ncolnames(df_melt_aggreg1)=c(\"Group\", \"Sample\", \"Phylum\",\"Compartment\",\"Plot\",\"Year\",\"Condition\",\"Abundance\")#rename the columns\ncolnames(df_melt_aggreg1) \n\ndf_melt_aggreg_mean = aggregate(df_melt_aggreg1$Abundance, by=list(Group=df_melt_aggreg1$Group, \n                                                                   Phylum=df_melt_aggreg1$Phylum,\n                                                                   Compartment=df_melt_aggreg1$Compartment,\n                                                                   Plot=df_melt_aggreg1$Plot, Year=df_melt_aggreg1$Year,Condition=df_melt_aggreg1$Condition), FUN=mean)#now, it makes the mean relative abundance of each phylum in each group of samples\ncolnames(df_melt_aggreg_mean)&lt;-c(\"Group\", \"Phylum\",\"Compartment\", \"Plot\",\"Year\",\"Condition\",\"Abundance\")\ncolnames(df_melt_aggreg_mean)&lt;-c(\"Group\", \"Phylum\",\"Compartment\", \"Plot\",\"Year\",\"Condition\",\"Abundance\")\ncolnames(df_melt_aggreg_mean)\n\n#repeat the same with the standard deviation\ndf_melt_aggreg_sd=aggregate(df_melt_aggreg1$Abundance, by=list(Group=df_melt_aggreg1$Group, \n                                                               Phylum=df_melt_aggreg1$Phylum,\n                                                               Compartment=df_melt_aggreg1$Compartment,\n                                                               Plot=df_melt_aggreg1$Plot, Year=df_melt_aggreg1$Year,Condition=df_melt_aggreg1$Condition), FUN=sd)\ncolnames(df_melt_aggreg_sd)=c(\"Group\", \"Phylum\",\"Compartment\",\"Plot\",\"Year\",\"Condition\",\"sd\")\n\nall(df_melt_aggreg_mean$Group==df_melt_aggreg_sd$Group)\nall(df_melt_aggreg_mean$Phylum==df_melt_aggreg_sd$Phylum)\n\ndf_melt_aggreg_mean$sd=df_melt_aggreg_sd$sd \nmedia_sd_phylum_todos=df_melt_aggreg_mean\n\nNow, we are ready to plot the mean relative abundances. We want to order the phyla by ascending relative abundance, keeping the unclassified and minor phyla in the upper part of the plot.\n\n#a) RHIZOSPHERE\n#a.1) South plot\nmedia_sd_phylum_Rizo=media_sd_phylum_todos[media_sd_phylum_todos[,\"Compartment\"] == \"Rhizosphere\",]#subset the dataset\nmedia_sd_phylum_Rizo1=media_sd_phylum_Rizo[media_sd_phylum_Rizo[,\"Plot\"] == \"Plot1\",]\n\n#aggregate all the phyla that were not classified\nmedia_sd_phylum_Rizo1$Phylum=as.character(media_sd_phylum_Rizo1$Phylum)\nunclassified_rizo1=media_sd_phylum_Rizo1[media_sd_phylum_Rizo1[,\"Phylum\"] == \"unclassified\",] #save them into a new variable\nmedia_sd_phylum_Rizo1=media_sd_phylum_Rizo1[media_sd_phylum_Rizo1[,\"Phylum\"] != \"unclassified\",] #remove the unclassified phyla from the original dataset\n\n#aggregate all the phyla that account less than 1% into an artificial group named \"Other phyla &lt;1%\"\nmedia_sd_phylum_Rizo1$Phylum[media_sd_phylum_Rizo1$Abundance &lt;= 1.0] = \"Other phyla (&lt;1%)\" \nmedia_sd_phylum_Rizo1$Phylum=as.factor(media_sd_phylum_Rizo1$Phylum)\n\nothers_rizo1=media_sd_phylum_Rizo1[media_sd_phylum_Rizo1[,\"Phylum\"] == \"Other phyla (&lt;1%)\",]#save the \"other phyla\" into a new variable\nmedia_sd_phylum_Rizo1=media_sd_phylum_Rizo1[media_sd_phylum_Rizo1[,\"Phylum\"] != \"Other phyla (&lt;1%)\",]#remove them from the original dataset\n\n#Now, the minor and unclassified phyla are not included in the original dataset, so let's order by abundance the remaining phyla\nordenado_rizo1=media_sd_phylum_Rizo1[order(media_sd_phylum_Rizo1$Abundance, decreasing=T),]#order by relative abundance\nordenado_rizo1=rbind(ordenado_rizo1,others_rizo1,unclassified_rizo1)#now add the minor phyla and the unclassified\n\ngroup_label_rizo1=c(\"Mature\",\"Immature\", \"Mature\",\"Immature\")#set the labels\nlevels_rizo1=c(\"A_Plot1_Mature_Rhizosphere\",\"A_Plot1_Immature_Rhizosphere\",\"B_Plot1_Mature_Rhizosphere\",\n               \"B_Plot1_Immature_Rhizosphere\")#set the levels of the graph\nlimits_rizo1=c(\"A_Plot1_Mature_Rhizosphere\",\"A_Plot1_Immature_Rhizosphere\",\"B_Plot1_Mature_Rhizosphere\",\n               \"B_Plot1_Immature_Rhizosphere\")#set the limits of the graph\n\nphyl_name_ordered_rizo1=as.vector(ordenado_rizo1$Phylum)\nnombres_unicos_rizo1=unique(phyl_name_ordered_rizo1)#get the levels (=the names of the phyla )of the factor \"Phylum\", and show them just once regardless of their abundance and prevalence)\n\nordenado_rizo1$Phylum=reorder.factor(ordenado_rizo1$Phylum,new.order=rev(nombres_unicos_rizo1)) #order the name of the phyla\nlab_unicos_rizo1=nombres_unicos_rizo1 \n\nsorted_labels_ggplot_rizo1 &lt;- sapply(lab_unicos_rizo1,\n                                    function(x) if (x == \"Other phyla (&lt;1%)\"|x == \"unclassified\"|x == \"Other genera (&lt;1%)\")\n                                    {parse(text=paste0(\"'\", as.character(x), \"'\"))} else {parse(text = paste0(\"italic('\",as.character(x), \"')\"))})\n#this function helps us to write the name of the phyla (and genera) in italics and the name of the minor phyla and unclassified without italics\n\ncolores_rizo1 = c(\"#0099FF\", \"#00CC00\",\"#9933FF\",\"yellow\", \"#FF00FF\",\"grey\", \"black\")#choose the colors of specific phyla\n\nlength(lab_unicos_rizo1)==length(colores_rizo1) #si FALSE, anyadir/quitar colores\nlength(lab_unicos_rizo1)\nlength(colores_rizo1)\n\ntitulo_plot_rizo1=\"Plot 1\"\n\np3=ggplot(ordenado_rizo1, aes(x=Group, y=Abundance, fill=Phylum, order=Phylum)) + geom_bar(stat=\"identity\", position=\"stack\")+\n  scale_fill_manual(values=colores_rizo1,\n                    labels=sorted_labels_ggplot_rizo1,\n                    breaks=nombres_unicos_rizo1)+\n  labs(y=\"Mean relative abundance (%)\", x=NULL, fill=\"Phylum\",title=titulo_plot_rizo1)+\n  guides(fill = guide_legend(reverse = TRUE))+\n scale_x_discrete(limits=limits_rizo1,labels=group_label_rizo1,\n                  breaks=levels_rizo1)+\n  scale_y_continuous(expand=c(0.01,0.01),\n                     breaks=c(0,10,20,30,40,50,60,70,80,90,100),\n                     labels=c(\"0\",\"10\", \"20\",\"30\",\"40\",\"50\",\"60\",\"70\",\"80\",\"90\",\"100\"),\n                     limits = c(NA, 100))+\n  theme_bw()+\n  theme(panel.border = element_rect(colour=\"black\"))+\n  theme(axis.title.x=element_blank())+\n  theme(plot.title = element_text(face=\"bold\", hjust = 0.5, size=16))+\n  theme(axis.text = element_text(size = 14))+\n  theme(axis.text.x = element_text(face=\"bold\", size=16))+\n  theme(axis.title.y = element_text(size = 16))+\n  theme(legend.key.size = unit(0.9, \"cm\"))+\n  theme(legend.text = element_text(size = 18))+\n  theme(legend.title = element_text(size=18, face=\"bold\"))+\n  theme(legend.title.align=0)+\n  theme(legend.text.align = 0) \n\nx11()\np3\n\n# a.2) North plot\nmedia_sd_phylum_Rizo=media_sd_phylum_todos[media_sd_phylum_todos[,\"Compartment\"] == \"Rhizosphere\",]\nmedia_sd_phylum_Rizo2=media_sd_phylum_Rizo[media_sd_phylum_Rizo[,\"Plot\"] == \"Plot2\",]\n\nmedia_sd_phylum_Rizo2$Phylum=as.character(media_sd_phylum_Rizo2$Phylum)\nunclassified_rizo2=media_sd_phylum_Rizo2[media_sd_phylum_Rizo2[,\"Phylum\"] == \"unclassified\",] \nmedia_sd_phylum_Rizo2=media_sd_phylum_Rizo2[media_sd_phylum_Rizo2[,\"Phylum\"] != \"unclassified\",] \n\nmedia_sd_phylum_Rizo2$Phylum[media_sd_phylum_Rizo2$Abundance &lt;= 1.0] = \"Other phyla (&lt;1%)\" \nmedia_sd_phylum_Rizo2$Phylum=as.factor(media_sd_phylum_Rizo2$Phylum)\n\nothers_rizo2=media_sd_phylum_Rizo2[media_sd_phylum_Rizo2[,\"Phylum\"] == \"Other phyla (&lt;1%)\",]\nmedia_sd_phylum_Rizo2=media_sd_phylum_Rizo2[media_sd_phylum_Rizo2[,\"Phylum\"] != \"Other phyla (&lt;1%)\",]\n\nordenado_rizo2=media_sd_phylum_Rizo2[order(media_sd_phylum_Rizo2$Abundance, decreasing=T),] \nordenado_rizo2=rbind(ordenado_rizo2,others_rizo2,unclassified_rizo2)\n\ngroup_label_rizo2=c(\"Mature\",\"Immature\", \"Mature\",\"Immature\")\nlevels_rizo2=c(\"A_Plot2_Mature_Rhizosphere\",\"A_Plot2_Immature_Rhizosphere\",\"B_Plot2_Mature_Rhizosphere\",\n               \"B_Plot2_Immature_Rhizosphere\")\nlimits_rizo2=c(\"A_Plot2_Mature_Rhizosphere\",\"A_Plot2_Immature_Rhizosphere\",\"B_Plot2_Mature_Rhizosphere\",\n               \"B_Plot2_Immature_Rhizosphere\")\n\nphyl_name_ordered_rizo2=as.vector(ordenado_rizo2$Phylum)\nnombres_unicos_rizo2=unique(phyl_name_ordered_rizo2)\n\nordenado_rizo2$Phylum=reorder.factor(ordenado_rizo2$Phylum,new.order=rev(nombres_unicos_rizo2))\nlab_unicos_rizo2=nombres_unicos_rizo2 \n\nsorted_labels_ggplot_rizo2 &lt;- sapply(lab_unicos_rizo2,\n                                     function(x) if (x == \"Other phyla (&lt;1%)\"|x == \"unclassified\"|x == \"Other genera (&lt;1%)\")\n                                     {parse(text=paste0(\"'\", as.character(x), \"'\"))} else {parse(text = paste0(\"italic('\",as.character(x), \"')\"))})\n\ncolores_rizo2 = c(\"#0099FF\", \"#00CC00\", \"#9933FF\",\"#FF00FF\",\n                  \"brown\",\"grey\", \"black\")\n\nlength(lab_unicos_rizo2)==length(colores_rizo2) \nlength(lab_unicos_rizo2)\nlength(colores_rizo2)\n\ntitulo_plot_rizo2=\"Plot 2\"\n\n#b) ENDOSPHERE\n#b.1) South plot\nmedia_sd_phylum_Endo1=media_sd_phylum_Endo[media_sd_phylum_Endo[,\"Plot\"] == \"Plot1\",]\nmedia_sd_phylum_Endo1$Phylum=as.character(media_sd_phylum_Endo1$Phylum)\nunclassified_endo1=media_sd_phylum_Endo1[media_sd_phylum_Endo1[,\"Phylum\"] == \"unclassified\",] \nmedia_sd_phylum_Endo1=media_sd_phylum_Endo1[media_sd_phylum_Endo1[,\"Phylum\"] != \"unclassified\",] \nmedia_sd_phylum_Endo1$Phylum[media_sd_phylum_Endo1$Abundance &lt;= 1.0] = \"Other phyla (&lt;1%)\" \nmedia_sd_phylum_Endo1$Phylum=as.factor(media_sd_phylum_Endo1$Phylum)\n\nothers_endo1=media_sd_phylum_Endo1[media_sd_phylum_Endo1[,\"Phylum\"] == \"Other phyla (&lt;1%)\",]\nmedia_sd_phylum_Endo1=media_sd_phylum_Endo1[media_sd_phylum_Endo1[,\"Phylum\"] != \"Other phyla (&lt;1%)\",]\n\nordenado_endo1=media_sd_phylum_Endo1[order(media_sd_phylum_Endo1$Abundance, decreasing=T),] \nordenado_endo1=rbind(ordenado_endo1,others_endo1,unclassified_endo1)\n\ngroup_label_endo1=c(\"Mothers\",\"Suckers\", \"Mothers\",\"Suckers\")\nlevels_endo1=c(\"A_Plot1_Mature_Endosphere\",\"A_Plot1_Immature_Endosphere\",\"B_Plot1_Mature_Endosphere\",\"B_Plot1_Immature_Endosphere\")\nlimits_endo1=c(\"A_Plot1_Mature_Endosphere\",\"A_Plot1_Immature_Endosphere\",\"B_Plot1_Mature_Endosphere\",\"B_Plot1_Immature_Endosphere\")\n\nphyl_name_ordered_endo1=as.vector(ordenado_endo1$Phylum)\nnombres_unicos_endo1=unique(phyl_name_ordered_endo1)\n\nordenado_endo1$Phylum=reorder.factor(ordenado_endo1$Phylum,new.order=rev(nombres_unicos_endo1))\nlab_unicos_endo1=nombres_unicos_endo1 \nsorted_labels_ggplot_endo1 &lt;- sapply(lab_unicos_endo1,\n                                    function(x) if (x == \"Other phyla (&lt;1%)\"|x == \"unclassified\"|x == \"Other genera (&lt;1%)\")\n                                    {parse(text=paste0(\"'\", as.character(x), \"'\"))} else {parse(text = paste0(\"italic('\",as.character(x), \"')\"))})\ncolores_endo1 = c(\"#0099FF\",\"#00CC00\", \"grey\",\"black\")\n\nlength(lab_unicos_endo1)==length(colores_endo1)\nlength(lab_unicos_endo1)\nlength(colores_endo1)\n\ntitulo_plot_endo1=\"South plot\"\n\np1=ggplot(ordenado_endo1, aes(x=Group, y=Abundance, fill=Phylum, order=Phylum)) + geom_bar(stat=\"identity\", position=\"stack\")+\n  scale_fill_manual(values=colores_endo1,\n                    labels=sorted_labels_ggplot_endo1,\n                    breaks=nombres_unicos_endo1)+\n  labs(y=\"Mean relative abundance (%)\", x=NULL, fill=\"Phylum\",title=titulo_plot_endo1)+\n  guides(fill = guide_legend(reverse = TRUE))+#sirve para cambiar el orden de la leyenda\n  scale_x_discrete(limits=limits_endo1,labels=group_label_endo1,\n                   breaks=levels_endo1)+\n  scale_y_continuous(expand=c(0.01,0.01),\n                     breaks=c(0,10,20,30,40,50,60,70,80,90,100),\n                     labels=c(\"0\",\"10\", \"20\",\"30\",\"40\",\"50\",\"60\",\"70\",\"80\",\"90\",\"100\"),\n                     limits = c(NA, 100))+\n  theme_bw()+\n  theme(panel.border = element_rect(colour=\"black\"))+\n  theme(axis.title.x=element_blank())+\n  theme(plot.title = element_text(face=\"bold\", hjust = 0.5, size=7))+\n  theme(axis.text = element_text(size = 5))+\n  theme(axis.text.x = element_text(face=\"bold\", size=5))+\n  theme(axis.title.y = element_text(size = 7))+\n  theme(legend.key.size = unit(0.9, \"cm\"))+\n  theme(legend.text = element_text(size = 5))+\n  theme(legend.title = element_text(size=7, face=\"bold\"))+\n  theme(legend.title.align=0)+\n  theme(legend.text.align = 0)+\n  theme(legend.position = \"none\")\n\nx11()\np1\n\n#b.2) North plot\nmedia_sd_phylum_Endo2=media_sd_phylum_Endo[media_sd_phylum_Endo[,\"Plot\"] == \"Plot2\",]\n\nmedia_sd_phylum_Endo2$Phylum=as.character(media_sd_phylum_Endo2$Phylum)\nunclassified_endo2=media_sd_phylum_Endo2[media_sd_phylum_Endo2[,\"Phylum\"] == \"unclassified\",] \nmedia_sd_phylum_Endo2=media_sd_phylum_Endo2[media_sd_phylum_Endo2[,\"Phylum\"] != \"unclassified\",] \nmedia_sd_phylum_Endo2$Phylum[media_sd_phylum_Endo2$Abundance &lt;= 1.0] = \"Other phyla (&lt;1%)\"\nmedia_sd_phylum_Endo2$Phylum=as.factor(media_sd_phylum_Endo2$Phylum)\n\nothers_endo2=media_sd_phylum_Endo2[media_sd_phylum_Endo2[,\"Phylum\"] == \"Other phyla (&lt;1%)\",]\nmedia_sd_phylum_Endo2=media_sd_phylum_Endo2[media_sd_phylum_Endo2[,\"Phylum\"] != \"Other phyla (&lt;1%)\",]\n\nordenado_endo2=media_sd_phylum_Endo2[order(media_sd_phylum_Endo2$Abundance, decreasing=T),] \nordenado_endo2=rbind(ordenado_endo2,others_endo2,unclassified_endo2)\n\ngroup_label_endo2=c(\"Mature\",\"Immature\", \"Mature\",\"Immature\")\nlevels_endo2=c(\"A_Plot2_Mature_Endosphere\",\"A_Plot2_Immature_Endosphere\",\"B_Plot2_Mature_Endosphere\",\"B_Plot2_Immature_Endosphere\")\nlimits_endo2=c(\"A_Plot2_Mature_Endosphere\",\"A_Plot2_Immature_Endosphere\",\"B_Plot2_Mature_Endosphere\",\"B_Plot2_Immature_Endosphere\")\n\nphyl_name_ordered_endo2=as.vector(ordenado_endo2$Phylum)\nnombres_unicos_endo2=unique(phyl_name_ordered_endo2)\n\nordenado_endo2$Phylum=reorder.factor(ordenado_endo2$Phylum,new.order=rev(nombres_unicos_endo2))\n\nsorted_labels_ggplot_endo2 &lt;- sapply(lab_unicos_endo2,\n                                     function(x) if (x == \"Other phyla (&lt;1%)\"|x == \"unclassified\"|x == \"Other genera (&lt;1%)\")\n                                     {parse(text=paste0(\"'\", as.character(x), \"'\"))} else {parse(text = paste0(\"italic('\",as.character(x), \"')\"))})\n\ncolores_endo2 = c(\"#0099FF\",\"#00CC00\",\"grey\",\"black\")\n\nlength(lab_unicos_endo2)==length(colores_endo2) \nlength(lab_unicos_endo2)\nlength(colores_endo2)\n\ntitulo_plot_endo2=\"Plot 2\"\n\np2=ggplot(ordenado_endo2, aes(x=Group, y=Abundance, fill=Phylum, order=Phylum)) + geom_bar(stat=\"identity\", position=\"stack\")+\n  scale_fill_manual(values=colores_endo2,\n                    labels=sorted_labels_ggplot_endo2,\n                    breaks=nombres_unicos_endo2)+\n  labs(y=\"Mean relative abundance (%)\", x=NULL, fill=\"Phylum\",title=titulo_plot_endo2)+\n  guides(fill = guide_legend(reverse = TRUE))+\n  scale_x_discrete(limits=limits_endo2,labels=group_label_endo2,\n                   breaks=levels_endo2)+\n  scale_y_continuous(expand=c(0.01,0.01),\n                     breaks=c(0,10,20,30,40,50,60,70,80,90,100),\n                     labels=c(\"0\",\"10\", \"20\",\"30\",\"40\",\"50\",\"60\",\"70\",\"80\",\"90\",\"100\"),\n                     limits = c(NA, 100))+\n  theme_bw()+\n  theme(panel.border = element_rect(colour=\"black\"))+\n  theme(axis.title.x=element_blank())+\n  theme(plot.title = element_text(face=\"bold\", hjust = 0.5, size=16))+\n  theme(axis.text = element_text(size = 14))+\n  theme(axis.text.x = element_text(face=\"bold\", size=16))+\n  theme(axis.title.y = element_text(size = 16))+\n  theme(legend.key.size = unit(0.9, \"cm\"))+\n  theme(legend.text = element_text(size = 18))+\n  theme(legend.title = element_text(size=18, face=\"bold\"))+\n  theme(legend.title.align=0)+\n  theme(legend.text.align = 0) \n\nx11()\np2"
  },
  {
    "objectID": "Fungi_data_analysis.html#genus",
    "href": "Fungi_data_analysis.html#genus",
    "title": "Ecological analyses of fungal dataset",
    "section": "6.2 Genus",
    "text": "6.2 Genus\n\n6.2.1 Obtain tables with the relative abundance and standard deviation values\nWe are going to obtain the relative abundance of each phylum detected in our samples.\n\ngenus_relabun=tax_glom(phy_data_relabun, taxrank = \"Genus\")\ncolSums(otu_table(genus_relabun))\n\nb=as.data.frame(otu_table(genus_relabun))\nbb=cbind(tax_table(genus_relabun),b)\nidentical(rownames(b),rownames(bb))\nwrite.table(data.frame(\"TAXA\"=rownames(bb),bb),file=\"abundrel_Genero_porReplicas.txt\", sep=\"\\t\",row.names =F)\n\ntable_genus = otu_table(genus_relabun)[,] %&gt;% t() %&gt;% as.data.frame()\ntax_genus=tax_table(genus_relabun)\n\ngenus_media=aggregate(table_genus, by=list(as.data.frame(sample_data(genus_relabun))$Fusion), FUN=mean)%&gt;% column_to_rownames(\"Group.1\") %&gt;% t() \n\ngenus_sd= aggregate(table_genus, by=list(as.data.frame(sample_data(genus_relabun))$Fusion), FUN=sd)%&gt;% column_to_rownames(\"Group.1\")  %&gt;% t()  %&gt;% \n  as.data.frame() %&gt;% rename_with(.fn= ~paste0(colnames(genus_media), \"_SD\"))\n\ngenus_media_sd=merge(tax_genus, genus_media, by=0) %&gt;%column_to_rownames(\"Row.names\") %&gt;%\n  merge(genus_sd, by=0) %&gt;% column_to_rownames(\"Row.names\")\ncolSums(genus_media_sd[,8:ncol(genus_media_sd)])\ngenus_media_sd$ASV_names=row.names(genus_media_sd)\n\nwrite.table(data.frame(\"TAXA\"=rownames(genus_media_sd),genus_media_sd), file=\"abundrel_media_sd_genus.txt\", sep=\"\\t\",row.names =F)\n\n\n\n6.2.2. Plotting\nWe are going to make a stacked bars plot, just indicating the most abundant genera\nFirstly, we have to prepare the data and modify the table so that we can obtain tables suitable for the plotting with the package ggplot2.\n\ndf_melt_genus = psmelt(physeq = genus_relabun)\ncolnames(df_melt_genus)\n\ndf_melt_aggreg2 = aggregate(df_melt_genus$Abundance, \n                            by=list(Group=df_melt_genus$Fusion, \n                                    Sample=df_melt_genus$Sample,Genus=df_melt_genus$Genus,\n                                    Compartment=df_melt_genus$Compartment,\n                                    Plot=df_melt_genus$Plot, Year=df_melt_genus$Year, Condition=df_melt_genus$Condition), FUN=sum)\ncolnames(df_melt_aggreg2)=c(\"Group\", \"Sample\", \"Genus\",\"Compartment\",\"Plot\",\"Year\",\"Condition\",\"Abundance\")\ncolnames(df_melt_aggreg2)\n\ndf_melt_aggreg_mean = aggregate(df_melt_aggreg2$Abundance, by=list(Group=df_melt_aggreg2$Group, \n                                                                   Genus=df_melt_aggreg2$Genus,\n                                                                   Compartment=df_melt_aggreg2$Compartment,\n                                                                   Plot=df_melt_aggreg2$Plot, Year=df_melt_aggreg2$Year,Condition=df_melt_aggreg2$Condition), FUN=mean)\ncolnames(df_melt_aggreg_mean)&lt;-c(\"Group\", \"Genus\",\"Compartment\", \"Plot\",\"Year\",\"Condition\",\"Abundance\")\ncolnames(df_melt_aggreg_mean)\n\ndf_melt_aggreg_sd=aggregate(df_melt_aggreg2$Abundance, by=list(Group=df_melt_aggreg2$Group, \n                                                               Genus=df_melt_aggreg2$Genus,\n                                                               Compartment=df_melt_aggreg2$Compartment,\n                                                               Plot=df_melt_aggreg2$Plot, Year=df_melt_aggreg2$Year,Condition=df_melt_aggreg2$Condition), FUN=sd)\ncolnames(df_melt_aggreg_sd)=c(\"Group\", \"Genus\",\"Compartment\",\"Plot\",\"Year\",\"Condition\",\"sd\")\n\nall(df_melt_aggreg_mean$Group==df_melt_aggreg_sd$Group)\nall(df_melt_aggreg_mean$Genus==df_melt_aggreg_sd$Genus)\n\n\ndf_melt_aggreg_mean$sd=df_melt_aggreg_sd$sd\n\nmedia_sd_genus_todos=df_melt_aggreg_mean\n\nNow, we are ready to plot the mean relative abundances. We want to order the genera by ascending relative abundance, keeping the unclassified and minor genera in the upper part of the plot.\n\n#a) RHIZOSPHERE\nmedia_sd_genus_rizo=media_sd_genus_todos[media_sd_genus_todos[,\"Compartment\"] == \"Rhizosphere\",]\n\n#a.1) South plot\nmedia_sd_genus_rizo1=media_sd_genus_rizo[media_sd_genus_rizo[,\"Plot\"] == \"Plot1\",]\n\nmedia_sd_genus_rizo1$Genus=as.character(media_sd_genus_rizo1$Genus)\nunclassified_r1=media_sd_genus_rizo1[media_sd_genus_rizo1[,\"Genus\"] == \"unclassified\",]\nmedia_sd_genus_rizo1=media_sd_genus_rizo1[media_sd_genus_rizo1[,\"Genus\"] != \"unclassified\",] \nmedia_sd_genus_rizo1$Genus[media_sd_genus_rizo1$Abundance &lt;= 2] = \"Other genera (&lt;2%)\" \nmedia_sd_genus_rizo1$Genus=as.factor(media_sd_genus_rizo1$Genus)\n\nothers_r1=media_sd_genus_rizo1[media_sd_genus_rizo1[,\"Genus\"] == \"Other genera (&lt;2%)\",]\nmedia_sd_genus_rizo1=media_sd_genus_rizo1[media_sd_genus_rizo1[,\"Genus\"] != \"Other genera (&lt;2%)\",]\n\nordenado_r1=media_sd_genus_rizo1[order(media_sd_genus_rizo1$Abundance, decreasing=T),] \nordenado_r1=rbind(ordenado_r1,others_r1,unclassified_r1)\n\ngroup_label_r1=c(\"M\",\"S\", \"M\",\"S\")\nlevels_r1=c(\"A_Plot1_Mature_Rhizosphere\",\"A_Plot1_Immature_Rhizosphere\",\n           \"B_Plot1_Mature_Rhizosphere\",\"B_Plot1_Immature_Rhizosphere\")\nlimits_r1=c(\"A_Plot1_Mature_Rhizosphere\",\"A_Plot1_Immature_Rhizosphere\",\n            \"B_Plot1_Mature_Rhizosphere\",\"B_Plot1_Immature_Rhizosphere\")\n\ngenus_name_ordered_r1=as.vector(ordenado_r1$Genus)\nnombres_unicos_r1=unique(genus_name_ordered_r1)\n\nordenado_r1$Genus=reorder.factor(ordenado_r1$Genus,new.order=rev(nombres_unicos_r1))\nlab_unicos_r1=nombres_unicos_r1 \n\nsorted_labels_ggplot_r1 = sapply(lab_unicos_r1,\n                                     function(x) if (x == \"Other genera (&lt;2%)\"|x == \"unclassified\"|x == \"Other genera (&lt;2%)\")\n                                     {parse(text=paste0(\"'\", as.character(x), \"'\"))} else {parse(text = paste0(\"italic('\",as.character(x), \"')\"))})\n\nlab_unicos_r1=as.data.frame(lab_unicos_r1)\n\ncolores_r1 = c(\"#0099FF\",\"#00CC00\",\"#9933FF\",\"brown\",\"yellow\",\"orange\",\"#00FFFF\",\"red\", \n               \"pink\", \"magenta\",\"blue\",\"khaki2\",\"green4\",\"#6A3D9A\",\"gold1\",\"purple\",\"green\" ,\n               \"grey\",\"black\")\n\nlength(lab_unicos_r1)==length(colores_r1) \nlength(lab_unicos_r1)\nlength(colores_r1)\n\ntitulo_plot_r1=\"South plot\"\n\npgenus_r1=ggplot(ordenado_r1, aes(x=Group, y=Abundance, fill=Genus, order=Genus)) + geom_bar(stat=\"identity\", position=\"stack\")+\n  scale_fill_manual(values=colores_r1,\n                    labels=sorted_labels_ggplot_r1,\n                    breaks=nombres_unicos_r1)+\n  labs(y=\"Mean relative abundance (%)\", x=NULL, fill=\"Genus\",title=titulo_plot_r1)+\n  guides(fill = guide_legend(reverse = TRUE))+\n  scale_x_discrete(limits=limits_r1,labels=group_label_r1,\n                   breaks=levels_r1)+\n  scale_y_continuous(expand=c(0.01,0.01),\n                     breaks=c(0,10,20,30,40,50,60,70,80,90,100),\n                     labels=c(\"0\",\"10\", \"20\",\"30\",\"40\",\"50\",\"60\",\"70\",\"80\",\"90\",\"100\"),\n                     limits = c(NA, 100))+\n  theme_bw()+\n  theme(panel.border = element_rect(colour=\"black\"))+\n  theme(axis.title.x=element_blank())+\n  theme(plot.title = element_text(face=\"bold\", hjust = 0.5, size=7))+\n  theme(axis.text = element_text(size = 7))+\n  theme(axis.text.x = element_text(face=\"bold\", size=7))+\n  theme(axis.title.y = element_text(size = 7))+\n  theme(legend.key.size = unit(0.2, \"cm\"))+\n  theme(legend.text = element_text(size = 5))+\n  theme(legend.title = element_text(size=5, face=\"bold\"))+\n  theme(legend.title.align=0)+\n  theme(legend.text.align = 0)+ \n  theme(legend.position = \"none\")\nx11()\npgenus_r1\n\n\n#a.2) North plot\nmedia_sd_genus_rizo2=media_sd_genus_rizo[media_sd_genus_rizo[,\"Plot\"] == \"Plot2\",]\n\nmedia_sd_genus_rizo2$Genus=as.character(media_sd_genus_rizo2$Genus)\nunclassified_r2=media_sd_genus_rizo2[media_sd_genus_rizo2[,\"Genus\"] == \"unclassified\",] \nmedia_sd_genus_rizo2=media_sd_genus_rizo2[media_sd_genus_rizo2[,\"Genus\"] != \"unclassified\",] \nmedia_sd_genus_rizo2$Genus[media_sd_genus_rizo2$Abundance &lt;= 2] = \"Other genera (&lt;2%)\" \nmedia_sd_genus_rizo2$Genus=as.factor(media_sd_genus_rizo2$Genus)\n\nothers_r2=media_sd_genus_rizo2[media_sd_genus_rizo2[,\"Genus\"] == \"Other genera (&lt;2%)\",]\nmedia_sd_genus_rizo2=media_sd_genus_rizo2[media_sd_genus_rizo2[,\"Genus\"] != \"Other genera (&lt;2%)\",]\n\nordenado_r2=media_sd_genus_rizo2[order(media_sd_genus_rizo2$Abundance, decreasing=T),] \nordenado_r2=rbind(ordenado_r2,others_r2,unclassified_r2)\n\ngroup_label_r2=c(\"M\",\"S\", \"M\",\"S\")\nlevels_r2=c(\"A_Plot2_Mature_Rhizosphere\",\"A_Plot2_Immature_Rhizosphere\",\n            \"B_Plot2_Mature_Rhizosphere\",\"B_Plot2_Immature_Rhizosphere\")\nlimits_r2=c(\"A_Plot2_Mature_Rhizosphere\",\"A_Plot2_Immature_Rhizosphere\",\n            \"B_Plot2_Mature_Rhizosphere\",\"B_Plot2_Immature_Rhizosphere\")\n\ngenus_name_ordered_r2=as.vector(ordenado_r2$Genus)\nnombres_unicos_r2=unique(genus_name_ordered_r2)\n\nordenado_r2$Genus=reorder.factor(ordenado_r2$Genus,new.order=rev(nombres_unicos_r2))\nlab_unicos_r2=nombres_unicos_r2 \n\nsorted_labels_ggplot_r2 &lt;- sapply(lab_unicos_r2,\n                                  function(x) if (x == \"Other genera (&lt;2%)\"|x == \"unclassified\"|x == \"Other genera (&lt;2%)\")\n                                  {parse(text=paste0(\"'\", as.character(x), \"'\"))} else {parse(text = paste0(\"italic('\",as.character(x), \"')\"))})\n\ncolores_r2 = c(\"green4\",\"brown\",\"darkturquoise\",\"steelblue4\",\"#00FFFF\", \"#9933FF\",\"maroon\",\"pink\",\"gold1\",\n               \"green\",\"slategray2\",\"plum2\",\"yellow\",\"red\",\"darkolivegreen2\",\"grey\",\"black\")\n  \nlength(lab_unicos_r2)==length(colores_r2) \nlength(lab_unicos_r2)\nlength(colores_r2)\n\ntitulo_plot_r2=\"North plot\"\n\npgenus_r2=ggplot(ordenado_r2, aes(x=Group, y=Abundance, fill=Genus, order=Genus)) + geom_bar(stat=\"identity\", position=\"stack\")+\n  scale_fill_manual(values=colores_r2,\n                    labels=sorted_labels_ggplot_r2,\n                    breaks=nombres_unicos_r2)+\n  labs(y=\"Mean relative abundance (%)\", x=NULL, fill=\"Genus\",title=titulo_plot_r2)+\n  guides(fill = guide_legend(reverse = TRUE))+\n  scale_x_discrete(limits=limits_r2,labels=group_label_r2,\n                   breaks=levels_r2)+\n  scale_y_continuous(expand=c(0.01,0.01),\n                     breaks=c(0,10,20,30,40,50,60,70,80,90,100),\n                     labels=c(\"0\",\"10\", \"20\",\"30\",\"40\",\"50\",\"60\",\"70\",\"80\",\"90\",\"100\"),\n                     limits = c(NA, 100))+\n  theme_bw()+\n  theme(panel.border = element_rect(colour=\"black\"))+\n  theme(axis.title.x=element_blank())+\n  theme(plot.title = element_text(face=\"bold\", hjust = 0.5, size=7))+\n  theme(axis.text = element_text(size = 7))+\n  theme(axis.text.x = element_text(face=\"bold\", size=7))+\n  theme(axis.title.y = element_text(size = 7))+\n  theme(legend.key.size = unit(0.2, \"cm\"))+\n  theme(legend.text = element_text(size = 5))+\n  theme(legend.title = element_text(size=, face=\"bold\"))+\n  theme(legend.title.align=0)+\n  theme(legend.text.align = 0)+\n  theme(legend.position=\"none\")\n\nx11()\npgenus_r2\n\n#b) ENDOSPHERE\nmedia_sd_genus_endo=media_sd_genus_todos[media_sd_genus_todos[,\"Compartment\"] == \"Endosphere\",]\n\n#b.1) South plot\nmedia_sd_genus_endo1=media_sd_genus_endo[media_sd_genus_endo[,\"Plot\"] == \"Plot1\",]\n\nmedia_sd_genus_endo1$Genus=as.character(media_sd_genus_endo1$Genus)\nunclassified_e1=media_sd_genus_endo1[media_sd_genus_endo1[,\"Genus\"] == \"unclassified\",] \nmedia_sd_genus_endo1=media_sd_genus_endo1[media_sd_genus_endo1[,\"Genus\"] != \"unclassified\",] \nmedia_sd_genus_endo1$Genus[media_sd_genus_endo1$Abundance &lt;= 2] = \"Other genera (&lt;2%)\" \nmedia_sd_genus_endo1$Genus=as.factor(media_sd_genus_endo1$Genus)\n\nothers_e1=media_sd_genus_endo1[media_sd_genus_endo1[,\"Genus\"] == \"Other genera (&lt;2%)\",]\nmedia_sd_genus_endo1=media_sd_genus_endo1[media_sd_genus_endo1[,\"Genus\"] != \"Other genera (&lt;2%)\",]\n\nordenado_e1=media_sd_genus_endo1[order(media_sd_genus_endo1$Abundance, decreasing=T),] \nordenado_e1=rbind(ordenado_e1,others_e1,unclassified_e1)\n\ngroup_label_e1=c(\"M\",\"S\", \"M\",\"S\")\nlevels_e1=c(\"A_Plot1_Mature_Endosphere\",\"A_Plot1_Immature_Endosphere\",\n            \"B_Plot1_Mature_Endosphere\",\"B_Plot1_Immature_Endosphere\")\nlimits_e1=c(\"A_Plot1_Mature_Endosphere\",\"A_Plot1_Immature_Endosphere\",\n            \"B_Plot1_Mature_Endosphere\",\"B_Plot1_Immature_Endosphere\")\n\ngenus_name_ordered_e1=as.vector(ordenado_e1$Genus)\nnombres_unicos_e1=unique(genus_name_ordered_e1)\n\nordenado_e1$Genus=reorder.factor(ordenado_e1$Genus,new.order=rev(nombres_unicos_e1))\nlab_unicos_e1=nombres_unicos_e1 \n\nsorted_labels_ggplot_e1=sapply(lab_unicos_e1,\n                                  function(x) if (x == \"Other genera (&lt;2%)\"|x == \"unclassified\"|x == \"Other genera (&lt;2%)\")\n                                  {parse(text=paste0(\"'\", as.character(x), \"'\"))} else {parse(text = paste0(\"italic('\",as.character(x), \"')\"))})\n\ncolores_e1 = c(\"blue\",\"violet\",\"brown\",\"magenta\",\"#FDBF6F\",\"#FB9A99\",\"springgreen3\",\"yellow\",\"coral2\",\n               \"yellow4\",\"green1\",\"#6A3D9A\",\"mediumorchid2\",\"lightgoldenrod2\",\"darkgreen\",\"green4\",\"firebrick\",\n               \"grey\",\"black\")\n\nlength(lab_unicos_e1)==length(colores_e1) \nlength(lab_unicos_e1)\nlength(colores_e1)\n\ntitulo_plot_e1=\"South plot\"\n\npgenus_e1=ggplot(ordenado_e1, aes(x=Group, y=Abundance, fill=Genus, order=Genus)) + geom_bar(stat=\"identity\", position=\"stack\")+\n  scale_fill_manual(values=colores_e1,\n                    labels=sorted_labels_ggplot_e1,\n                    breaks=nombres_unicos_e1)+\n  labs(y=\"Mean relative abundance (%)\", x=NULL, fill=\"Genus\",title=titulo_plot_e1)+\n  guides(fill = guide_legend(reverse = TRUE))+\n  scale_x_discrete(limits=limits_e1,labels=group_label_e1,\n                   breaks=levels_e1)+\n  scale_y_continuous(expand=c(0.01,0.01),\n                     breaks=c(0,10,20,30,40,50,60,70,80,90,100),\n                     labels=c(\"0\",\"10\", \"20\",\"30\",\"40\",\"50\",\"60\",\"70\",\"80\",\"90\",\"100\"),\n                     limits = c(NA, 100))+\n  theme_bw()+\n  theme(panel.border = element_rect(colour=\"black\"))+\n  theme(axis.title.x=element_blank())+\n  theme(plot.title = element_text(face=\"bold\", hjust = 0.5, size=7))+\n  theme(axis.text = element_text(size = 7))+\n  theme(axis.text.x = element_text(face=\"bold\", size=7))+\n  theme(axis.title.y = element_text(size = 7))+\n  theme(legend.key.size = unit(0.2, \"cm\"))+\n  theme(legend.text = element_text(size = 5))+\n  theme(legend.title = element_text(size=5, face=\"bold\"))+\n  theme(legend.title.align=0)+\n  theme(legend.text.align = 0)+ \n  theme(legend.position = \"right\")\n\nx11()\npgenus_e1\n\n#b.2) North plot\nmedia_sd_genus_endo2=media_sd_genus_endo[media_sd_genus_endo[,\"Plot\"] == \"Plot2\",]\n\nmedia_sd_genus_endo2$Genus=as.character(media_sd_genus_endo2$Genus)\nunclassified_e2=media_sd_genus_endo2[media_sd_genus_endo2[,\"Genus\"] == \"unclassified\",] \nmedia_sd_genus_endo2=media_sd_genus_endo2[media_sd_genus_endo2[,\"Genus\"] != \"unclassified\",] \nmedia_sd_genus_endo2$Genus[media_sd_genus_endo2$Abundance &lt;= 2] = \"Other genera (&lt;2%)\" \nmedia_sd_genus_endo2$Genus=as.factor(media_sd_genus_endo2$Genus)\n\nothers_e2=media_sd_genus_endo2[media_sd_genus_endo2[,\"Genus\"] == \"Other genera (&lt;2%)\",]\nmedia_sd_genus_endo2=media_sd_genus_endo2[media_sd_genus_endo2[,\"Genus\"] != \"Other genera (&lt;2%)\",]\n\nordenado_e2=media_sd_genus_endo2[order(media_sd_genus_endo2$Abundance, decreasing=T),] \nordenado_e2=rbind(ordenado_e2,others_e2,unclassified_e2)\n\ngroup_label_e2=c(\"M\",\"S\", \"M\",\"S\")\nlevels_e2=c(\"A_Plot2_Mature_Endosphere\",\"A_Plot2_Immature_Endosphere\",\n            \"B_Plot2_Mature_Endosphere\",\"B_Plot2_Immature_Endosphere\")\nlimits_e2=c(\"A_Plot2_Mature_Endosphere\",\"A_Plot2_Immature_Endosphere\",\n            \"B_Plot2_Mature_Endosphere\",\"B_Plot2_Immature_Endosphere\")\n\ngenus_name_ordered_e2=as.vector(ordenado_e2$Genus)\nnombres_unicos_e2=unique(genus_name_ordered_e2)\n\nordenado_e2$Genus=reorder.factor(ordenado_e2$Genus,new.order=rev(nombres_unicos_e2))\nlab_unicos_e2=nombres_unicos_e2 \n\nsorted_labels_ggplot_e2 = sapply(lab_unicos_e2,\n                                  function(x) if (x == \"Other genera (&lt;2%)\"|x == \"unclassified\"|x == \"Other genera (&lt;2%)\")\n                                  {parse(text=paste0(\"'\", as.character(x), \"'\"))} else {parse(text = paste0(\"italic('\",as.character(x), \"')\"))})\n\ncolores_e2 = c(\"brown\", \"violet\", \"blue\", \"grey90\",\"orangered2\",\"darkseagreen2\",\"burlywood\",\n               \"yellow4\",\"darkmagenta\",\"powderblue\",\"sienna2\",\"magenta\",\"springgreen3\",\"mediumslateblue\",\n               \"gold2\",\n               \"grey\",\"black\")\n\nlength(lab_unicos_e2)==length(colores_e2) \nlength(lab_unicos_e2)\nlength(colores_e2)\n\ntitulo_plot_e2=\"North plot\"\n\npgenus_e2=ggplot(ordenado_e2, aes(x=Group, y=Abundance, fill=Genus, order=Genus)) + geom_bar(stat=\"identity\", position=\"stack\")+\n  scale_fill_manual(values=colores_e2,\n                    labels=sorted_labels_ggplot_e2,\n                    breaks=nombres_unicos_e2)+\n  labs(y=\"Mean relative abundance (%)\", x=NULL, fill=\"Genus\",title=titulo_plot_e2)+\n  guides(fill = guide_legend(reverse = TRUE))+\n  scale_x_discrete(limits=limits_e2,labels=group_label_e2,\n                   breaks=levels_e2)+\n  scale_y_continuous(expand=c(0.01,0.01),\n                     breaks=c(0,10,20,30,40,50,60,70,80,90,100),\n                     labels=c(\"0\",\"10\", \"20\",\"30\",\"40\",\"50\",\"60\",\"70\",\"80\",\"90\",\"100\"),\n                     limits = c(NA, 100))+\n  theme_bw()+\n  theme(panel.border = element_rect(colour=\"black\"))+\n  theme(axis.title.x=element_blank())+\n  theme(plot.title = element_text(face=\"bold\", hjust = 0.5, size=7))+\n  theme(axis.text = element_text(size = 7))+\n  theme(axis.text.x = element_text(face=\"bold\", size=7))+\n  theme(axis.title.y = element_text(size = 7))+\n  theme(legend.key.size = unit(0.2, \"cm\"))+\n  theme(legend.text = element_text(size = 5))+\n  theme(legend.title = element_text(size=5, face=\"bold\"))+\n  theme(legend.title.align=0)+\n  theme(legend.text.align = 0)+ \n  theme(legend.position = \"none\")\n\nx11()\npgenus_e2\n\nIn Figure 6 you can observe an example of the stacked bar plot for the main genera. This kind of plot can be calculated at the taxonomical rank you prefer. Please, try to open the plot in a new window if you want to view it at full size.\n # 7. Inheritance analyses\nOur experimental design allows us to study the potential transmission of microorganisms from mothers to first and second suckers. For that purpose, we firstly compared the root microbiota of mothers and first suckers, and then, these shared microorganisms were further compared against the microbiota of rhizosphere of sucker plants. It is expected that the microorganisms that are found in the root endosphere of suckers (and not found in the rhizosphere) and also in the root endosphere of mother plants, are transferred from mothers to suckers through the root system (corm), but not acquired from the surrounding soil of from the environment.\nWe will perform this analysis just at ASV level"
  },
  {
    "objectID": "Fungi_data_analysis.html#prepare-the-data",
    "href": "Fungi_data_analysis.html#prepare-the-data",
    "title": "Ecological analyses of fungal dataset",
    "section": "7.1 Prepare the data",
    "text": "7.1 Prepare the data\n\nmt1=as.data.frame(sample_data(phy_data_relabun))\nnames = unique(mt1$Fusion)#get the name of each level of the variable \"Fusion\", which in this example corresponds to each individual group of samples. For instance, the first level of the variable \"Fusion\" is \"A_Plot1_Mature_Rhizosphere\" (all rhizosphere samples of mother plants sampled in 2022 located in the south plot)\n\n#in the following for loop we are creating a list in which we are saving one each phyloseq object per group of samples. That is to say, in the first element of the list, the phyloseq object corresponding to the samples of the rhizosphere of mother plants sampled in 2022 located in the south plot is stored.\n\npruned_data = list()\nfor(i in 1:length(names)){\n  samples_group &lt;- mt1[which(mt1$Fusion==names[i]),]$Sample\n  pruned_data[[i]] &lt;- prune_samples(samples_group, phy_data_relabun)\n}\n\n#this loop stored the taxonony and ASV table of each phyloseq element of the previously created list\notu_tables = list()\ntax_tables = list()\nfor (i in 1:length(pruned_data)){\n  otu_tables[[i]] &lt;- as.data.frame(otu_table(pruned_data[[i]]))\n  tax_tables[[i]] &lt;- as.data.frame(tax_table(pruned_data[[i]]))\n}#it gives the list \"otu_tables\", whose element [[1]] corresponds to the ASV table of the group of sample \"A_Plot1_Mature_Rhizosphere\". While \"tax_tables\" list stores the taxonomy tables\n\n#this list merges each ASV table with each tax table by rownames (by=0)\nwhole_tables = list()\nfor (i in 1:length(pruned_data)){\n  whole_tables[[i]] = merge(tax_tables[[i]],otu_tables[[i]], by=0)\n}\n\nfor(i in 1:length(whole_tables)){\n  whole_tables[[i]]$ASV_names=whole_tables[[i]]$Row.names\n}#it creates a new column in the list \"wholes_tables\" that corresponds to the rownames\n\nfor (i in 1:length(whole_tables)){ \n  assign(paste0(names[i],\"_df\"),as#create one dataframe per element from the list \"whole_tables\"\n         \n#the previous loop returns complex dataframe names, so let's rename them and calculate the total number of sequences registered for each ASV in all the corresponding dataset \n\nA_r1_M=A_Plot1_Mature_Rhizosphere_df; A_r1_M$Sum=rowSums(A_r1_M[,9:ncol(A_r1_M)]); A_r1_M_def=A_r1_M[which(A_r1_M$Sum&gt;0,arr.ind=TRUE),];A_r1_M_def2= subset(A_r1_M_def, select = -c(Sum))#we remove those ASV that account for 0 sequences in sum in each dataset\nA_e1_M=A_Plot1_Mature_Endosphere_df; A_e1_M$Sum=rowSums(A_e1_M[,9:ncol(A_e1_M)]); A_e1_M_def=A_e1_M[which(A_e1_M$Sum&gt;0,arr.ind=TRUE),];A_e1_M_def2= subset(A_e1_M_def, select = -c(Sum))\nA_e1_I=A_Plot1_Immature_Endosphere_df; A_e1_I$Sum=rowSums(A_e1_I[,9:ncol(A_e1_I)]); A_e1_I_def=A_e1_I[which(A_e1_I$Sum&gt;0,arr.ind=TRUE),];A_e1_I_def2= subset(A_e1_I_def, select = -c(Sum))\nA_r1_I=A_Plot1_Immature_Rhizosphere_df; A_r1_I$Sum=rowSums(A_r1_I[,9:ncol(A_r1_I)]); A_r1_I_def=A_r1_I[which(A_r1_I$Sum&gt;0,arr.ind=TRUE),];A_r1_I_def2= subset(A_r1_I_def, select = -c(Sum))\nA_e2_M=A_Plot2_Mature_Endosphere_df; A_e2_M$Sum=rowSums(A_e2_M[,9:ncol(A_e2_M)]); A_e2_M_def=A_e2_M[which(A_e2_M$Sum&gt;0,arr.ind=TRUE),];A_e2_M_def2= subset(A_e2_M_def, select = -c(Sum))\nA_r2_M=A_Plot2_Mature_Rhizosphere_df; A_r2_M$Sum=rowSums(A_r2_M[,9:ncol(A_r2_M)]); A_r2_M_def=A_r2_M[which(A_r2_M$Sum&gt;0,arr.ind=TRUE),];A_r2_M_def2= subset(A_r2_M_def, select = -c(Sum))\nA_r2_I=A_Plot2_Immature_Rhizosphere_df; A_r2_I$Sum=rowSums(A_r2_I[,9:ncol(A_r2_I)]); A_r2_I_def=A_r2_I[which(A_r2_I$Sum&gt;0,arr.ind=TRUE),];A_r2_I_def2= subset(A_r2_I_def, select = -c(Sum))\nA_e2_I=A_Plot2_Immature_Endosphere_df; A_e2_I$Sum=rowSums(A_e2_I[,9:ncol(A_e2_I)]);A_e2_I_def=A_e2_I[which(A_e2_I$Sum&gt;0,arr.ind=TRUE),];A_e2_I_def2= subset(A_e2_I_def, select = -c(Sum))\nB_r1_M=B_Plot1_Mature_Rhizosphere_df; B_r1_M$Sum=rowSums(B_r1_M[,9:ncol(B_r1_M)]); B_r1_M_def=B_r1_M[which(B_r1_M$Sum&gt;0,arr.ind=TRUE),];B_r1_M_def2= subset(B_r1_M_def, select = -c(Sum))\nB_r1_I=B_Plot1_Immature_Rhizosphere_df; B_r1_I$Sum=rowSums(B_r1_I[,9:ncol(B_r1_I)]); B_r1_I_def=B_r1_I[which(B_r1_I$Sum&gt;0,arr.ind=TRUE),];B_r1_I_def2= subset(B_r1_I_def, select = -c(Sum))\nB_r2_M=B_Plot2_Mature_Rhizosphere_df; B_r2_M$Sum=rowSums(B_r2_M[,9:ncol(B_r2_M)]); B_r2_M_def=B_r2_M[which(B_r2_M$Sum&gt;0,arr.ind=TRUE),];B_r2_M_def2= subset(B_r2_M_def, select = -c(Sum))\nB_r2_I=B_Plot2_Immature_Rhizosphere_df; B_r2_I$Sum=rowSums(B_r2_I[,9:ncol(B_r2_I)]); B_r2_I_def=B_r2_I[which(B_r2_I$Sum&gt;0,arr.ind=TRUE),];B_r2_I_def2= subset(B_r2_I_def, select = -c(Sum))\nB_e1_I=B_Plot1_Immature_Endosphere_df; B_e1_I$Sum=rowSums(B_e1_I[,9:ncol(B_e1_I)]); B_e1_I_def=B_e1_I[which(B_e1_I$Sum&gt;0,arr.ind=TRUE),];B_e1_I_def2= subset(B_e1_I_def, select = -c(Sum))\nB_e1_M=B_Plot1_Mature_Endosphere_df; B_e1_M$Sum=rowSums(B_e1_M[,9:ncol(B_e1_M)]); B_e1_M_def=B_e1_M[which(B_e1_M$Sum&gt;0,arr.ind=TRUE),];B_e1_M_def2= subset(B_e1_M_def, select = -c(Sum))\nB_e2_M=B_Plot2_Mature_Endosphere_df; B_e2_M$Sum=rowSums(B_e2_M[,9:ncol(B_e2_M)]); B_e2_M_def=B_e2_M[which(B_e2_M$Sum&gt;0,arr.ind=TRUE),];B_e2_M_def2= subset(B_e2_M_def, select = -c(Sum))\nB_e2_I=B_Plot2_Immature_Endosphere_df; B_e2_I$Sum=rowSums(B_e2_I[,9:ncol(B_e2_I)]); B_e2_I_def=B_e2_I[which(B_e2_I$Sum&gt;0,arr.ind=TRUE),];B_e2_I_def2= subset(B_e2_I_def, select = -c(Sum))"
  },
  {
    "objectID": "Fungi_data_analysis.html#compare-asvs-between-mother-and-sucker-plants",
    "href": "Fungi_data_analysis.html#compare-asvs-between-mother-and-sucker-plants",
    "title": "Ecological analyses of fungal dataset",
    "section": "7.2 Compare ASVs between mother and sucker plants",
    "text": "7.2 Compare ASVs between mother and sucker plants\nRemember that we want to retain the ASVs that are shared between mother and sucker plants (just in the root endosphere). They could be both inherited or acquired from the rhizosphere soil.\n\n#a) South plot \n#a.1) 2022\ncompartidos_A_e1=cbind(A_e1_M_def2[A_e1_M_def2$ASV_names %in% A_e1_I_def2$ASV_names,], A_e1_I_def2[A_e1_I_def2$ASV_names %in% A_e1_M_def2$ASV_names,])#retain those ASVs that are in the dataframe of mothers and suckers (root endosphere)\ncompartidos_A_e1=compartidos_A_e1[,-(20:27)]#removing extra information\nwrite.table(data.frame(\"_\"=rownames(compartidos_A_e1),compartidos_A_e1),file=\"Core_A_e1.txt\",sep=\"\\t\", row.names = F)\n\n#a.2) 2023\ncompartidos_B_e1=cbind(B_e1_M_def2[B_e1_M_def2$ASV_names %in% B_e1_I_def2$ASV_names,], B_e1_I_def2[B_e1_I_def2$ASV_names %in% B_e1_M_def2$ASV_names,])\ncompartidos_B_e1=compartidos_B_e1[,-(18:25)]\nwrite.table(data.frame(\"_\"=rownames(compartidos_B_e1),compartidos_B_e1),file=\"Core_B_e1.txt\",sep=\"\\t\", row.names = F)\n\n#b) North plot \n#b.1) 2022\ncompartidos_A_e2=cbind(A_e2_M_def2[A_e2_M_def2$ASV_names %in% A_e2_I_def2$ASV_names,], A_e2_I_def2[A_e2_I_def2$ASV_names %in% A_e2_M_def2$ASV_names,])\ncompartidos_A_e2=compartidos_A_e2[,-(21:28)]\nwrite.table(data.frame(\"_\"=rownames(compartidos_A_e2),compartidos_A_e2),file=\"Core_A_e2.txt\",sep=\"\\t\", row.names = F)\n\n#b.2) 2023\ncompartidos_B_e2=cbind(B_e2_M_def2[B_e2_M_def2$ASV_names %in% B_e2_I_def2$ASV_names,], B_e2_I_def2[B_e2_I_def2$ASV_names %in% B_e2_M_def2$ASV_names,])\ncompartidos_B_e2=compartidos_B_e2[,-(19:26)]\nwrite.table(data.frame(\"_\"=rownames(compartidos_B_e2),compartidos_B_e2),file=\"Core_B_e2.txt\",sep=\"\\t\", row.names = F)\n\nNow, we are going to compare the shared fungal communities against the gunal communities dwelling in the rhizosphere soil of the suckers. We will retain fungal members that are in the root endosphere but NO in the rhizosphere soil\n\n#a) South plot\n#a.1) 2022\ncompartidos_A1_endo_rizo=cbind(compartidos_A_e1[compartidos_A_e1$ASV_names %in% A_r1_I_def2$ASV_names,], A_r1_I_def2[A_r1_I_def2$ASV_names %in% compartidos_A_e1$ASV_names,])#remove extra information from the data (additional columns indicating, again, the taxonomy of the ASVs)\ncompartidos_A1_endo_rizo=compartidos_A1_endo_rizo[,-(30:37)]#remove extra information\nwrite.table(data.frame(\"_\"=rownames(compartidos_A1_endo_rizo),compartidos_A1_endo_rizo),file=\"Compartidos_A1_endo_rizo.txt\",sep=\"\\t\", row.names = F)\n\n#a.2) 2023\ncompartidos_B1_endo_rizo=cbind(compartidos_B_e1[compartidos_B_e1$ASV_names %in% B_r1_I_def2$ASV_names,], B_r1_I_def2[B_r1_I_def2$ASV_names %in% compartidos_B_e1$ASV_names,])\ncompartidos_B1_endo_rizo=compartidos_B1_endo_rizo[,-(26:33)]\nwrite.table(data.frame(\"_\"=rownames(compartidos_B1_endo_rizo),compartidos_B1_endo_rizo),file=\"Compartidos_B1_endo_rizo.txt\",sep=\"\\t\", row.names = F)\n\n#b) North plot\n#b.1) 2022\ncompartidos_A2_endo_rizo=cbind(compartidos_A_e2[compartidos_A_e2$ASV_names %in% A_r2_I_def2$ASV_names,], A_r2_I_def2[A_r2_I_def2$ASV_names %in% compartidos_A_e2$ASV_names,])\ncompartidos_A2_endo_rizo=compartidos_A2_endo_rizo[,-(29:36)]\nwrite.table(data.frame(\"_\"=rownames(compartidos_A2_endo_rizo),compartidos_A2_endo_rizo),file=\"Compartidos_A2_endo_rizo.txt\",sep=\"\\t\", row.names = F)\n\n#b.2) 2023\ncompartidos_B2_endo_rizo=cbind(compartidos_B_e2[compartidos_B_e2$ASV_names %in% B_r2_I_def2$ASV_names,], B_r2_I_def2[B_r2_I_def2$ASV_names %in% compartidos_B_e2$ASV_names,])\ncompartidos_B2_endo_rizo=compartidos_B2_endo_rizo[,-(27:34)]\nwrite.table(data.frame(\"_\"=rownames(compartidos_B2_endo_rizo),compartidos_B2_endo_rizo),file=\"Compartidos_B2_endo_rizo.txt\",sep=\"\\t\", row.names = F)\n\n#Remove those ASV detected both in the rhizosphere and in the root endosphere\n\n#a) South plot\n#a.1) 2022\nespecif_A1_endo=subset(compartidos_A_e1, !(ASV_names %in% compartidos_A1_endo_rizo$ASV_names))\nwrite.table(data.frame(\"_\"=rownames(especif_A1_endo),especif_A1_endo),file=\"A1_Endo_Transmitidos_Madreahija.txt\",sep=\"\\t\", row.names = F)\n\n#a.2) 2023\nespecif_B1_endo=subset(compartidos_B_e1, !(ASV_names %in% compartidos_B1_endo_rizo$ASV_names))\nwrite.table(data.frame(\"_\"=rownames(especif_B1_endo),especif_B1_endo),file=\"B1_Endo_Transmitidos_Madreahija.txt\",sep=\"\\t\", row.names = F)\n\n#b) North plot\n#b.1) 2022\nespecif_A2_endo=subset(compartidos_A_e2, !(ASV_names %in% compartidos_A2_endo_rizo$ASV_names))\nwrite.table(data.frame(\"_\"=rownames(especif_A2_endo),especif_A2_endo),file=\"A2_Endo_Transmitidos_Madreahija.txt\",sep=\"\\t\", row.names = F)\n\n#b.2) 2023\nespecif_B2_endo=subset(compartidos_B_e2, !(ASV_names %in% compartidos_B2_endo_rizo$ASV_names))\nwrite.table(data.frame(\"_\"=rownames(especif_B2_endo),especif_B2_endo),file=\"B2_Endo_Transmitidos_Madreahija.txt\",sep=\"\\t\", row.names = F)\n\nIn this work, we analyzed carefully the number and proportions of the transferred ASVs in Excel"
  },
  {
    "objectID": "Fungi_data_analysis.html#plotting-2",
    "href": "Fungi_data_analysis.html#plotting-2",
    "title": "Ecological analyses of fungal dataset",
    "section": "7.3 Plotting",
    "text": "7.3 Plotting\nIn this section, we are going to make different graph representing the inheritance process. We will use barplots\n\n#a) South plot\n#a.1) 2022\ntotales_M_A_e1=nrow(A_e1_M_def2)#get the total number of ASV in mothers\ntransferidos_A_e1=nrow(especif_A1_endo)#get the number of shared ASVs between mothers and suckers\nprop_transferidos_M_A_e1=(transferidos_A_e1 / totales_M_A_e1) *100#calculate the proportion of transferred ASVs\nprop_perdidos_M_A_e1=((totales_M_A_e1-transferidos_A_e1) / totales_M_A_e1) *100#calculate the proportion of ASVs lost by the mothers\n\ntotales_I_A_e1=nrow(A_e1_I_def2)#get the total number of ASVs in suckers\nprop_transferidos_I_A_e1=(transferidos_A_e1 / totales_I_A_e1) *100#get the number of shared ASVs between mothers and suckers\nprop_adquiridos_I_A_e1=((totales_I_A_e1-transferidos_A_e1) / totales_I_A_e1) *100#calculate the proportion of ASVs acquired by the suckers\n\nbarras_A_e1=as.data.frame(rbind(prop_transferidos_M_A_e1,prop_perdidos_M_A_e1,prop_transferidos_I_A_e1,prop_adquiridos_I_A_e1))#create a dataframe with all the values in order to plot them\nbarras_A_e1$Year=\"A\"\nbarras_A_e1$Plant=c(\"Mother\", \"Mother\", \"Sucker\", \"Sucker\")\nbarras_A_e1$Condition=as.factor(c(\"Transmitted\",\"Lost\", \"Transmitted\", \"Acquired\"))\ncolnames(barras_A_e1)[1]=\"Proportion\"\n\n#a.2) 2023\ntotales_M_B_e1=nrow(B_e1_M_def2)\ntransferidos_B_e1=nrow(especif_B1_endo)\nprop_transferidos_M_B_e1=(transferidos_B_e1 / totales_M_B_e1) *100\nprop_perdidos_M_B_e1=((totales_M_B_e1-transferidos_B_e1) / totales_M_B_e1) *100\n\ntotales_I_B_e1=nrow(B_e1_I_def2)\nprop_transferidos_I_B_e1=(transferidos_B_e1 / totales_I_B_e1) *100\nprop_adquiridos_I_B_e1=((totales_I_B_e1-transferidos_B_e1) / totales_I_B_e1) *100\n\nbarras_B_e1=as.data.frame(rbind(prop_transferidos_M_B_e1,prop_perdidos_M_B_e1, prop_transferidos_I_B_e1,prop_adquiridos_I_B_e1))\nbarras_B_e1$Year=\"B\"\nbarras_B_e1$Plant=c(\"Mother\", \"Mother\", \"Sucker\", \"Sucker\")\nbarras_B_e1$Condition=as.factor(c(\"Transmitted\",\"Lost\", \"Transmitted\", \"Acquired\"))\ncolnames(barras_B_e1)[1]=\"Proportion\"\n\nA_e1=ggplot(barras_A_e1, aes(x=Plant, y=Proportion, fill=Condition, order=Condition)) + geom_bar(stat=\"identity\", position=\"stack\")+\n  scale_fill_manual(values=c(\"magenta\", \"deepskyblue\", \"magenta\",\"green\"),\n                    labels=c(\"Transmitted\",\"Lost\", \"Transmitted\", \"Acquired\"),\n                    breaks=c(\"Transmimtted\",\"Lost\", \"Transmitted\", \"Acquired\"))+\n  labs(y=\"Proportion of ASV (%)\", x=NULL, fill=\"Condition\",title=\"Plot 1 (2022)\")+\n  guides(fill = guide_legend(reverse = TRUE))+\n  scale_x_discrete(limits=c(\"Mother\",\"Sucker\"),labels=c(\"Mother\",\"Sucker\"),\n                   breaks=c(\"Mother\",\"Sucker\"))+\n  scale_y_continuous(expand=c(0.01,0.01),\n                     breaks=c(0,10,20,30,40,50,60,70,80,90,100),\n                     labels=c(\"0\",\"10\", \"20\",\"30\",\"40\",\"50\",\"60\",\"70\",\"80\",\"90\",\"100\"),\n                     limits = c(NA, 101))+\n  theme_bw()+\n  theme(panel.border = element_rect(colour=\"black\"))+\n  theme(axis.title.x=element_blank())+\n  theme(plot.title = element_text(face=\"bold\", hjust = 0.5, size=16))+\n  theme(axis.text = element_text(size = 14))+\n  theme(axis.text.x = element_text(face=\"bold\", size=16))+\n  theme(axis.title.y = element_text(size = 16))+\n  theme(legend.key.size = unit(0.9, \"cm\"))+\n  theme(legend.text = element_text(size = 18))+\n  theme(legend.title = element_text(size=18, face=\"bold\"))+\n  theme(legend.title.align=0)+\n  theme(legend.text.align = 0)\nx11()\nA_e1\n\nB_e1=ggplot(barras_B_e1, aes(x=Plant, y=Proportion, fill=Condition, order=Condition)) + geom_bar(stat=\"identity\", position=\"stack\")+\n  scale_fill_manual(values=c(\"magenta\", \"deepskyblue\", \"magenta\",\"green\"),\n                    labels=c(\"Transmitted\",\"Lost\", \"Transmitted\", \"Acquired\"),\n                    breaks=c(\"Transmimtted\",\"Lost\", \"Transmitted\", \"Acquired\"))+\n  labs(y=\"Proportion of ASV (%)\", x=NULL, fill=\"Condition\",title=\"Plot 1 (2023)\")+\n  guides(fill = guide_legend(reverse = TRUE))+\n  scale_x_discrete(limits=c(\"Mother\",\"Sucker\"),labels=c(\"Mother\",\"Sucker\"),\n                   breaks=c(\"Mother\",\"Sucker\"))+\n  scale_y_continuous(expand=c(0.01,0.01),\n                     breaks=c(0,10,20,30,40,50,60,70,80,90,100),\n                     labels=c(\"0\",\"10\", \"20\",\"30\",\"40\",\"50\",\"60\",\"70\",\"80\",\"90\",\"100\"),\n                     limits = c(NA, 101))+\n  theme_bw()+\n  theme(panel.border = element_rect(colour=\"black\"))+\n  theme(axis.title.x=element_blank())+\n  theme(plot.title = element_text(face=\"bold\", hjust = 0.5, size=16))+\n  theme(axis.text = element_text(size = 14))+\n  theme(axis.text.x = element_text(face=\"bold\", size=16))+\n  theme(axis.title.y = element_text(size = 16))+\n  theme(legend.key.size = unit(0.9, \"cm\"))+\n  theme(legend.text = element_text(size = 18))+\n  theme(legend.title = element_text(size=18, face=\"bold\"))+\n  theme(legend.title.align=0)+\n  theme(legend.text.align = 0)\nx11()\nB_e1\n\nx11()\np_Plot1_prop=grid.arrange(A_e1,B_e1,ncol=2, nrow=1, top=textGrob(\"Plot 1\", gp=gpar(fontsize=18)))\n\n#b) North plot\n#b.1) 2022\ntotales_M_A_e2=nrow(A_e2_M_def2)\ntransferidos_A_e2=nrow(especif_A2_endo)\nprop_transferidos_M_A_e2=(transferidos_A_e2 / totales_M_A_e2) *100\nprop_perdidos_M_A_e2=((totales_M_A_e2-transferidos_A_e2) / totales_M_A_e2) *100\n\ntotales_I_A_e2=nrow(A_e2_I_def2)\nprop_transferidos_I_A_e2=(transferidos_A_e2 / totales_I_A_e2) *100\nprop_adquiridos_I_A_e2=((totales_I_A_e2-transferidos_A_e2) / totales_I_A_e2) *100\n\nbarras_A_e2=as.data.frame(rbind(prop_transferidos_M_A_e2,prop_perdidos_M_A_e2,\n                                prop_transferidos_I_A_e2,prop_adquiridos_I_A_e2))\nbarras_A_e2$Year=\"A\"\nbarras_A_e2$Plant=c(\"Mother\", \"Mother\", \"Sucker\", \"Sucker\")\nbarras_A_e2$Condition=as.factor(c(\"Transmitted\",\"Lost\", \"Transmitted\", \"Acquired\"))\ncolnames(barras_A_e2)[1]=\"Proportion\"\n\n#b.2) 2023\ntotales_M_B_e2=nrow(B_e2_M_def2)\ntransferidos_B_e2=nrow(especif_B2_endo)\nprop_transferidos_M_B_e2=(transferidos_B_e2 / totales_M_B_e2) *100\nprop_perdidos_M_B_e2=((totales_M_B_e2-transferidos_B_e2) / totales_M_B_e2) *100\n\ntotales_I_B_e2=nrow(B_e2_I_def2)\nprop_transferidos_I_B_e2=(transferidos_B_e2 / totales_I_B_e2) *100\nprop_adquiridos_I_B_e2=((totales_I_B_e2-transferidos_B_e2) / totales_I_B_e2) *100\n\nbarras_B_e2=as.data.frame(rbind(prop_transferidos_M_B_e2,prop_perdidos_M_B_e2,\n                                prop_transferidos_I_B_e2,prop_adquiridos_I_B_e2))\nbarras_B_e2$Year=\"B\"\nbarras_B_e2$Plant=c(\"Mother\", \"Mother\", \"Sucker\", \"Sucker\")\nbarras_B_e2$Condition=as.factor(c(\"Transmitted\",\"Lost\", \"Transmitted\", \"Acquired\"))\ncolnames(barras_B_e2)[1]=\"Proportion\"\n\nA_e2=ggplot(barras_A_e2, aes(x=Plant, y=Proportion, fill=Condition, order=Condition)) + geom_bar(stat=\"identity\", position=\"stack\")+\n  scale_fill_manual(values=c(\"magenta\", \"deepskyblue\", \"magenta\",\"green\"),\n                    labels=c(\"Transmitted\",\"Lost\", \"Transmitted\", \"Acquired\"),\n                    breaks=c(\"Transmimtted\",\"Lost\", \"Transmitted\", \"Acquired\"))+\n  labs(y=\"Proportion of ASV (%)\", x=NULL, fill=\"Condition\",title=\"Plot 2 (2022)\")+\n  guides(fill = guide_legend(reverse = TRUE))+\n  scale_x_discrete(limits=c(\"Mother\",\"Sucker\"),labels=c(\"Mother\",\"Sucker\"),\n                   breaks=c(\"Mother\",\"Sucker\"))+\n  scale_y_continuous(expand=c(0.01,0.01),\n                     breaks=c(0,10,20,30,40,50,60,70,80,90,100),\n                     labels=c(\"0\",\"10\", \"20\",\"30\",\"40\",\"50\",\"60\",\"70\",\"80\",\"90\",\"100\"),\n                     limits = c(NA, 101))+\n  theme_bw()+\n  theme(panel.border = element_rect(colour=\"black\"))+\n  theme(axis.title.x=element_blank())+\n  theme(plot.title = element_text(face=\"bold\", hjust = 0.5, size=16))+\n  theme(axis.text = element_text(size = 14))+\n  theme(axis.text.x = element_text(face=\"bold\", size=16))+\n  theme(axis.title.y = element_text(size = 16))+\n  theme(legend.key.size = unit(0.9, \"cm\"))+\n  theme(legend.text = element_text(size = 18))+\n  theme(legend.title = element_text(size=18, face=\"bold\"))+\n  theme(legend.title.align=0)+\n  theme(legend.text.align = 0)\nx11()\nA_e2\n\nB_e2=ggplot(barras_B_e2, aes(x=Plant, y=Proportion, fill=Condition, order=Condition)) + geom_bar(stat=\"identity\", position=\"stack\")+\n  scale_fill_manual(values=c(\"magenta\", \"deepskyblue\", \"magenta\",\"green\"),\n                    labels=c(\"Transmitted\",\"Lost\", \"Transmitted\", \"Acquired\"),\n                    breaks=c(\"Transmimtted\",\"Lost\", \"Transmitted\", \"Acquired\"))+\n  labs(y=\"Proportion of ASV (%)\", x=NULL, fill=\"Condition\",title=\"Plot 2 (2023)\")+\n  guides(fill = guide_legend(reverse = TRUE))+\n  scale_x_discrete(limits=c(\"Mother\",\"Sucker\"),labels=c(\"Mother\",\"Sucker\"),\n                   breaks=c(\"Mother\",\"Sucker\"))+\n  scale_y_continuous(expand=c(0.01,0.01),\n                     breaks=c(0,10,20,30,40,50,60,70,80,90,100),\n                     labels=c(\"0\",\"10\", \"20\",\"30\",\"40\",\"50\",\"60\",\"70\",\"80\",\"90\",\"100\"),\n                     limits = c(NA, 101))+\n  theme_bw()+\n  theme(panel.border = element_rect(colour=\"black\"))+\n  theme(axis.title.x=element_blank())+\n  theme(plot.title = element_text(face=\"bold\", hjust = 0.5, size=16))+\n  theme(axis.text = element_text(size = 14))+\n  theme(axis.text.x = element_text(face=\"bold\", size=16))+\n  theme(axis.title.y = element_text(size = 16))+\n  theme(legend.key.size = unit(0.9, \"cm\"))+\n  theme(legend.text = element_text(size = 18))+\n  theme(legend.title = element_text(size=18, face=\"bold\"))+\n  theme(legend.title.align=0)+\n  theme(legend.text.align = 0)\nx11()\nB_e2\n\nx11()\np_Plot2_prop=grid.arrange(A_e2,B_e2,ncol=2, nrow=1, top=textGrob(\"Plot 2\", gp=gpar(fontsize=18)))\n\nWith this code a bar plot is created (see Figure 7)\n\n\n\nFigure 7. Bar plot indicating the transferred ASV, ASVs lost by the mothers, and ASVs acquired from the environment by the suckers in the first plot (south plot)\n\n\nWe are going to obtain the same plots but instead of plotting the proportion of ASVs lost, acquired and transferred, the relative abundance of each of them will be visualized.\n\n#a) South plot\n#a.1) 2022\nperdidos_M_A_e1=subset(A_e1_M_def2, !(ASV_names %in% especif_A1_endo$ASV_names))#these are the ASVs that mothers lost\nperdidos_M_A_e1$Promedio=rowMeans(subset(perdidos_M_A_e1, select =c(9:ncol(perdidos_M_A_e1))))#mean relative abundance of each of them\nperdidos_M_A_e1_sum=sum(perdidos_M_A_e1$Promedio)#sum the relative abundance of all the ASVs lost by the mothers\nadquiridos_I_A_e1=subset(A_e1_I_def2, !(ASV_names %in% especif_A1_endo$ASV_names))#these are the ASVs that suckers retain from the environment\nadquiridos_I_A_e1$Promedio=rowMeans(subset(adquiridos_I_A_e1, select =c(9:ncol(adquiridos_I_A_e1))))#mean\nadquiridos_I_A_e1_sum=sum(adquiridos_I_A_e1$Promedio)\n\nespecif_A1_endo$Promedio_Madre=rowMeans(subset(especif_A1_endo, select =c(9:19)))#mean relative abundance of transferred ASVs (in mothers samples)\nespecif_A1_endo_M_sum=sum(especif_A1_endo$Promedio_Madre)  \nespecif_A1_endo$Promedio_Hijas=rowMeans(subset(especif_A1_endo, select =c(20:29)))#mean relative abundance of acquired ASV from mothers (in suckers samples)\nespecif_A1_endo_I_sum=sum(especif_A1_endo$Promedio_Hijas)\n\nAbund_A1_endo=c(especif_A1_endo_M_sum,perdidos_M_A_e1_sum,especif_A1_endo_I_sum,adquiridos_I_A_e1_sum)\nbarras_abund_A_e1=as.data.frame(cbind(barras_A_e1,Abund_A1_endo))#create a new dataframe with all the data\ncolnames(barras_abund_A_e1)[5]=\"Abundance\"\n\nwrite.table(data.frame(\"X\"=rownames(perdidos_M_A_e1),perdidos_M_A_e1),\"AbunRel_perdidos_Madre_A_e1.txt\",sep=\"\\t\",row.names = F)\nwrite.table(data.frame(\"X\"=rownames(adquiridos_I_A_e1),adquiridos_I_A_e1),\"AbunRel_AdquiridosAmbiente_A_e1.txt\",sep=\"\\t\",row.names = F)\nwrite.table(data.frame(\"X\"=rownames(especif_A1_endo),especif_A1_endo),\"AbunRel_TransferidosMadreHija_A_e1.txt\",sep=\"\\t\",row.names = F)\n\n#a.2) 2023\nperdidos_M_B_e1=subset(B_e1_M_def2, !(ASV_names %in% especif_B1_endo$ASV_names))\nperdidos_M_B_e1$Promedio=rowMeans(subset(perdidos_M_B_e1, select =c(9:ncol(perdidos_M_B_e1))))\nperdidos_M_B_e1_sum=sum(perdidos_M_B_e1$Promedio)\nadquiridos_I_B_e1=subset(B_e1_I_def2, !(ASV_names %in% especif_B1_endo$ASV_names))\nadquiridos_I_B_e1$Promedio=rowMeans(subset(adquiridos_I_B_e1, select =c(9:ncol(adquiridos_I_B_e1))))\nadquiridos_I_B_e1_sum=sum(adquiridos_I_B_e1$Promedio)\n\nespecif_B1_endo$Promedio_Madre=rowMeans(subset(especif_B1_endo, select =c(9:17)))\nespecif_B1_endo_M_sum=sum(especif_B1_endo$Promedio_Madre)  \nespecif_B1_endo$Promedio_Hijas=rowMeans(subset(especif_B1_endo, select =c(18:25)))\nespecif_B1_endo_I_sum=sum(especif_B1_endo$Promedio_Hijas)\n\nAbund_B1_endo=c(especif_B1_endo_M_sum,perdidos_M_B_e1_sum,especif_B1_endo_I_sum,adquiridos_I_B_e1_sum)\nbarras_abund_B_e1=as.data.frame(cbind(barras_B_e1,Abund_B1_endo))\ncolnames(barras_abund_B_e1)[5]=\"Abundance\"\n\nwrite.table(data.frame(\"X\"=rownames(perdidos_M_B_e1),perdidos_M_B_e1),\"AbunRel_perdidos_Madre_B_e1.txt\",sep=\"\\t\",row.names = F)\nwrite.table(data.frame(\"X\"=rownames(adquiridos_I_B_e1),adquiridos_I_B_e1),\"AbunRel_AdquiridosAmbienteHija_B_e1.txt\",sep=\"\\t\",row.names = F)\nwrite.table(data.frame(\"X\"=rownames(especif_B1_endo),especif_B1_endo),\"AbunRel_TransferidosMadreHija_B_e1.txt\",sep=\"\\t\",row.names = F)\n\n#b) North plot\n#b.1) 2022\nperdidos_M_A_e2=subset(A_e2_M_def2, !(ASV_names %in% especif_A2_endo$ASV_names))\nperdidos_M_A_e2$Promedio=rowMeans(subset(perdidos_M_A_e2, select =c(9:ncol(perdidos_M_A_e2))))\nperdidos_M_A_e2_sum=sum(perdidos_M_A_e2$Promedio)\nadquiridos_I_A_e2=subset(A_e2_I_def2, !(ASV_names %in% especif_A2_endo$ASV_names))\nadquiridos_I_A_e2$Promedio=rowMeans(subset(adquiridos_I_A_e2, select =c(9:ncol(adquiridos_I_A_e2))))\nadquiridos_I_A_e2_sum=sum(adquiridos_I_A_e2$Promedio)\n\nespecif_A2_endo$Promedio_Madre=rowMeans(subset(especif_A2_endo, select =c(9:20)))\nespecif_A2_endo_M_sum=sum(especif_A2_endo$Promedio_Madre)  \nespecif_A2_endo$Promedio_Hijas=rowMeans(subset(especif_A2_endo, select =c(21:28)))\nespecif_A2_endo_I_sum=sum(especif_A2_endo$Promedio_Hijas)\n\nAbund_A2_endo=c(especif_A2_endo_M_sum,perdidos_M_A_e2_sum,especif_A2_endo_I_sum,adquiridos_I_A_e2_sum)\nbarras_abund_A_e2=as.data.frame(cbind(barras_A_e2,Abund_A2_endo))\ncolnames(barras_abund_A_e2)[5]=\"Abundance\"\n\nwrite.table(data.frame(\"X\"=rownames(perdidos_M_A_e2),perdidos_M_A_e2),\"AbunRel_perdidos_Madre_A_e2.txt\",sep=\"\\t\",row.names = F)\nwrite.table(data.frame(\"X\"=rownames(adquiridos_I_A_e2),adquiridos_I_A_e2),\"AbunRel_AdquiridosAmbienteHija_A_e2.txt\",sep=\"\\t\",row.names = F)\nwrite.table(data.frame(\"X\"=rownames(especif_A2_endo),especif_A2_endo),\"AbunRel_TransferidosMadreHija_A_e2.txt\",sep=\"\\t\",row.names = F)\n\n#b.2) 2023\nperdidos_M_B_e2=subset(B_e2_M_def2, !(ASV_names %in% especif_B2_endo$ASV_names))\nperdidos_M_B_e2$Promedio=rowMeans(subset(perdidos_M_B_e2, select =c(9:ncol(perdidos_M_B_e2))))\nperdidos_M_B_e2_sum=sum(perdidos_M_B_e2$Promedio)\nadquiridos_I_B_e2=subset(B_e2_I_def2, !(ASV_names %in% especif_B2_endo$ASV_names))\nadquiridos_I_B_e2$Promedio=rowMeans(subset(adquiridos_I_B_e2, select =c(9:ncol(adquiridos_I_B_e2))))\nadquiridos_I_B_e2_sum=sum(adquiridos_I_B_e2$Promedio)\n\nespecif_B2_endo$Promedio_Madre=rowMeans(subset(especif_B2_endo, select =c(9:18)))\nespecif_B2_endo_M_sum=sum(especif_B2_endo$Promedio_Madre)  \nespecif_B2_endo$Promedio_Hijas=rowMeans(subset(especif_B2_endo, select =c(19:26)))\nespecif_B2_endo_I_sum=sum(especif_B2_endo$Promedio_Hijas)\n\nAbund_B2_endo=c(especif_B2_endo_M_sum,perdidos_M_B_e2_sum,especif_B2_endo_I_sum,adquiridos_I_B_e2_sum)\nbarras_abund_B_e2=as.data.frame(cbind(barras_B_e2,Abund_B2_endo))\ncolnames(barras_abund_B_e2)[5]=\"Abundance\"\n\nwrite.table(data.frame(\"X\"=rownames(perdidos_M_B_e2),perdidos_M_B_e2),\"AbunRel_perdidos_Madre_B_e2.txt\",sep=\"\\t\",row.names = F)\nwrite.table(data.frame(\"X\"=rownames(adquiridos_I_B_e2),adquiridos_I_B_e2),\"AbunRel_AdquiridosAmbienteHijas_B_e2.txt\",sep=\"\\t\",row.names = F)\nwrite.table(data.frame(\"X\"=rownames(especif_B2_endo),especif_B2_endo),\"AbunRel_TransferidosMadreHija_B_e2.txt\",sep=\"\\t\",row.names = F)\n\nA1_abun=ggplot(barras_abund_A_e1, aes(x=Plant, y=Abundance, fill=Condition, order=Condition)) + geom_bar(stat=\"identity\", position=\"stack\")+\n  scale_fill_manual(values=c(\"magenta\", \"deepskyblue\", \"magenta\",\"green\"),\n                    labels=c(\"Transmitted\",\"Lost\", \"Transmitted\", \"Acquired\"),\n                    breaks=c(\"Transmimtted\",\"Lost\", \"Transmitted\", \"Acquired\"))+\n  labs(y=\"Relative abundance of ASV (%)\", x=NULL, fill=\"Condition\",title=\"Plot 1 (2022)\")+\n  guides(fill = guide_legend(reverse = TRUE))+\n  scale_x_discrete(limits=c(\"Mother\",\"Sucker\"),labels=c(\"Mother\",\"Sucker\"),\n                   breaks=c(\"Mother\",\"Sucker\"))+\n  scale_y_continuous(expand=c(0.01,0.01),\n                     breaks=c(0,10,20,30,40,50,60,70,80,90,100),\n                     labels=c(\"0\",\"10\", \"20\",\"30\",\"40\",\"50\",\"60\",\"70\",\"80\",\"90\",\"100\"),\n                     limits = c(NA, 101))+\n  theme_bw()+\n  theme(panel.border = element_rect(colour=\"black\"))+\n  theme(axis.title.x=element_blank())+\n  theme(plot.title = element_text(face=\"bold\", hjust = 0.5, size=16))+\n  theme(axis.text = element_text(size = 14))+\n  theme(axis.text.x = element_text(face=\"bold\", size=16))+\n  theme(axis.title.y = element_text(size = 16))+\n  theme(legend.key.size = unit(0.9, \"cm\"))+\n  theme(legend.text = element_text(size = 18))+\n  theme(legend.title = element_text(size=18, face=\"bold\"))+\n  theme(legend.title.align=0)+\n  theme(legend.text.align = 0)\nx11()\nA1_abun\n\nB1_abun=ggplot(barras_abund_B_e1, aes(x=Plant, y=Abundance, fill=Condition, order=Condition)) + geom_bar(stat=\"identity\", position=\"stack\")+\n  scale_fill_manual(values=c(\"magenta\", \"deepskyblue\", \"magenta\",\"green\"),\n                    labels=c(\"Transmitted\",\"Lost\", \"Transmitted\", \"Acquired\"),\n                    breaks=c(\"Transmimtted\",\"Lost\", \"Transmitted\", \"Acquired\"))+\n  labs(y=\"Relative abundance of ASV (%)\", x=NULL, fill=\"Condition\",title=\"Plot 1 (2023)\")+\n  guides(fill = guide_legend(reverse = TRUE))+\n  scale_x_discrete(limits=c(\"Mother\",\"Sucker\"),labels=c(\"Mother\",\"Sucker\"),\n                   breaks=c(\"Mother\",\"Sucker\"))+\n  scale_y_continuous(expand=c(0.01,0.01),\n                     breaks=c(0,10,20,30,40,50,60,70,80,90,100),\n                     labels=c(\"0\",\"10\", \"20\",\"30\",\"40\",\"50\",\"60\",\"70\",\"80\",\"90\",\"100\"),\n                     limits = c(NA, 101))+\n  theme_bw()+\n  theme(panel.border = element_rect(colour=\"black\"))+\n  theme(axis.title.x=element_blank())+\n  theme(plot.title = element_text(face=\"bold\", hjust = 0.5, size=16))+\n  theme(axis.text = element_text(size = 14))+\n  theme(axis.text.x = element_text(face=\"bold\", size=16))+\n  theme(axis.title.y = element_text(size = 16))+\n  theme(legend.key.size = unit(0.9, \"cm\"))+\n  theme(legend.text = element_text(size = 18))+\n  theme(legend.title = element_text(size=18, face=\"bold\"))+\n  theme(legend.title.align=0)+\n  theme(legend.text.align = 0)\nx11()\nB1_abun\n\nA2_abun=ggplot(barras_abund_A_e2, aes(x=Plant, y=Abundance, fill=Condition, order=Condition)) + geom_bar(stat=\"identity\", position=\"stack\")+\n  scale_fill_manual(values=c(\"magenta\", \"deepskyblue\", \"magenta\",\"green\"),\n                    labels=c(\"Transmitted\",\"Lost\", \"Transmitted\", \"Acquired\"),\n                    breaks=c(\"Transmimtted\",\"Lost\", \"Transmitted\", \"Acquired\"))+\n  labs(y=\"Relative abundance of ASV (%)\", x=NULL, fill=\"Condition\",title=\"Plot 2 (2022)\")+\n  guides(fill = guide_legend(reverse = TRUE))+\n  scale_x_discrete(limits=c(\"Mother\",\"Sucker\"),labels=c(\"Mother\",\"Sucker\"),\n                   breaks=c(\"Mother\",\"Sucker\"))+\n  scale_y_continuous(expand=c(0.01,0.01),\n                     breaks=c(0,10,20,30,40,50,60,70,80,90,100),\n                     labels=c(\"0\",\"10\", \"20\",\"30\",\"40\",\"50\",\"60\",\"70\",\"80\",\"90\",\"100\"),\n                     limits = c(NA, 101))+\n  theme_bw()+\n  theme(panel.border = element_rect(colour=\"black\"))+\n  theme(axis.title.x=element_blank())+\n  theme(plot.title = element_text(face=\"bold\", hjust = 0.5, size=16))+\n  theme(axis.text = element_text(size = 14))+\n  theme(axis.text.x = element_text(face=\"bold\", size=16))+\n  theme(axis.title.y = element_text(size = 16))+\n  theme(legend.key.size = unit(0.9, \"cm\"))+\n  theme(legend.text = element_text(size = 18))+\n  theme(legend.title = element_text(size=18, face=\"bold\"))+\n  theme(legend.title.align=0)+\n  theme(legend.text.align = 0)\nx11()\nA2_abun\n\nB2_abun=ggplot(barras_abund_B_e2, aes(x=Plant, y=Abundance, fill=Condition, order=Condition)) + geom_bar(stat=\"identity\", position=\"stack\")+\n  scale_fill_manual(values=c(\"magenta\", \"deepskyblue\", \"magenta\",\"green\"),\n                    labels=c(\"Transmitted\",\"Lost\", \"Transmitted\", \"Acquired\"),\n                    breaks=c(\"Transmimtted\",\"Lost\", \"Transmitted\", \"Acquired\"))+\n  labs(y=\"Relative abundance of ASV (%)\", x=NULL, fill=\"Condition\",title=\"Plot 2 (2023)\")+\n  guides(fill = guide_legend(reverse = TRUE))+\n  scale_x_discrete(limits=c(\"Mother\",\"Sucker\"),labels=c(\"Mother\",\"Sucker\"),\n                   breaks=c(\"Mother\",\"Sucker\"))+\n  scale_y_continuous(expand=c(0.01,0.01),\n                     breaks=c(0,10,20,30,40,50,60,70,80,90,100),\n                     labels=c(\"0\",\"10\", \"20\",\"30\",\"40\",\"50\",\"60\",\"70\",\"80\",\"90\",\"100\"),\n                     limits = c(NA, 101))+\n  theme_bw()+\n  theme(panel.border = element_rect(colour=\"black\"))+\n  theme(axis.title.x=element_blank())+\n  theme(plot.title = element_text(face=\"bold\", hjust = 0.5, size=16))+\n  theme(axis.text = element_text(size = 14))+\n  theme(axis.text.x = element_text(face=\"bold\", size=16))+\n  theme(axis.title.y = element_text(size = 16))+\n  theme(legend.key.size = unit(0.9, \"cm\"))+\n  theme(legend.text = element_text(size = 18))+\n  theme(legend.title = element_text(size=18, face=\"bold\"))+\n  theme(legend.title.align=0)+\n  theme(legend.text.align = 0)\nx11()\nB2_abun\n\nx11()\np_abund_p1=grid.arrange(A1_abun,B1_abun,ncol=2, nrow=1, top=textGrob(\"Plot 1\", gp=gpar(fontsize=18)))\n\nx11()\np_abund_p2=grid.arrange(A2_abun,B2_abun,ncol=2, nrow=1, top=textGrob(\"Plot 2\", gp=gpar(fontsize=18)))"
  },
  {
    "objectID": "Fungi_data_analysis.html#phylum",
    "href": "Fungi_data_analysis.html#phylum",
    "title": "Ecological analyses of fungal dataset",
    "section": "8.1 Phylum",
    "text": "8.1 Phylum\n\nANCOM_phylum_rizo=ancomloop(input_object_phyloseq = rizo, grouping = \"Fusion\", \n                            ancom.options = list(global=FALSE, struc_zero=TRUE, n_cl=8),out.unclassified = TRUE, tax.level=\"Phylum\")\n\n###options:\n#grouping: indicate your grouping variable\n#n_cl: the number of cores\n#global: apply the global test (for more information, read this paper: https://www.nature.com/articles/s41467-020-17041-7 and documentation of the function ancombc)\n#struc_zero: remove \"structural zeros\" (not real zeros but zeros resulting from a wrong sampling procedure)\n#out.unclassified: apply or not the test to unclassified taxa\n#tax.level: indicate the taxonomical level that you want to analyze\n\nwrite.table(data.frame(\"_\"=rownames(ANCOM_phylum_rizo[[1]]),ANCOM_phylum_rizo[[1]]),file=\"ANCOM_Phylum_Rizo_2022_Plot1_I.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_phylum_rizo[[2]]),ANCOM_phylum_rizo[[2]]),file=\"ANCOM_Phylum_Rizo_2022_Plot1_M.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_phylum_rizo[[3]]),ANCOM_phylum_rizo[[3]]),file=\"ANCOM_Phylum_Rizo_2022_Plot2_I.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_phylum_rizo[[4]]),ANCOM_phylum_rizo[[4]]),file=\"ANCOM_Phylum_Rizo_2022_Plot2_M.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_phylum_rizo[[5]]),ANCOM_phylum_rizo[[5]]),file=\"ANCOM_Phylum_Rizo_2023_Plot1_I.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_phylum_rizo[[6]]),ANCOM_phylum_rizo[[6]]),file=\"ANCOM_Phylum_Rizo_2023_Plot1_M.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_phylum_rizo[[7]]),ANCOM_phylum_rizo[[7]]),file=\"ANCOM_Phylum_Rizo_2023_Plot2_I.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_phylum_rizo[[8]]),ANCOM_phylum_rizo[[8]]),file=\"ANCOM_Phylum_Rizo_2023_Plot2_M.txt\",sep=\"\\t\", row.names = F)\n\n#b) ENDOSPHERE\nANCOM_phylum_endo=ancomloop(input_object_phyloseq = endo, grouping = \"Fusion\", \n                            ancom.options = list(global=FALSE, struc_zero=TRUE, n_cl=8),out.unclassified = TRUE, tax.level=\"Phylum\")\n\nwrite.table(data.frame(\"_\"=rownames(ANCOM_phylum_endo[[1]]),ANCOM_phylum_endo[[1]]),file=\"ANCOM_Phylum_endo_2022_Plot1_I.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_phylum_endo[[2]]),ANCOM_phylum_endo[[2]]),file=\"ANCOM_Phylum_endo_2022_Plot1_M.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_phylum_endo[[3]]),ANCOM_phylum_endo[[3]]),file=\"ANCOM_Phylum_endo_2022_Plot2_I.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_phylum_endo[[4]]),ANCOM_phylum_endo[[4]]),file=\"ANCOM_Phylum_endo_2022_Plot2_M.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_phylum_endo[[5]]),ANCOM_phylum_endo[[5]]),file=\"ANCOM_Phylum_endo_2023_Plot1_I.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_phylum_endo[[6]]),ANCOM_phylum_endo[[6]]),file=\"ANCOM_Phylum_endo_2023_Plot1_M.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_phylum_endo[[7]]),ANCOM_phylum_endo[[7]]),file=\"ANCOM_Phylum_endo_2023_Plot2_I.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_phylum_endo[[8]]),ANCOM_phylum_endo[[8]]),file=\"ANCOM_Phylum_endo_2023_Plot2_M.txt\",sep=\"\\t\", row.names = F)\n\nIn this work, we analyzed exhaustively the results in Excel. Pay attention to the column entitled “diff_abbn”, which shows the phyla that were differentially abundant."
  },
  {
    "objectID": "Fungi_data_analysis.html#genus-1",
    "href": "Fungi_data_analysis.html#genus-1",
    "title": "Ecological analyses of fungal dataset",
    "section": "8.2 Genus",
    "text": "8.2 Genus\n\n#a) RHIZOSPHERE\nANCOM_genus_rizo=ancomloop(input_object_phyloseq = rizo, grouping = \"Fusion\", \n                            ancom.options = list(global=FALSE, struc_zero=TRUE, n_cl=8),out.unclassified = TRUE, tax.level=\"Genus\")\n\n\nwrite.table(data.frame(\"_\"=rownames(ANCOM_genus_rizo[[1]]),ANCOM_genus_rizo[[1]]),file=\"ANCOM_Genus_Rizo_2022_Plot1_I.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_genus_rizo[[2]]),ANCOM_genus_rizo[[2]]),file=\"ANCOM_Genus_Rizo_2022_Plot1_M.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_genus_rizo[[3]]),ANCOM_genus_rizo[[3]]),file=\"ANCOM_Genus_Rizo_2022_Plot2_I.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_genus_rizo[[4]]),ANCOM_genus_rizo[[4]]),file=\"ANCOM_Genus_Rizo_2022_Plot2_M.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_genus_rizo[[5]]),ANCOM_genus_rizo[[5]]),file=\"ANCOM_Genus_Rizo_2023_Plot1_I.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_genus_rizo[[6]]),ANCOM_genus_rizo[[6]]),file=\"ANCOM_Genus_Rizo_2023_Plot1_M.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_genus_rizo[[7]]),ANCOM_genus_rizo[[7]]),file=\"ANCOM_Genus_Rizo_2023_Plot2_I.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_genus_rizo[[8]]),ANCOM_genus_rizo[[8]]),file=\"ANCOM_Genus_Rizo_2023_Plot2_M.txt\",sep=\"\\t\", row.names = F)\n\n#a) ENDOSPHERE\nANCOM_genus_endo=ancomloop(input_object_phyloseq = endo, grouping = \"Fusion\", \n                            ancom.options = list(global=FALSE, struc_zero=TRUE, n_cl=8),out.unclassified = TRUE, tax.level=\"Genus\")\n\nnames(ANCOM)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_genus_endo[[1]]),ANCOM_genus_endo[[1]]),file=\"ANCOM_Genus_Endo_2022_Plot1_I.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_genus_endo[[2]]),ANCOM_genus_endo[[2]]),file=\"ANCOM_Genus_Endo_2022_Plot1_M.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_genus_endo[[3]]),ANCOM_genus_endo[[3]]),file=\"ANCOM_Genus_Endo_2022_Plot2_I.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_genus_endo[[4]]),ANCOM_genus_endo[[4]]),file=\"ANCOM_Genus_Endo_2022_Plot2_M.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_genus_endo[[5]]),ANCOM_genus_endo[[5]]),file=\"ANCOM_Genus_Endo_2023_Plot1_I.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_genus_endo[[6]]),ANCOM_genus_endo[[6]]),file=\"ANCOM_Genus_Endo_2023_Plot1_M.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_genus_endo[[7]]),ANCOM_genus_endo[[7]]),file=\"ANCOM_Genus_Endo_2023_Plot2_I.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_genus_endo[[8]]),ANCOM_genus_endo[[8]]),file=\"ANCOM_Genus_Endo_2023_Plot2_M.txt\",sep=\"\\t\", row.names = F)\n\nIn this work, we analyzed exhaustively the results in Excel. Pay attention to the column entitled “diff_abbn”, which shows the genera that were differentially abundant."
  },
  {
    "objectID": "Bacteria_data_analysis.html",
    "href": "Bacteria_data_analysis.html",
    "title": "Ecological analyses of bacterial dataset",
    "section": "",
    "text": "Firstly, we have to install and load many packages needed to analyze our bacterial data:\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))\n  install.packages(\"BiocManager\")\nBiocManager::install(\"ANCOMBC\")\nBiocManager::install(\"phyloseq\")\nif (!require(\"BiocManager\", quietly = TRUE))\n  install.packages(\"BiocManager\")\nBiocManager::install(\"microbiome\")\ninstall.packages(\"dplyr\")\ninstall.packages(\"tidyverse\")\ninstall.packages(\"ggplot2\")\ninstall.packages(\"GUniFrac\")\ninstall.packages(\"phangorn\")\ninstall.packages(\"vegan\")\ninstall.packages(\"gdata\")\ninstall.packages(\"purrr\")\ninstall.packages(\"devtools\")\ninstall.packages(\"rstatix\")\ninstall.packages(\"ggstasplot\")\ninstall.packages(\"DescTools\")\ninstall.packages(\"tibble\")\ninstall.packages(\"WRS2\")\ninstall.packages(\"tibble\")\ninstall.packages(\"ARTool\")\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))\n  install.packages(\"BiocManager\")\nBiocManager::install(\"edgeR\")\nremotes::install_github(\"wilkelab/ggtext\") \ninstall_github(\"pmartinezarbizu/pairwiseAdonis/pairwiseAdonis\")\ninstall_github(\"nuriamw/micro4all\")\n\nlibrary(ANCOMBC)\nlibrary(phyloseq)\nlibrary(microbiome)\nlibrary(dplyr)\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(GUniFrac)\nlibrary(vegan)\nlibrary(gdata)\nlibrary(purrr)\nlibrary(devtools)\nlibrary(rstatix)\nlibrary(ggstatsplot)\nlibrary(DescTools)\nlibrary(tibble)\nlibrary(WRS2)\nlibrary(ARTool)\nlibrary(edgeR)\nlibrary(pairwiseAdonis)\nlibrary(micro4all)\nOur analyses will based on phyloseq objects. That is to say, we are going to use phyloseq package"
  },
  {
    "objectID": "Bacteria_data_analysis.html#statistical-analysis",
    "href": "Bacteria_data_analysis.html#statistical-analysis",
    "title": "Ecological analyses of bacterial dataset",
    "section": "4.1 Statistical analysis",
    "text": "4.1 Statistical analysis\nWe have just calculated the alpha indices per sample and per group of samples, but we have to compare them among group of samples. For that purpose, we will apply univariate statistic test. We will go into different steps, which briefly consist of:\n\nCheck the normality of the data: we have to confirm whether our variables follow a normal distribution. If they are not normally distributed, we will also check if they are very far from the normal distribution.\nCheck the homoscedasticity of the data: confirm if dispersion of the variable is the same in all the groups of samples to compare. If the distribution of the variables is normal (or almost normal) and there is homogeneity of variances, we will apply parametric tests. Otherwise, we will use non-parametric tests.\nCheck the presence of the outliers. Outliers are not a problem, but we have to check if they are extreme outliers. In that case, we will apply robust tests\nApply the proper statistical test. Depending on the characteristics of the variables and the experimental design (one factor to be studied: one-way statistics; two factors: two-way statistical tests).\nCalculate the size of the effect. In case we find statistical differences among groups of samples in the studied variables, we have to measure the magnitude of the effect.\n\nWe have to study separately each individual variable (in this case, each alpha diversity index).\nIn this example, we are interested in two factors: the effect of the sampling year, and the effect of the plants’ developmental stage, also named Condition in this web\n\n#a) ENDOSPHERE\n#a.1) South plot\n#Normality\nindices_endo1%&gt;%\n  group_by(Condition, Year)%&gt;%#\n  shapiro_test(Observed)\n \nindices_endo1%&gt;%\n  group_by(Condition, Year)%&gt;%\n  shapiro_test(Shannon)\n\nindices_endo1%&gt;%\n  group_by(Condition, Year)%&gt;%\n  shapiro_test(InvSimpson)#data are not normally distributed\n\nindices_endo1%&gt;%\n  group_by(Condition, Year)%&gt;%\n  shapiro_test(Pielou)\n\nx11()#let's see how far are our data from the normal distribution into a qq-plot.\nggqqplot(indices_endo1, \"InvSimpson\", ggtheme = theme_bw()) +\n  facet_grid(Condition ~ Year)\n\nAs shown in Figure 6, just one point is far from the normal distribution, so we can still applied parametric data is homoscedasticity hypothesis is met.\n\n\n\nFigure 6. QQplot showing distribution of the InvSimpson corresponding to root endosphere samples f plants located in the south plot\n\n\n\n#Homoscedasticity\nindices_endo1 %&gt;% levene_test(Observed ~ Condition*Year)\nindices_endo1 %&gt;% levene_test(Shannon ~ Condition*Year)\nindices_endo1 %&gt;% levene_test(InvSimpson ~ Condition*Year)\nindices_endo1 %&gt;% levene_test(Pielou ~ Condition*Year)\n \n#Outliers\na=indices_endo1 %&gt;% group_by(Condition,Year)%&gt;%  identify_outliers(Observed);View(a)\nb=indices_endo1 %&gt;% group_by(Condition, Year)%&gt;% identify_outliers(Shannon);View(b)\nc=indices_endo1 %&gt;% group_by(Condition, Year)%&gt;% identify_outliers(InvSimpson);View(c)\nd=indices_endo1 %&gt;%group_by(Condition, Year)%&gt;% identify_outliers(Pielou); View(d)\n\n#Hypothesis contrasting tests\nindices_endo1 %&gt;%  anova_test(Observed ~ Condition * Year)#two-way ANOVA because our data are homoscedatic\nindices_endo1 %&gt;%  anova_test(Shannon ~ Condition * Year)\nindices_endo1 %&gt;%  anova_test(Pielou ~ Condition * Year)\n\nindices_endo1$Condition=as.factor(indices_endo1$Condition)#robust test because Invesrse of Simpson have extreme outliers\nindices_endo1$Year=as.factor(indices_endo1$Year)\nt2way(InvSimpson ~ Condition*Year, data=indices_endo1)\n\n#We did not find the interaction between Year and plant developmental Condition significant in any of the variables studied, but the effect of Year or Condition (or both) was statistaclly significant on some of the indices. In that case, we have to study the effect of each factor individually:\n\n#Post-hoc tests\nindices_endo1 %&gt;%pairwise_t_test(Observed~Year)\nindices_endo1 %&gt;%pairwise_t_test(Shannon~Year)\nindices_endo1 %&gt;%pairwise_t_test(Pielou~Condition)\nindices_endo1 %&gt;%pairwise_t_test(Pielou~Year)\nindices_endo1$Condition=as.factor(indices_endo1$Condition)\nindices_endo1$Year=as.factor(indices_endo1$Year)\nmcp2atm(InvSimpson~Year*Condition, data=indices_endo1) #the robust post-hoc test\n\n#a.2) North plot\n#Normality\nindices_endo2%&gt;%\n  group_by(Condition, Year)%&gt;%\n  shapiro_test(Observed)\n\nindices_endo2%&gt;%\n  group_by(Condition, Year)%&gt;%\n  shapiro_test(Shannon)\n\nindices_endo2%&gt;%\n  group_by(Condition, Year)%&gt;%\n  shapiro_test(InvSimpson)\n\nindices_endo2%&gt;%\n  group_by(Condition, Year)%&gt;%\n  shapiro_test(Pielou)\n\nx11()\nggqqplot(indices_endo2, \"InvSimpson\", ggtheme = theme_bw()) +\n  facet_grid(Condition ~ Year)\n\n#Homoscedasticity\nindices_endo2 %&gt;% levene_test(Observed ~ Condition*Year)\nindices_endo2 %&gt;% levene_test(Shannon ~ Condition*Year)\nindices_endo2 %&gt;% levene_test(InvSimpson ~ Condition*Year)\nindices_endo2 %&gt;% levene_test(Pielou ~ Condition*Year)\n\n#outliers\na=indices_endo2 %&gt;%group_by(Condition,Year)%&gt;%identify_outliers(Observed); View(a)\nb=indices_endo2 %&gt;%group_by(Condition, Year)%&gt;%identify_outliers(Shannon);View(b)\nc=indices_endo2 %&gt;%group_by(Condition, Year)%&gt;%identify_outliers(InvSimpson); View(c)\nd=indices_endo2 %&gt;%group_by(Condition, Year)%&gt;%identify_outliers(Pielou);View(d)\n\n#two-way tests \nindices_endo2 %&gt;%  anova_test(Observed ~ Condition * Year)#two way ANOVA\nindices_endo2 %&gt;%  anova_test(Shannon ~ Condition * Year)\nindices_endo2$Condition=as.factor(indices_endo2$Condition)\nindices_endo2$Year=as.factor(indices_endo2$Year)\nt2way(InvSimpson ~ Condition*Year, data=indices_endo2)#robust test\n\n#The dispersion of the Pielou index for both groups of samples is not homogeneous, so we cannot compute parametric tests. However, there are not suitable options for non-parametric two-way tests. Let's make a data transformation according to this tutorial.http://depts.washington.edu/acelab/proj/art/index.html\n\nindices_endo2$Condition=as.factor(indices_endo2$Condition)\nindices_endo2$Year=as.factor(indices_endo2$Year)\nm = art(Observed ~ Year * Condition, data=indices_endo2) # linear model syntax; see lm()\nmm=anova(m)\neta_squared(mm)\n\n#B) RHIZOSPHERE\n#b.1) South plot\n#normality\nindices_rizo1%&gt;%\n  group_by(Condition, Year)%&gt;%\n  shapiro_test(Observed)\n\nindices_rizo1%&gt;%\n  group_by(Condition, Year)%&gt;%\n  shapiro_test(Shannon)\n\nindices_rizo1%&gt;%\n  group_by(Condition, Year)%&gt;%\n  shapiro_test(InvSimpson)\n\nindices_rizo1%&gt;%\n  group_by(Condition, Year)%&gt;%\n  shapiro_test(Pielou)\n\nx11()\nggqqplot(indices_rizo1, \"Observed\", ggtheme = theme_bw()) +\n  facet_grid(Condition ~ Year)\nx11()\nggqqplot(indices_rizo1, \"InvSimpson\", ggtheme = theme_bw()) +\n  facet_grid(Condition ~ Year)\nx11()\nggqqplot(indices_rizo1, \"Pielou\", ggtheme = theme_bw()) +\n  facet_grid(Condition ~ Year)\n\n#Homocesdasticity\nindices_rizo1 %&gt;% levene_test(Observed ~ Condition*Year)\nindices_rizo1 %&gt;% levene_test(Shannon ~ Condition*Year)\nindices_rizo1 %&gt;% levene_test(InvSimpson ~ Condition*Year)\nindices_rizo1 %&gt;% levene_test(Pielou ~ Condition*Year)\n\n#Outliers\na=indices_rizo1 %&gt;% group_by(Condition,Year)%&gt;%identify_outliers(Observed); View(a)\nb=indices_rizo1 %&gt;% group_by(Condition, Year)%&gt;%identify_outliers(Shannon); View(b)\nc=indices_rizo1 %&gt;% group_by(Condition, Year)%&gt;%identify_outliers(InvSimpson);View(c)\nd=indices_rizo1 %&gt;% group_by(Condition, Year)%&gt;%identify_outliers(Pielou);View(d)\n\n#we found that Observed and InvSimpson have extremo outliers. We should check wether applying robust methods we maintain the homoscedasticity of the data\nindices_rizo1%&gt;% filter(between(Observed,\n                 quantile(Observed,0.1),  #remove the 10% of the data (in one tail)\n                 quantile(Observed, 0.9)))%&gt;%#remove the 10% of the data (in the other tail)\n  levene_test(Observed ~ Year*Plot)#still homoscedastic\nindices_rizo1%&gt;% filter(between(InvSimpson,\n                 quantile(InvSimpson,0.1), \n                 quantile(InvSimpson, 0.9)))%&gt;%\n  levene_test(InvSimpson ~ Year*Plot)#still homoscedastic\n\n#two-way tests\nindices_rizo1$Condition=as.factor(indices_rizo1$Condition)\nindices_rizo1$Year=as.factor(indices_rizo1$Year)\nt2way(Observed ~ Condition*Year, data=indices_rizo1)#robust test\nindices_rizo1 %&gt;%  anova_test(Shannon ~ Condition * Year)\nt2way(InvSimpson ~ Condition*Year, data=indices_rizo1)#robust test\nindices_rizo1 %&gt;%  anova_test(Pielou ~ Condition * Year)\n\n#Post-hoc:\nindices_rizo1$Year=as.factor(indices_rizo1$Year)\nmcp2atm(Observed~Year*Condition, data=indices_rizo1)#robust test\n\n#effect size\nx=lm(Observed~Condition*Year, data=indices_rizo1)\neta_squared(x) \n\n#b.2) North plot\n#Normality\nindices_rizo2%&gt;%\n  group_by(Condition, Year)%&gt;%\n  shapiro_test(Observed)\n\nindices_rizo2%&gt;%\n  group_by(Condition, Year)%&gt;%\n  shapiro_test(Shannon)\n\nindices_rizo2%&gt;%\n  group_by(Condition, Year)%&gt;%\n  shapiro_test(InvSimpson)\n\nindices_rizo2%&gt;%\n  group_by(Condition, Year)%&gt;%\n  shapiro_test(Pielou)\n\nx11()\nggqqplot(indices_rizo2, \"InvSimpson\", ggtheme = theme_bw()) +\n  facet_grid(Condition ~ Year)\n\n#Homoscedasticity\nindices_rizo2 %&gt;% levene_test(Observed ~ Condition*Year)\nindices_rizo2 %&gt;% levene_test(Shannon ~ Condition*Year)\nindices_rizo2 %&gt;% levene_test(InvSimpson ~ Condition*Year)\nindices_rizo2 %&gt;% levene_test(Pielou ~ Condition*Year)\n\n#Outliers\na=indices_rizo2 %&gt;%group_by(Condition,Year)%&gt;%identify_outliers(Observed); View(a)\nb=indices_rizo2 %&gt;%group_by(Condition, Year)%&gt;%identify_outliers(Shannon);View(b) \nc=indices_rizo2 %&gt;%group_by(Condition, Year)%&gt;%identify_outliers(InvSimpson);View(c)\nd=indices_rizo2 %&gt;%group_by(Condition, Year)%&gt;%identify_outliers(Pielou);View(d)\n\n#Checking the possibility to apply robust tests\nindices_rizo2%&gt;% \n  filter(between(Observed,\n                 quantile(Observed,0.1),  \n                 quantile(Observed, 0.9)))%&gt;%\n  levene_test(Observed ~ Year*Condition)\n\n#tests\nindices_rizo2$Condition=as.factor(indices_rizo2$Condition)\nindices_rizo2$Year=as.factor(indices_rizo2$Year)\nt2way(Observed ~ Condition*Year, data=indices_rizo2)\nindices_rizo2 %&gt;%  anova_test(Shannon ~ Condition * Year)\nindices_rizo2 %&gt;%  anova_test(InvSimpson ~ Condition * Year)\nindices_rizo2 %&gt;%  anova_test(Pielou ~ Condition * Year)\n\n#Post-hoc\nindices_rizo2 %&gt;%pairwise_t_test(Pielou~Condition)\n\nWe can also compare if the alpha diversity indices of bacterial communities associated to mothers, first and second suckers are different each other. In the index of this website, you can find more details about the concepts of Mothers, first suckers and second suckers. These concepts are very similar to the concept of “Generation” in sexually reproducing plants, and that’s exactly the name of the factor employed here. So, we will compare the indices of these groups, by the factor Generation.\n\n#a) RHIZOSPHERE\n# a.1) South plot\n#Normality\nindices_rizo1%&gt;% group_by(Generation)%&gt;% shapiro_test(Observed)\nindices_rizo1%&gt;%  group_by(Generation)%&gt;%  shapiro_test(Shannon)\nindices_rizo1%&gt;%  group_by(Generation)%&gt;%  shapiro_test(InvSimpson)\nindices_rizo1%&gt;%  group_by(Generation)%&gt;%  shapiro_test(Pielou)\n\nx11()\nggqqplot(indices_rizo1, \"Observed\", ggtheme = theme_bw()) +\n  facet_grid(Generation~Plot)\nx11()\nggqqplot(indices_rizo1, \"InvSimpson\", ggtheme = theme_bw()) +\n  facet_grid(Generation ~ Plot)\nx11()\nggqqplot(indices_rizo1, \"Pielou\", ggtheme = theme_bw()) +\n  facet_grid(Generation ~ Plot)\n\n#Homoscedasticity\nindices_rizo1 %&gt;% levene_test(Observed ~ Generation)\nindices_rizo1 %&gt;% levene_test(Shannon ~ Generation)\nindices_rizo1 %&gt;% levene_test(InvSimpson ~ Generation)\nindices_rizo1 %&gt;% levene_test(Pielou ~ Generation)\n\n#Outliers\na=indices_rizo1 %&gt;%group_by(Generation)%&gt;%identify_outliers(Observed); View(a)\nb=indices_rizo1 %&gt;%group_by(Generation)%&gt;%identify_outliers(Shannon); View(b)\nc=indices_rizo1 %&gt;%group_by(Generation)%&gt;%identify_outliers(InvSimpson); View(c)\nd=indices_rizo1 %&gt;%group_by(Generation)%&gt;%identify_outliers(Pielou); View(d)\n\n#check whether the variables \"Observed\" and \"InvSimpson\" are still homocedastic in case we apply robust tests\nindices_rizo1%&gt;% \n  filter(between(Observed,\n                 quantile(Observed,0.1),  \n                 quantile(Observed, 0.9)))%&gt;%\n  levene_test(Observed ~ Generation)\n\nindices_rizo1%&gt;% \n  filter(between(InvSimpson,\n                 quantile(InvSimpson,0.1),  \n                 quantile(InvSimpson, 0.9)))%&gt;%\n  levene_test(InvSimpson ~ Generation)\n\n\n#Tests\nt1way(Observed~Generation, data=indices_rizo1)#one-way robust test\nindices_rizo1 %&gt;%  anova_test(Shannon ~ Generation)#one-way ANOVA\nt1way(InvSimpson~Generation, data=indices_rizo1)\nindices_rizo1 %&gt;%  anova_test(Pielou ~ Generation)\n\n\n#a.2) North plot\nindices_rizo2%&gt;% group_by(Generation)%&gt;% shapiro_test(Observed)\nindices_rizo2%&gt;%  group_by(Generation)%&gt;%  shapiro_test(Shannon)\nindices_rizo2%&gt;%  group_by(Generation)%&gt;%  shapiro_test(InvSimpson)\nindices_rizo2%&gt;%  group_by(Generation)%&gt;%  shapiro_test(Pielou)\n\nx11()\nggqqplot(indices_rizo2, \"Observed\", ggtheme = theme_bw()) +\n  facet_grid(Generation~Plot)\n\nx11()\nggqqplot(indices_rizo2, \"InvSimpson\", ggtheme = theme_bw()) +\n  facet_grid(Generation ~ Plot)\n\n#Homoscedasticity\nindices_rizo2 %&gt;% levene_test(Observed ~ Generation)\nindices_rizo2 %&gt;% levene_test(Shannon ~ Generation)\nindices_rizo2 %&gt;% levene_test(InvSimpson ~ Generation)\nindices_rizo2 %&gt;% levene_test(Pielou ~ Generation)\n\n#Outliers\na=indices_rizo2 %&gt;%group_by(Generation)%&gt;%identify_outliers(Observed); View(a)\nb=indices_rizo2 %&gt;% group_by(Generation)%&gt;%identify_outliers(Shannon);View(b)\nc=indices_rizo2 %&gt;%group_by(Generation)%&gt;%identify_outliers(InvSimpson); View(c)\nd=indices_rizo2 %&gt;%group_by(Generation)%&gt;%identify_outliers(Pielou); View(d)\n\nindices_rizo2%&gt;% \n  filter(between(InvSimpson,\n                 quantile(InvSimpson,0.1),  \n                 quantile(InvSimpson, 0.9)))%&gt;%\n  levene_test(InvSimpson ~ Generation)\n\n#Tests\nindices_rizo2 %&gt;%  anova_test(Observed ~ Generation)\nindices_rizo2 %&gt;%  anova_test(Shannon ~ Generation)\nt1way(InvSimpson~Generation, data=indices_rizo2)\nindices_rizo2 %&gt;%  anova_test(Pielou ~ Generation)\n\n#b) ENDOSPHERE\n#b.1) South plot\n#Normality\nindices_endo1%&gt;% group_by(Generation)%&gt;% shapiro_test(Observed)\nindices_endo1%&gt;%  group_by(Generation)%&gt;%  shapiro_test(Shannon)\nindices_endo1%&gt;%  group_by(Generation)%&gt;%  shapiro_test(InvSimpson)\nindices_endo1%&gt;%  group_by(Generation)%&gt;%  shapiro_test(Pielou)\n\nx11()\nggqqplot(indices_endo1, \"InvSimpson\", ggtheme = theme_bw()) +\n  facet_grid(Generation~Plot)\n\n#Homoscedasticity\nindices_endo1 %&gt;% levene_test(Observed ~ Generation)\nindices_endo1 %&gt;% levene_test(Shannon ~ Generation)\nindices_endo1 %&gt;% levene_test(InvSimpson ~ Generation)\nindices_endo1 %&gt;% levene_test(Pielou ~ Generation)\n\n#Outliers\na=indices_endo1 %&gt;%group_by(Generation)%&gt;%identify_outliers(Observed); View(a)\nb=indices_endo1 %&gt;%group_by(Generation)%&gt;%identify_outliers(Shannon) ;View(b)\nc=indices_endo1 %&gt;%group_by(Generation)%&gt;%identify_outliers(InvSimpson); View(c)\nd=indices_endo1 %&gt;%group_by(Generation)%&gt;%identify_outliers(Pielou); View(d)\n\nindices_endo1%&gt;% \n  filter(between(InvSimpson,\n                 quantile(InvSimpson,0.1),  \n                 quantile(InvSimpson, 0.9)))%&gt;%\n  levene_test(InvSimpson ~ Generation)\n\n#Tests\nindices_endo1 %&gt;%  anova_test(Observed ~ Generation)\nindices_endo1 %&gt;%  anova_test(Shannon ~ Generation)\nt1way(InvSimpson~Generation, data=indices_endo1)\nindices_endo1 %&gt;%  anova_test(Pielou ~ Generation)\n\n#Post-hoc test: \"Observed\" resulted statistically significant, so let's apply Student's t-test\nindices_endo1%&gt;% pairwise_t_test(Observed~Generation)\n\n#b.2) North plot\nindices_endo2%&gt;% group_by(Generation)%&gt;% shapiro_test(Observed)\nindices_endo2%&gt;%  group_by(Generation)%&gt;%  shapiro_test(Shannon)\nindices_endo2%&gt;%  group_by(Generation)%&gt;%  shapiro_test(InvSimpson)\nindices_endo2%&gt;%  group_by(Generation)%&gt;%  shapiro_test(Pielou)\n\nx11()\nggqqplot(indices_endo2, \"Observed\", ggtheme = theme_bw()) +\n  facet_grid(Generation~Plot)\n\nx11()\nggqqplot(indices_endo2, \"InvSimpson\", ggtheme = theme_bw()) +\n  facet_grid(Generation ~ Plot)\n\n#Homoscedasticity\nindices_endo2 %&gt;% levene_test(Observed ~ Generation)\nindices_endo2 %&gt;% levene_test(Shannon ~ Generation)\nindices_endo2 %&gt;% levene_test(InvSimpson ~ Generation)\nindices_endo2 %&gt;% levene_test(Pielou ~ Generation)\n\n#Outliers\na=indices_endo2 %&gt;%group_by(Generation)%&gt;%identify_outliers(Observed); View(a)\nb=indices_endo2 %&gt;%group_by(Generation)%&gt;%identify_outliers(Shannon) ;View(b)\nc=indices_endo2 %&gt;%group_by(Generation)%&gt;%identify_outliers(InvSimpson); View(c)\nd=indices_endo2 %&gt;%group_by(Generation)%&gt;%identify_outliers(Pielou); View(d)\n\nindices_endo2%&gt;% \n  filter(between(InvSimpson,\n                 quantile(InvSimpson,0.1),  \n                 quantile(InvSimpson, 0.9)))%&gt;%\n  levene_test(InvSimpson ~ Generation)\n\nindices_endo2%&gt;%\n  filter(between(Pielou,\n                 quantile(Pielou,0.1),  \n                 quantile(Pielou, 0.9)))%&gt;%\n  levene_test(Pielou ~ Generation)\n\n#tests\nindices_endo2 %&gt;%  anova_test(Observed ~ Generation)\nindices_endo2 %&gt;%  anova_test(Shannon ~ Generation)\nt1way(InvSimpson~Generation, data=indices_endo2)\nt1way(Pielou~Generation, data=indices_endo2)"
  },
  {
    "objectID": "Bacteria_data_analysis.html#tmm-normalization",
    "href": "Bacteria_data_analysis.html#tmm-normalization",
    "title": "Ecological analyses of bacterial dataset",
    "section": "5.1 TMM Normalization",
    "text": "5.1 TMM Normalization\nWe are going to use this normalization for both multivariate plots and for multivariate statistics.\n\n#a) RHIZOSPHERE\n#a.1) South plot\nrizo1_ASV=as.data.frame(otu_table(rizo1,taxa_are_rows = T))#extract the ASV table from the phyloseq object\nrizo1_mt=as.data.frame(sample_data(rizo1))#extract the metadata table from the phyloseq object\nrizo1_tax=as.data.frame(tax_table(rizo1))#extract the taxonomy table from the phyloseq object\nrizo1_tree=phy_tree(rizo1)#extract the phylogenetic tree from the phyloseq object\n\n#Create a new object suitbale for the normalization by the package edgeR\nrizo1_edgeR = DGEList(counts = rizo1_ASV, samples = rizo1_mt, genes = rizo1_tax)\n#Calculate the normalization factors to correct the differences in sequencing depth\nrizo1_edgeR = calcNormFactors(rizo1_edgeR)\n#Extract the normalized abundance\nrizo1_ASV_norm = cpm(rizo1_edgeR, normalized.lib.sizes=T, log=F)\n#Create the phyloseq elements with the ASV counts normalized\nrizo1_phy_OTU_norm=otu_table(as.data.frame(rizo1_ASV_norm,row.names=F), taxa_are_rows = T)\nrizo1_phy_taxonomy_norm=tax_table(as.matrix(rizo1_tax))\nrizo1_phy_metadata_norm=sample_data(rizo1_mt)\ntaxa_names(rizo1_phy_OTU_norm)= taxa_names(rizo1_phy_taxonomy_norm)\n\nidentical(rownames(rizo1_ASV_norm), rownames(rizo1_tax))#it should give \"TRUE\"\n#Join all the elements into a new phyloseq object\nrizo1_normalized_phyloseq&lt;-phyloseq(rizo1_phy_OTU_norm, rizo1_phy_taxonomy_norm,rizo1_phy_metadata_norm,rizo1_tree)\n#a.2) North plot\nrizo2_ASV=as.data.frame(otu_table(rizo2,taxa_are_rows = T))\nrizo2_mt=as.data.frame(sample_data(rizo2))\nrizo2_tax=as.data.frame(tax_table(rizo2))\nrizo2_tree=phy_tree(rizo2)\n\nrizo2_edgeR = DGEList(counts = rizo2_ASV, samples = rizo2_mt, genes = rizo2_tax)\nrizo2_edgeR = calcNormFactors(rizo2_edgeR)\nrizo2_ASV_norm = cpm(rizo2_edgeR, normalized.lib.sizes=T, log=F)\n\nrizo2_phy_OTU_norm=otu_table(as.data.frame(rizo2_ASV_norm,row.names=F), taxa_are_rows = T)\nrizo2_phy_taxonomy_norm=tax_table(as.matrix(rizo2_tax))\nrizo2_phy_metadata_norm=sample_data(rizo2_mt)\ntaxa_names(rizo2_phy_OTU_norm)= taxa_names(rizo2_phy_taxonomy_norm)\n\nidentical(rownames(rizo2_ASV_norm), rownames(rizo2_tax))\n\nrizo2_normalized_phyloseq&lt;-phyloseq(rizo2_phy_OTU_norm,rizo2_phy_taxonomy_norm,rizo2_phy_metadata_norm,rizo2_tree)\n\n#b)ENDOSPHERE\n#b.1) South plot\nendo1_ASV=as.data.frame(otu_table(endo1,taxa_are_rows = T))\nendo1_mt=as.data.frame(sample_data(endo1))\nendo1_tax=as.data.frame(tax_table(endo1))\nendo1_tree=phy_tree(endo1)\n\nendo1_edgeR = DGEList(counts = endo1_ASV, samples = endo1_mt, genes = endo1_tax)\nendo1_edgeR = calcNormFactors(endo1_edgeR)\nendo1_ASV_norm = cpm(endo1_edgeR, normalized.lib.sizes=T, log=F)\nendo1_phy_OTU_norm=otu_table(as.data.frame(endo1_ASV_norm,row.names=F), taxa_are_rows = T)\nendo1_phy_taxonomy_norm=tax_table(as.matrix(endo1_tax))\nendo1_phy_metadata_norm=sample_data(endo1_mt)\ntaxa_names(endo1_phy_OTU_norm)= taxa_names(endo1_phy_taxonomy_norm)\n\nidentical(rownames(endo1_ASV_norm), rownames(endo1_tax))\n\nendo1_normalized_phyloseq&lt;-phyloseq(endo1_phy_OTU_norm,endo1_phy_taxonomy_norm,endo1_phy_metadata_norm,endo1_tree)\n\n#b.2) North plot\nendo2_ASV=as.data.frame(otu_table(endo2,taxa_are_rows = T))\nendo2_mt=as.data.frame(sample_data(endo2))\nendo2_tax=as.data.frame(tax_table(endo2))\nendo2_tree=phy_tree(endo2)\n\nendo2_edgeR = DGEList(counts = endo2_ASV, samples = endo2_mt, genes = endo2_tax)\nendo2_edgeR = calcNormFactors(endo2_edgeR)\nendo2_ASV_norm = cpm(endo2_edgeR, normalized.lib.sizes=T, log=F)\nendo2_phy_OTU_norm=otu_table(as.data.frame(endo2_ASV_norm,row.names=F), taxa_are_rows = T)\nendo2_phy_taxonomy_norm=tax_table(as.matrix(endo2_tax))\nendo2_phy_metadata_norm=sample_data(endo2_mt)\n\ntaxa_names(endo2_phy_OTU_norm)= taxa_names(endo2_phy_taxonomy_norm)\n\nidentical(rownames(endo2_ASV_norm), rownames(endo2_tax))\n\nendo2_normalized_phyloseq&lt;-phyloseq(endo2_phy_OTU_norm,endo2_phy_taxonomy_norm,endo2_phy_metadata_norm,endo2_tree)"
  },
  {
    "objectID": "Bacteria_data_analysis.html#multivariate-statistical-tests",
    "href": "Bacteria_data_analysis.html#multivariate-statistical-tests",
    "title": "Ecological analyses of bacterial dataset",
    "section": "5.2 Multivariate statistical tests",
    "text": "5.2 Multivariate statistical tests\nThe best options to test whether the groups of samples have the same dispersion is to apply the test PERMDISP2, while PERMANOVA (Permutational Multivariate Analysis of Variance Using Distance Matrices) is a test suitable to check whether the centroid (concept similar to the mean of groups of samples) of all the groups of samples to be compared is homogenus. Thus, these tests are the multivariate version of Levene’s and ANOVA tests. However, both of them are based on distance matrices. That is to say, we have to calculate the distance between all sample pairs. There are many different distance or dissimilarity measures, but here we are going to use Weighted UniFrac distance, because it is based on both the phylogenetic proximity among ASVs and on their abundance.\nNull hypotheses of both tests: PERMANOVA H0: no significant differences in the centroids (mean values) of the groups of samples PERMDISPD2 H0: no significant differences in the dispersion of the groups of samples\n\n\n\n\n\n\nImportant\n\n\n\nBe careful with unbalanced experiments. As stated Anderson and Walsh (2013), when the groups of samples to be compared have different number of replicates (unbalanced design), heterocedasticity becomes a problem. In that cases, PERMANOVA cannot distinguish between the differences between groups of samples are due to the different dispersion or due to differences in the centroids. So, in case of unbalances designs, it is superimportant to check the dispersion of the data.\n\n\n\n#a) RHIZOSPHERE\n\n#a.1) South plot\n\ndf_r1=data.frame(sample_data(rizo1_normalized_phyloseq))#extract the metadata table from the phyloseq object (NORMALIZED phyloseq!)\nwuni_r1=UniFrac(rizo1_normalized_phyloseq, weighted=T)#calculate Weighted UniFrac distances\n\nadonis_rizo1=adonis(wuni_r1~Condition*Year, data=df_r1, permutations = 9999)#apply the PERMANOVA test. Here we test the model Community structure~Plant type*Sampling year\nadonis_rizo1#check the results\n\nbetadisper_r1condition=betadisper(wuni_r1, df_r1$Condition)#check the betadispersion of each factor separately\npermutest(betadisper_r1condition)\n\nbetadisper_r1year=betadisper(wuni_r1, df_r1$Year)\npermutest(betadisper_r1year)\n\n#North plot\ndf_r2=data.frame(sample_data(rizo2_normalized_phyloseq))\nwuni_r2=UniFrac(rizo2_normalized_phyloseq, weighted=T)\nadonis_rizo2=adonis2(wuni_r2~Condition*Year, data=df_r2, permutations = 9999)\nadonis_rizo2\n\nbetadisper_r2condition=betadisper(wuni_r2, df_r2$Condition)\npermutest(betadisper_r2condition)\n\nbetadisper_r2year=betadisper(wuni_r2, df_r2$Year)\npermutest(betadisper_r2year)\n\n#b) ENDOSPHERE\n#b.1) South plot\ndf_e1=data.frame(sample_data(endo1_normalized_phyloseq))\nwuni_e1=UniFrac(endo1_normalized_phyloseq, weighted=T)\nadonis_endo1=adonis2(wuni_e1~Condition*Year, data=df_e1, permutations = 9999)\nadonis_endo1\n\nbetadisper_e1condition=betadisper(wuni_e1, df_e1$Condition)\npermutest(betadisper_e1condition)\n\nbetadisper_e1year=betadisper(wuni_e1, df_e1$Year)\npermutest(betadisper_e1year)\n\n#b.2) North plot\ndf_e2=data.frame(sample_data(endo2_normalized_phyloseq))\nwuni_e2=UniFrac(endo2_normalized_phyloseq, weighted=T)\nadonis_endo2=adonis2(wuni_e2~Condition*Year, data=df_e2, permutations = 9999)\nadonis_endo2\n\nbetadisper_e2condition=betadisper(wuni_e2, df_e2$Condition)\npermutest(betadisper_e2condition)\n\nbetadisper_e2year=betadisper(wuni_e2, df_e2$Year)\npermutest(betadisper_e2year)\n\n#Let's calculate the size of the effects:\nadonis_OmegaSq &lt;- function(adonisOutput, partial = TRUE){\n  if(!(is(adonisOutput, \"adonis\") || is(adonisOutput, \"anova.cca\")))\n    stop(\"Input should be an adonis object\")\n  if (is(adonisOutput, \"anova.cca\")) {\n    aov_tab &lt;- adonisOutput\n    aov_tab$MeanSqs &lt;- aov_tab$SumOfSqs / aov_tab$Df\n    aov_tab$MeanSqs[length(aov_tab$Df)] &lt;- NA\n  } else {\n    aov_tab &lt;- adonisOutput$aov.tab\n  }\n  heading &lt;- attr(aov_tab, \"heading\")\n  MS_res &lt;- aov_tab[pmatch(\"Residual\", rownames(aov_tab)), \"MeanSqs\"]\n  SS_tot &lt;- aov_tab[rownames(aov_tab) == \"Total\", \"SumsOfSqs\"]\n  N &lt;- aov_tab[rownames(aov_tab) == \"Total\", \"Df\"] + 1\n  if(partial){\n    omega &lt;- apply(aov_tab, 1, function(x) (x[\"Df\"]*(x[\"MeanSqs\"]-MS_res))/(x[\"Df\"]*x[\"MeanSqs\"]+(N-x[\"Df\"])*MS_res))\n    aov_tab$parOmegaSq &lt;- c(omega[1:(length(omega)-2)], NA, NA)\n  } else {\n    omega &lt;- apply(aov_tab, 1, function(x) (x[\"SumsOfSqs\"]-x[\"Df\"]*MS_res)/(SS_tot+MS_res))\n    aov_tab$OmegaSq &lt;- c(omega[1:(length(omega)-2)], NA, NA)\n  }\n  if (is(adonisOutput, \"adonis\"))\n    cn_order &lt;- c(\"Df\", \"SumsOfSqs\", \"MeanSqs\", \"F.Model\", \"R2\",\n                  if (partial) \"parOmegaSq\" else \"OmegaSq\", \"Pr(&gt;F)\")\n  else\n    cn_order &lt;- c(\"Df\", \"SumOfSqs\", \"F\", if (partial) \"parOmegaSq\" else \"OmegaSq\",\n                  \"Pr(&gt;F)\")\n  aov_tab &lt;- aov_tab[, cn_order]\n  attr(aov_tab, \"names\") &lt;- cn_order\n  attr(aov_tab, \"heading\") &lt;- heading\n  if (is(adonisOutput, \"adonis\"))\n    adonisOutput$aov.tab &lt;- aov_tab\n  else\n    adonisOutput &lt;- aov_tab\n  return(adonisOutput)\n}\nadonis_OmegaSq(adonis_rizo1)#apply just in that cases in which PERMANOVA gives significant results\nadonis_OmegaSq(adonis_endo1)\nadonis_OmegaSq(adonis_endo2)\n\nNow, let’s compare the structure of bacterial communities of mothers, first and second suckers:\n\n#a) RHIZOSPHERE\n#a.1) South plot\nadonis_rizo1_generation=adonis2(wuni_r1~Generation, data=df_r1, permutations = 9999)\nadonis_rizo1_generation\n\nbetadisper_rizo1_generation=betadisper(wuni_r1, df_r1$Generation)\npermutest(betadisper_rizo1_generation)\n\n#a.2) North plot\nadonis_rizo2_generation=adonis2(wuni_r2~Generation, data=df_r2, permutations = 9999)\nadonis_rizo2_generation\n\nbetadisper_rizo2_generation=betadisper(wuni_r2, df_r2$Generation)\npermutest(betadisper_rizo2_generation)\n\n#b) ENDOSPHERE\n#b.1) South plot\nadonis_endo1_generation=adonis2(wuni_e1~Generation, data=df_e1, permutations = 9999)\nadonis_endo1_generation\nbetadisper_endo1_generation=betadisper(wuni_e1, df_e1$Generation)\npermutest(betadisper_endo1_generation)\n\n#b.2) North plot\nadonis_endo2_generation=adonis2(wuni_e2~Generation, data=df_e2, permutations = 9999)\nadonis_endo2_generation\nadonis_OmegaSq(adonis_endo2)#pass this function since significant differences were found\n\nbetadisper_endo2_generation=betadisper(wuni_e2, df_e2$Generation)\npermutest(betadisper_endo2_generation)\n\n#Apply the following function as post-hoc test. The following code will perform PERMANOVA between two groups of samples (A vs. B; A vs C; B vs C). It is just a wrapping-around function\npairwise.adonis(wuni_e2, phyloseq::sample_data(endo2)$Generation, p.adjust.m = \"holm\")"
  },
  {
    "objectID": "Bacteria_data_analysis.html#ordination-plots",
    "href": "Bacteria_data_analysis.html#ordination-plots",
    "title": "Ecological analyses of bacterial dataset",
    "section": "5.3 Ordination plots",
    "text": "5.3 Ordination plots\nThere are several options to visualize the results of PERMANOVA tests, for instance, by ordination plots such as PCoA (Principal Coordinate Analysis), NMDS (Non-metric MultiDimenstional Scaling), PCA (Principal Component Analysis), among others. Theses graphs are very useful because help us to detect the differences in the structure of the microbiota among groups of samples. Both PCoA and NMDS are based on non-euclidean distances or dissimilarity measures, so we consider that they are the best options for microbiota analyses.\nOne the one hand, PCoA plots represent in two dimensions the arrangement of the samples in the multivariate space, although the percentage of the total variance is commonly explained by many dimensions. On the other hand, NMDS approach “forces” the samples to be ordinated in just two dimensions, although this forced arrangement has an associated stress. We tolerate stress values lower than 0.2.\nWe recommend calculating both ordination plots with the aim of selecting the option that best represents the results of PERMANOVA analyses.\n\n#a) RHIZOSPHERE\n#a.1) South plot\nNMDS_wuni_rizo1= ordinate(rizo1_normalized_phyloseq, \"NMDS\", \"wunifrac\")#indicate the ordination plot and the distance\nprint(paste(\"The stress of the NMDS based on Weighted Unifrac is:\", NMDS_wuni_rizo1$stress))#this shows the stress of the NMDS\n\nPCOA_wuni_rizo1 = ordinate(rizo1_normalized_phyloseq, \"PCoA\", \"wunifrac\")\npeso_r1w=PCOA_wuni_rizo1$values$Relative_eig[1:2]\npeso_r1w #This shows the percentage of the total variance explained by just the first and second axes\n\n#a.2) North plot\nNMDS_wuni_rizo2= ordinate(rizo2_normalized_phyloseq, \"NMDS\", \"wunifrac\")#indicate the ordination plot and the distance\nprint(paste(\"The stress of the NMDS based on Weighted Unifrac is:\", NMDS_wuni_rizo2$stress))#this shows the stress of the NMDS\n\nPCOA_wuni_rizo2 = ordinate(rizo2_normalized_phyloseq, \"PCoA\", \"wunifrac\")\npeso_r2w=PCOA_wuni_rizo2$values$Relative_eig[1:2]\npeso_r2w #This shows the percentage of the total variance explained by just the first and second axes\n\n#b) ENDOSPHERE\n#b.1) South plot\nNMDS_wuni_endo1= ordinate(endo1_normalized_phyloseq, \"NMDS\", \"wunifrac\")\nprint(paste(\"The stress of the NMDS based on Weighted Unifrac is:\", NMDS_wuni_endo1$stress))\n\nPCOA_wuni_endo1 = ordinate(endo1_normalized_phyloseq, \"PCoA\", \"wunifrac\")\npeso_e1w=PCOA_wuni_endo1$values$Relative_eig[1:2]\npeso_e1w\n\n#b.2) North plot\nNMDS_wuni_endo2= ordinate(endo2_normalized_phyloseq, \"NMDS\", \"wunifrac\")\nprint(paste(\"The stress of the NMDS based on Weighted Unifrac is:\", NMDS_wuni_endo2$stress))\n\nPCOA_wuni_endo2 = ordinate(endo2_normalized_phyloseq, \"PCoA\", \"wunifrac\")\npeso_e2w=PCOA_wuni_endo1$values$Relative_eig[1:2]\npeso_e2w\n\nOnce these values of stress and the weight of the axes are obtained, we should choose which option is the most suitable for our dataset. Although you can also use both method in your research paper. In this case, we selected PCoA plots because we obtained relatively high values of NMDS stress (&gt;0.13). It is easy to understand: our data are probably multidimensional are complex due to the high diversity and richness of the data, so it is easy to have high stress when forcing the data to fit just into two dimensions.\nLet’s obtain the plot:\n\n#a)RHIZOSPHERE\n#a.1) South plot\np_rizo1_pcoa= plot_ordination(rizo1_normalized_phyloseq, PCOA_wuni_rizo1,type= \"samples\", color= \"Condition\", shape = \"Year\")+#to color by \"Condition\" and shape by \"Year\"\n  geom_hline(aes(yintercept = c(0.00)), lty=2, colour=\"grey\")+\n  geom_vline(aes(xintercept = c(0.00)), lty=2, colour=\"grey\")+\n  geom_point(alpha = 4, size = 1.5)+\n  labs(x=paste0(\"Axis 1 (\",round(peso_r1w[1]*100,digits = 2),\"%)\"), #write the weight of each axis with two decimals\n       y=paste0(\"Axis 2 (\",round(peso_r1w[2]*100,digits = 2),\"%)\"))+\n  scale_color_manual(values = c(\"Immature\"=\"cornflowerblue\",\"Mature\"=\"darkgreen\"),\n                     breaks=c(\"Immature\", \"Mature\"),\n                     labels=c(\"Suckers\", \"Mothers\"))+\n  scale_shape_manual(values=c(\"A\"=16, \"B\"=17),\n                     breaks=c(\"A\", \"B\"),\n                     labels=c(\"2022\", \"2023\"))+\n  theme_bw()+\n  theme(legend.key=element_blank(),\n        legend.title.align = 0,\n        legend.title = element_text(face=\"bold\",size=5),\n        legend.title=element_blank(),\n        legend.text.align = 0,\n        axis.text = element_text(size=7),\n        axis.title = element_text(size = 5),\n        plot.title = element_text(hjust=0.5, face=\"bold\",size=5),\n        legend.text = element_text(size = 5),\n        legend.position = \"right\") + \n  \n  ggtitle(\"South Plot\")+\n  guides(color=guide_legend(ncol=2))+\n  guides(shape=guide_legend(ncol = 2))+\n  scale_x_continuous(limits = c(-0.2, 0.25))+\n  scale_y_continuous(limits = c(-0.15, 0.1))\nx11()\np_rizo1_pcoa\n\n#a.2) North plot\np_rizo2_pcoa= plot_ordination(rizo2_normalized_phyloseq, PCOA_wuni_rizo2,type= \"samples\", color= \"Condition\", shape = \"Year\")+\n  geom_hline(aes(yintercept = c(0.00)), lty=2, colour=\"grey\")+\n  geom_vline(aes(xintercept = c(0.00)), lty=2, colour=\"grey\")+\n  geom_point(alpha = 4, size = 1.5)+\n  labs(x=paste0(\"Axis 1 (\",round(peso_r2w[1]*100,digits = 2),\"%)\"), \n       y=paste0(\"Axis 2 (\",round(peso_r2w[2]*100,digits = 2),\"%)\"))+\n  scale_color_manual(values = c(\"Immature\"=\"magenta\",\"Mature\"=\"darkolivegreen2\"),\n                     breaks=c(\"Immature\", \"Mature\"),\n                     labels=c(\"Suckers\", \"Mothers\"))+\n  scale_shape_manual(values=c(\"A\"=16, \"B\"=17),\n                     breaks=c(\"A\", \"B\"),\n                     labels=c(\"2022\", \"2023\"))+\n  theme_bw()+\n  theme(legend.key=element_blank(),\n        legend.title.align = 0,\n        legend.title = element_text(face=\"bold\",size=5),\n        legend.title=element_blank(),\n        legend.text.align = 0,\n        axis.text = element_text(size=7),\n        axis.title = element_text(size = 5),\n        plot.title = element_text(hjust=0.5, face=\"bold\",size=5),\n        legend.text = element_text(size = 5),\n        legend.position = \"right\") + \n  \n  ggtitle(\"North Plot\")+\n  guides(color=guide_legend(ncol=2))+\n  guides(shape=guide_legend(ncol = 2))+\n  scale_x_continuous(limits = c(-0.2, 0.2))+\n  scale_y_continuous(limits = c(-0.1, 0.15))\n\nx11()\np_rizo2_pcoa\n\n#b) ENDOSPHERE\n#b.1) South plot\np_endo1_pcoa= plot_ordination(endo1_normalized_phyloseq, PCOA_wuni_endo1,type= \"samples\", color= \"Condition\", shape = \"Year\")+\n  geom_hline(aes(yintercept = c(0.00)), lty=2, colour=\"grey\")+\n  geom_vline(aes(xintercept = c(0.00)), lty=2, colour=\"grey\")+\n  geom_point(alpha = 4, size = 1.5)+\n  labs(x=paste0(\"Axis 1 (\",round(peso_e1w[1]*100,digits = 2),\"%)\"), \n          y=paste0(\"Axis 2 (\",round(peso_e1w[2]*100,digits = 2),\"%)\"))+\n  scale_color_manual(values = c(\"Immature\"=\"#00CCFF\",\"Mature\"=\"green\"),\n                       breaks=c(\"Immature\", \"Mature\"),\n                       labels=c(\"Suckers\", \"Mothers\"))+\n  scale_shape_manual(values=c(\"A\"=16, \"B\"=17),\n                                breaks=c(\"A\", \"B\"),\n                                labels=c(\"2022\", \"2023\"))+\n  theme_bw()+\n  theme(legend.key=element_blank(),\n          legend.title.align = 0,\n          legend.title = element_text(face=\"bold\",size=5),\n        legend.title=element_blank(),\n          legend.text.align = 0,\n          axis.text = element_text(size=7),\n          axis.title = element_text(size = 5),\n          plot.title = element_text(hjust=0.5, face=\"bold\",size=5),\n          legend.text = element_text(size = 5),\n          legend.position = \"right\") + \n  \n  ggtitle(\"South Plot\")+\n  guides(color=guide_legend(ncol=2))+\n  guides(shape=guide_legend(ncol = 2))+\n  scale_x_continuous(limits = c(-0.4, 0.25))+\n  scale_y_continuous(limits = c(-0.2, 0.2))\n\nx11()\np_endo1_pcoa\n\n#b.2) North plot\np_endo2_pcoa= plot_ordination(endo2_normalized_phyloseq, PCOA_wuni_endo2,type= \"samples\", color= \"Condition\", shape = \"Year\")+\n  geom_hline(aes(yintercept = c(0.00)), lty=2, colour=\"grey\")+\n  geom_vline(aes(xintercept = c(0.00)), lty=2, colour=\"grey\")+\n  geom_point(alpha = 4, size = 1.5)+\n  labs(x=paste0(\"Axis 1 (\",round(peso_e2w[1]*100,digits = 2),\"%)\"), \n       y=paste0(\"Axis 2 (\",round(peso_e2w[2]*100,digits = 2),\"%)\"))+\n  scale_color_manual(values = c(\"Immature\"=\"blueviolet\",\"Mature\"=\"aquamarine\"),\n                     breaks=c(\"Immature\", \"Mature\"),\n                     labels=c(\"Suckers\", \"Mothers\"))+\n  scale_shape_manual(values=c(\"A\"=16, \"B\"=17),\n                     breaks=c(\"A\", \"B\"),\n                     labels=c(\"2022\", \"2023\"))+\n  theme_bw()+\n  theme(legend.key=element_blank(),\n        legend.title.align = 0,\n        legend.title = element_text(face=\"bold\",size=5),\n        legend.title=element_blank(),\n        legend.text.align = 0,\n        axis.text = element_text(size=7),\n        axis.title = element_text(size = 5),\n        plot.title = element_text(hjust=0.5, face=\"bold\",size=5),\n        legend.text = element_text(size = 5),\n        legend.position = \"right\") + \n  ggtitle(\"North Plot\")+\n  guides(color=guide_legend(ncol=2))+\n  guides(shape=guide_legend(ncol = 2))+\n  scale_x_continuous(limits = c(-0.3, 0.3))+\n  scale_y_continuous(limits = c(-0.2, 0.3))\n\nx11()\np_endo2_pcoa"
  },
  {
    "objectID": "Bacteria_data_analysis.html#phylum-level",
    "href": "Bacteria_data_analysis.html#phylum-level",
    "title": "Ecological analyses of bacterial dataset",
    "section": "6.1 Phylum level",
    "text": "6.1 Phylum level\n\n6.1.1. Obtaining tables with the relative abundance and standard deviation values\nWe are going to obtain the relative abundance of each phylum detected in our samples.\n\nphylum_relabun=tax_glom(phy_data_relabun, taxrank = \"Phylum\")#aglomerate at Phylum level\ncolSums(otu_table(phylum_relabun)) #check that the relative abundance sums 100% in all cases\n\n#Now we are going to create a table with the relative abundance of each taxa in each replicate so that we can work on it, for instance, in Excel\na=as.data.frame(otu_table(phylum_relabun))\naa=cbind(tax_table(phylum_relabun),a)\nidentical(rownames(a),rownames(aa))#it should give \"TRUE\"\nwrite.table(data.frame(\"TAXA\"=rownames(aa),aa),file=\"abundrel_phylum_porReplicas.txt\", sep=\"\\t\",row.names =F)\n\n#Another table, with the mean and standard deviation of the relative abundance of each phylum:\ntable_phylum = a[,] %&gt;% t() %&gt;% as.data.frame()\ntax_phylum=tax_table(phylum_relabun)\n\nphylum_media=aggregate(table_phylum, by=list(as.data.frame(sample_data(phylum_relabun))$Fusion), FUN=mean)%&gt;% column_to_rownames(\"Group.1\") %&gt;% t()#calculate the mean values of the relative abundance of each phylum in each group of samples \n\nphylum_sd =aggregate(table_phylum, by=list(as.data.frame(sample_data(phylum_relabun))$Fusion), FUN=sd)%&gt;% column_to_rownames(\"Group.1\")  %&gt;% t()  %&gt;% \n  as.data.frame() %&gt;% rename_with(.fn= ~paste0(colnames(phylum_media), \"_SD\"))#calculate the standard deviation of the relative abundance of each phylum in each group of samples \n\nphylum_media_sd=merge(tax_phylum, phylum_media, by=0) %&gt;%column_to_rownames(\"Row.names\") %&gt;%\n  merge(phylum_sd, by=0) %&gt;% column_to_rownames(\"Row.names\")#bind mean and sd values into one table\n\nwrite.table(data.frame(\"TAXA\"=rownames(phylum_media_sd),phylum_media_sd), file=\"abundrel_media_sd_phylum.txt\", sep=\"\\t\",row.names =F)\n\n\n\n6.1.2. Plotting\nWe are going to make a stacked bars plot, just indicating the most abundant phyla\nFirstly, we have to prepare the data and modify the table so that we can obtain tables suitable for the plotting with the package ggplot2.\n\ndf_melt_phylum = psmelt(physeq = phylum_relabun) #transform the phyloseq object into a dataframe in which the abundance of each phylum is in rows\ncolnames(df_melt_phylum) # check the content of the dataframe\n\n#Here we aggregate the data by the factor we indicate in the argument \"by\".\ndf_melt_aggreg1 = aggregate(df_melt_phylum$Abundance, \n                            by=list(Group=df_melt_phylum$Fusion, \n                                    Sample=df_melt_phylum$Sample,Phylum=df_melt_phylum$Phylum,\n                                                              Compartment=df_melt_phylum$Compartment,\n                                    Plot=df_melt_phylum$Plot, Year=df_melt_phylum$Year, Condition=df_melt_phylum$Condition), FUN=sum)#it sums the abundance of each phylum in all the replicates corresponding to the same group of samples\ncolnames(df_melt_aggreg1)=c(\"Group\", \"Sample\", \"Phylum\",\"Compartment\",\"Plot\",\"Year\",\"Condition\",\"Abundance\")#rename the columns\ncolnames(df_melt_aggreg1)\n\ndf_melt_aggreg_mean = aggregate(df_melt_aggreg1$Abundance, by=list(Group=df_melt_aggreg1$Group, \n                                                                   Phylum=df_melt_aggreg1$Phylum,\n                                                                   Compartment=df_melt_aggreg1$Compartment,\n                                                                   Plot=df_melt_aggreg1$Plot, Year=df_melt_aggreg1$Year,Condition=df_melt_aggreg1$Condition), FUN=mean)#now, it makes the mean relative abundance of each phylum in each group of samples\ncolnames(df_melt_aggreg_mean)&lt;-c(\"Group\", \"Phylum\",\"Compartment\", \"Plot\",\"Year\",\"Condition\",\"Abundance\")\ncolnames(df_melt_aggreg_mean)\n\n\n#repeat the same with the standard deviation\ndf_melt_aggreg_sd=aggregate(df_melt_aggreg1$Abundance, by=list(Group=df_melt_aggreg1$Group, \n                                                               Phylum=df_melt_aggreg1$Phylum,\n                                                               Compartment=df_melt_aggreg1$Compartment,\n                                                               Plot=df_melt_aggreg1$Plot, Year=df_melt_aggreg1$Year,Condition=df_melt_aggreg1$Condition), FUN=sd)\ncolnames(df_melt_aggreg_sd)=c(\"Group\", \"Phylum\",\"Compartment\",\"Plot\",\"Year\",\"Condition\",\"sd\")\n\n\n#check whether the groups of samples and the name of the phyla is the same in both mean and sd table\nall(df_melt_aggreg_mean$Group==df_melt_aggreg_sd$Group)#it should give \"TRUE\"\nall(df_melt_aggreg_mean$Phylum==df_melt_aggreg_sd$Phylum)\n\n#Now, add the sd values in the table of mean values\ndf_melt_aggreg_mean$sd=df_melt_aggreg_sd$sd \n\nmedia_sd_phylum_todos=df_melt_aggreg_mean\n\nNow, we are ready to plot the mean relative abundances. We want to order the phyla by ascending relative abundance, keeping the unclassified and minor phyla in the upper part of the plot.\n\n#a) RHIZOSPHERE\n#a.1) South plot\nmedia_sd_phylum_Rizo=media_sd_phylum_todos[media_sd_phylum_todos[,\"Compartment\"] == \"Rhizosphere\",]#subset the dataset\nmedia_sd_phylum_Rizo1=media_sd_phylum_Rizo[media_sd_phylum_Rizo[,\"Plot\"] == \"Plot1\",]\n\n#aggregate all the phyla that were not classified\nmedia_sd_phylum_Rizo1$Phylum=as.character(media_sd_phylum_Rizo1$Phylum)\nunclassified_rizo1=media_sd_phylum_Rizo1[media_sd_phylum_Rizo1[,\"Phylum\"] == \"unclassified\",] #save them into a new variable\nmedia_sd_phylum_Rizo1=media_sd_phylum_Rizo1[media_sd_phylum_Rizo1[,\"Phylum\"] != \"unclassified\",] #remove the unclassified phyla from the original dataset\n\n#aggregate all the phyla that account less than 1% into an artificial group named \"Other phyla &lt;1%\"\nmedia_sd_phylum_Rizo1$Phylum[media_sd_phylum_Rizo1$Abundance &lt;= 1.0] = \"Other phyla (&lt;1%)\"\nmedia_sd_phylum_Rizo1$Phylum=as.factor(media_sd_phylum_Rizo1$Phylum)\nothers_rizo1=media_sd_phylum_Rizo1[media_sd_phylum_Rizo1[,\"Phylum\"] == \"Other phyla (&lt;1%)\",]#save the \"other phyla\" into a new variable\nmedia_sd_phylum_Rizo1=media_sd_phylum_Rizo1[media_sd_phylum_Rizo1[,\"Phylum\"] != \"Other phyla (&lt;1%)\",]#remove them from the original dataset\n\n#Now, the minor and unclassified phyla are not included in the original dataset, so let's order by abundance the remaining phyla\nordenado_rizo1=media_sd_phylum_Rizo1[order(media_sd_phylum_Rizo1$Abundance, decreasing=T),] #order by relative abundance\nordenado_rizo1=rbind(ordenado_rizo1,others_rizo1,unclassified_rizo1)#now add the minor phyla and the unclassified\n\ngroup_label_rizo1=c(\"Mature\",\"Immature\", \"Mature\",\"Immature\")#set the labels\nlevels_rizo1=c(\"A_Plot1_Mature_Rhizosphere\",\"A_Plot1_Immature_Rhizosphere\",\"B_Plot1_Mature_Rhizosphere\",\"B_Plot1_Immature_Rhizosphere\")#set the levels of the graph\nlimits_rizo1=c(\"A_Plot1_Mature_Rhizosphere\",\"A_Plot1_Immature_Rhizosphere\",\"B_Plot1_Mature_Rhizosphere\",\"B_Plot1_Immature_Rhizosphere\")#set the limits of the graph\n\nphyl_name_ordered_rizo1=as.vector(ordenado_rizo1$Phylum)\nnombres_unicos_rizo1=unique(phyl_name_ordered_rizo1)#get the levels (=the names of the phyla )of the factor \"Phylum\", and show them just once regardless of their abundance and prevalence)\nordenado_rizo1$Phylum=reorder.factor(ordenado_rizo1$Phylum,new.order=rev(nombres_unicos_rizo1))#order the name of the phyla\nlab_unicos_rizo1=nombres_unicos_rizo1 \n\nsorted_labels_ggplot_rizo1 &lt;- sapply(lab_unicos_rizo1,\n                                    function(x) if (x == \"Other phyla (&lt;1%)\"|x == \"unclassified\"|x == \"Other genera (&lt;1%)\")\n                                    {parse(text=paste0(\"'\", as.character(x), \"'\"))} else {parse(text = paste0(\"italic('\",as.character(x), \"')\"))})\n#this function helps us to write the name of the phyla (and genera) in italics and the name of the minor phyla and unclassified without italics\n\ncolores_rizo1 = c(\"#0099FF\", \"#9933FF\",\"#00CC00\",\"red\", \"brown\",\"#FF00FF\",\"darkolivegreen\",\n                \"#FFFF00\",\"grey\", \"black\")#choose the colors of specific phyla\n\nlength(lab_unicos_rizo1)==length(colores_rizo1)  #in case of \"FALSE\", check the number of phyla and the number of colors. Establish as many colors as number of phyla (including the groups of minor and unclassified phyla)\nlength(lab_unicos_rizo1)\nlength(colores_rizo1)\n\ntitulo_plot_rizo1=\"Plot 1\"\n\np_rizo_1_phylum=ggplot(ordenado_rizo1, aes(x=Group, y=Abundance, fill=Phylum, order=Phylum)) + geom_bar(stat=\"identity\", position=\"stack\")+\n  scale_fill_manual(values=colores_rizo1,\n                    labels=sorted_labels_ggplot_rizo1,\n                    breaks=nombres_unicos_rizo1)+\n  labs(y=\"Mean relative abundance (%)\", x=NULL, fill=\"Phylum\",title=titulo_plot_rizo1)+\n  guides(fill = guide_legend(reverse = TRUE))+\n scale_x_discrete(limits=limits_rizo1,labels=group_label_rizo1,\n                  breaks=levels_rizo1)+\n  scale_y_continuous(expand=c(0.01,0.01),\n                     breaks=c(0,10,20,30,40,50,60,70,80,90,100),\n                     labels=c(\"0\",\"10\", \"20\",\"30\",\"40\",\"50\",\"60\",\"70\",\"80\",\"90\",\"100\"),\n                     limits = c(NA, 100))+\n  theme_bw()+\n  theme(panel.border = element_rect(colour=\"black\"))+\n  theme(axis.title.x=element_blank())+\n  theme(plot.title = element_text(face=\"bold\", hjust = 0.5, size=16))+\n  theme(axis.text = element_text(size = 14))+\n  theme(axis.text.x = element_text(face=\"bold\", size=16))+\n  theme(axis.title.y = element_text(size = 16))+\n  theme(legend.key.size = unit(0.9, \"cm\"))+\n  theme(legend.text = element_text(size = 18))+\n  theme(legend.title = element_text(size=18, face=\"bold\"))+\n  theme(legend.title.align=0)+\n  theme(legend.text.align = 0) \n\nx11()\np_rizo_1_phylum\n\n#a.2) North plot\nmedia_sd_phylum_Rizo=media_sd_phylum_todos[media_sd_phylum_todos[,\"Compartment\"] == \"Rhizosphere\",]\nmedia_sd_phylum_Rizo2=media_sd_phylum_Rizo[media_sd_phylum_Rizo[,\"Plot\"] == \"Plot2\",]\n\nmedia_sd_phylum_Rizo2$Phylum=as.character(media_sd_phylum_Rizo2$Phylum)\nunclassified_rizo2=media_sd_phylum_Rizo2[media_sd_phylum_Rizo2[,\"Phylum\"] == \"unclassified\",] \nmedia_sd_phylum_Rizo2=media_sd_phylum_Rizo2[media_sd_phylum_Rizo2[,\"Phylum\"] != \"unclassified\",] \n\nmedia_sd_phylum_Rizo2$Phylum[media_sd_phylum_Rizo2$Abundance &lt;= 1.0] = \"Other phyla (&lt;1%)\" \nmedia_sd_phylum_Rizo2$Phylum=as.factor(media_sd_phylum_Rizo2$Phylum)\nothers_rizo2=media_sd_phylum_Rizo2[media_sd_phylum_Rizo2[,\"Phylum\"] == \"Other phyla (&lt;1%)\",]\nmedia_sd_phylum_Rizo2=media_sd_phylum_Rizo2[media_sd_phylum_Rizo2[,\"Phylum\"] != \"Other phyla (&lt;1%)\",]\n\nordenado_rizo2=media_sd_phylum_Rizo2[order(media_sd_phylum_Rizo2$Abundance, decreasing=T),] \nordenado_rizo2=rbind(ordenado_rizo2,others_rizo2,unclassified_rizo2)\n\ngroup_label_rizo2=c(\"Mature\",\"Immature\", \"Mature\",\"Immature\")\nlevels_rizo2=c(\"A_Plot2_Mature_Rhizosphere\",\"A_Plot2_Immature_Rhizosphere\",\"B_Plot2_Mature_Rhizosphere\",\n               \"B_Plot2_Immature_Rhizosphere\")\nlimits_rizo2=c(\"A_Plot2_Mature_Rhizosphere\",\"A_Plot2_Immature_Rhizosphere\",\"B_Plot2_Mature_Rhizosphere\",\n               \"B_Plot2_Immature_Rhizosphere\")\n\nphyl_name_ordered_rizo2=as.vector(ordenado_rizo2$Phylum)\nnombres_unicos_rizo2=unique(phyl_name_ordered_rizo2)\n\nordenado_rizo2$Phylum=reorder.factor(ordenado_rizo2$Phylum,new.order=rev(nombres_unicos_rizo2))\nlab_unicos_rizo2=nombres_unicos_rizo2\n\nsorted_labels_ggplot_rizo2 &lt;- sapply(lab_unicos_rizo2,\n                                     function(x) if (x == \"Other phyla (&lt;1%)\"|x == \"unclassified\"|x == \"Other genera (&lt;1%)\")\n                                     {parse(text=paste0(\"'\", as.character(x), \"'\"))} else {parse(text = paste0(\"italic('\",as.character(x), \"')\"))})\n\n\ncolores_rizo2 = c(\"#0099FF\", \"#00CC00\", \"#9933FF\",\"red\",\"#FF00FF\",\n                  \"brown\",\"#FFFF00\",\"blue\",\"grey\", \"black\")\n\nlength(lab_unicos_rizo2)==length(colores_rizo2) \nlength(lab_unicos_rizo2)\nlength(colores_rizo2)\n\ntitulo_plot_rizo2=\"Plot 2\"\n\np_rizo_2_phylum=ggplot(ordenado_rizo2, aes(x=Group, y=Abundance, fill=Phylum, order=Phylum)) + geom_bar(stat=\"identity\", position=\"stack\")+\n  scale_fill_manual(values=colores_rizo2,\n                    labels=sorted_labels_ggplot_rizo2,\n                    breaks=nombres_unicos_rizo2)+\n  labs(y=\"Mean relative abundance (%)\", x=NULL, fill=\"Phylum\",title=titulo_plot_rizo2)+\n  guides(fill = guide_legend(reverse = TRUE))+\n  scale_x_discrete(limits=limits_rizo2,labels=group_label_rizo2,\n                   breaks=levels_rizo2)+\n  scale_y_continuous(expand=c(0.01,0.01),\n                     breaks=c(0,10,20,30,40,50,60,70,80,90,100),\n                     labels=c(\"0\",\"10\", \"20\",\"30\",\"40\",\"50\",\"60\",\"70\",\"80\",\"90\",\"100\"),\n                     limits = c(NA, 100))+\n  theme_bw()+\n  theme(panel.border = element_rect(colour=\"black\"))+\n  theme(axis.title.x=element_blank())+\n  theme(plot.title = element_text(face=\"bold\", hjust = 0.5, size=16))+\n  theme(axis.text = element_text(size = 14))+\n  theme(axis.text.x = element_text(face=\"bold\", size=16))+\n  theme(axis.title.y = element_text(size = 16))+\n  theme(legend.key.size = unit(0.9, \"cm\"))+\n  theme(legend.text = element_text(size = 18))+\n  theme(legend.title = element_text(size=18, face=\"bold\"))+\n  theme(legend.title.align=0)+\n  theme(legend.text.align = 0) \n\nx11()\np_rizo_2_phylum\n\n#b) ENDOSPHERE\nmedia_sd_phylum_Endo=media_sd_phylum_todos[media_sd_phylum_todos[,\"Compartment\"] == \"Endosphere\",]\n\n#b.1) South plot\nmedia_sd_phylum_Endo1=media_sd_phylum_Endo[media_sd_phylum_Endo[,\"Plot\"] == \"Plot1\",]\n\nmedia_sd_phylum_Endo1$Phylum=as.character(media_sd_phylum_Endo1$Phylum)\n\nunclassified_endo1=media_sd_phylum_Endo1[media_sd_phylum_Endo1[,\"Phylum\"] == \"unclassified\",] \nmedia_sd_phylum_Endo1=media_sd_phylum_Endo1[media_sd_phylum_Endo1[,\"Phylum\"] != \"unclassified\",] \n\nmedia_sd_phylum_Endo1$Phylum[media_sd_phylum_Endo1$Abundance &lt;= 1.0] = \"Other phyla (&lt;1%)\" \nmedia_sd_phylum_Endo1$Phylum=as.factor(media_sd_phylum_Endo1$Phylum)\n\nothers_endo1=media_sd_phylum_Endo1[media_sd_phylum_Endo1[,\"Phylum\"] == \"Other phyla (&lt;1%)\",]\nmedia_sd_phylum_Endo1=media_sd_phylum_Endo1[media_sd_phylum_Endo1[,\"Phylum\"] != \"Other phyla (&lt;1%)\",]\n\nordenado_endo1=media_sd_phylum_Endo1[order(media_sd_phylum_Endo1$Abundance, decreasing=T),] \nordenado_endo1=rbind(ordenado_endo1,others_endo1,unclassified_endo1)\n\ngroup_label_endo1=c(\"Mothers\",\"Suckers\", \"Mothers\",\"Suckers\")\nlevels_endo1=c(\"A_Plot1_Mature_Endosphere\",\"A_Plot1_Immature_Endosphere\",\"B_Plot1_Mature_Endosphere\",\"B_Plot1_Immature_Endosphere\")\nlimits_endo1=c(\"A_Plot1_Mature_Endosphere\",\"A_Plot1_Immature_Endosphere\",\"B_Plot1_Mature_Endosphere\",\"B_Plot1_Immature_Endosphere\")\n\nphyl_name_ordered_endo1=as.vector(ordenado_endo1$Phylum)\nnombres_unicos_endo1=unique(phyl_name_ordered_endo1)\n\nordenado_endo1$Phylum=reorder.factor(ordenado_endo1$Phylum,new.order=rev(nombres_unicos_endo1))\nlab_unicos_endo1=nombres_unicos_endo1 \n\nsorted_labels_ggplot_endo1 &lt;- sapply(lab_unicos_endo1,\n                                    function(x) if (x == \"Other phyla (&lt;1%)\"|x == \"unclassified\"|x == \"Other genera (&lt;1%)\")\n                                    {parse(text=paste0(\"'\", as.character(x), \"'\"))} else {parse(text = paste0(\"italic('\",as.character(x), \"')\"))})\n\ncolores_endo1 = c(\"#0099FF\",\"#00CC00\",\"#9933FF\",\"brown\",\"yellow\",\"#00FFFF\",\"red\", \"grey\",\"black\")\n\nlength(lab_unicos_endo1)==length(colores_endo1) \nlength(lab_unicos_endo1)\nlength(colores_endo1)\n\ntitulo_plot_endo1=\"South plot\"\n\np_endo1_phylum=ggplot(ordenado_endo1, aes(x=Group, y=Abundance, fill=Phylum, order=Phylum)) + geom_bar(stat=\"identity\", position=\"stack\")+\n  scale_fill_manual(values=colores_endo1,\n                    labels=sorted_labels_ggplot_endo1,\n                    breaks=nombres_unicos_endo1)+\n  labs(y=\"Mean relative abundance (%)\", x=NULL, fill=\"Phylum\",title=titulo_plot_endo1)+\n  guides(fill = guide_legend(reverse = TRUE))+\n  scale_x_discrete(limits=limits_endo1,labels=group_label_endo1,\n                   breaks=levels_endo1)+\n  scale_y_continuous(expand=c(0.01,0.01),\n                     breaks=c(0,10,20,30,40,50,60,70,80,90,100),\n                     labels=c(\"0\",\"10\", \"20\",\"30\",\"40\",\"50\",\"60\",\"70\",\"80\",\"90\",\"100\"),\n                     limits = c(NA, 100))+\n  theme_bw()+\n  theme(panel.border = element_rect(colour=\"black\"))+\n  theme(axis.title.x=element_blank())+\n  theme(plot.title = element_text(face=\"bold\", hjust = 0.5, size=16))+\n  theme(axis.text = element_text(size = 14))+\n  theme(axis.text.x = element_text(face=\"bold\", size=16))+\n  theme(axis.title.y = element_text(size = 16))+\n  theme(legend.key.size = unit(0.9, \"cm\"))+\n  theme(legend.text = element_text(size = 18))+\n  theme(legend.title = element_text(size=18, face=\"bold\"))+\n  theme(legend.title.align=0)+\n  theme(legend.text.align = 0) \n\nx11()\np_endo1_phylum\n\n#b.2) North plot\nmedia_sd_phylum_Endo2=media_sd_phylum_Endo[media_sd_phylum_Endo[,\"Plot\"] == \"Plot2\",]\n\nmedia_sd_phylum_Endo2$Phylum=as.character(media_sd_phylum_Endo2$Phylum)\nunclassified_endo2=media_sd_phylum_Endo2[media_sd_phylum_Endo2[,\"Phylum\"] == \"unclassified\",] \nmedia_sd_phylum_Endo2=media_sd_phylum_Endo2[media_sd_phylum_Endo2[,\"Phylum\"] != \"unclassified\",]\n\nmedia_sd_phylum_Endo2$Phylum[media_sd_phylum_Endo2$Abundance &lt;= 1.0] = \"Other phyla (&lt;1%)\" \nmedia_sd_phylum_Endo2$Phylum=as.factor(media_sd_phylum_Endo2$Phylum)\nothers_endo2=media_sd_phylum_Endo2[media_sd_phylum_Endo2[,\"Phylum\"] == \"Other phyla (&lt;1%)\",]\nmedia_sd_phylum_Endo2=media_sd_phylum_Endo2[media_sd_phylum_Endo2[,\"Phylum\"] != \"Other phyla (&lt;1%)\",]\n\nordenado_endo2=media_sd_phylum_Endo2[order(media_sd_phylum_Endo2$Abundance, decreasing=T),]\nordenado_endo2=rbind(ordenado_endo2,others_endo2,unclassified_endo2)\n\ngroup_label_endo2=c(\"Mothers\",\"Suckers\", \"Mothers\",\"Suckers\")\nlevels_endo2=c(\"A_Plot2_Mature_Endosphere\",\"A_Plot2_Immature_Endosphere\",\"B_Plot2_Mature_Endosphere\",\"B_Plot2_Immature_Endosphere\")\nlimits_endo2=c(\"A_Plot2_Mature_Endosphere\",\"A_Plot2_Immature_Endosphere\",\"B_Plot2_Mature_Endosphere\",\"B_Plot2_Immature_Endosphere\")\n\nphyl_name_ordered_endo2=as.vector(ordenado_endo2$Phylum)\nnombres_unicos_endo2=unique(phyl_name_ordered_endo2)\n\nordenado_endo2$Phylum=reorder.factor(ordenado_endo2$Phylum,new.order=rev(nombres_unicos_endo2))\nlab_unicos_endo2=nombres_unicos_endo2 \n\nsorted_labels_ggplot_endo2 &lt;- sapply(lab_unicos_endo2,\n                                     function(x) if (x == \"Other phyla (&lt;1%)\"|x == \"unclassified\"|x == \"Other genera (&lt;1%)\")\n                                     {parse(text=paste0(\"'\", as.character(x), \"'\"))} else {parse(text = paste0(\"italic('\",as.character(x), \"')\"))})\n\ncolores_endo2 = c(\"#0099FF\",\"#00CC00\",\"brown\",\"#9933FF\",\"#00FFFF\",\"yellow\",\"grey\",\"black\")\n\nlength(lab_unicos_endo2)==length(colores_endo2) \nlength(lab_unicos_endo2)\nlength(colores_endo2)\n\ntitulo_plot_endo2=\"North plot\"\n\np_endo2_phylum=ggplot(ordenado_endo2, aes(x=Group, y=Abundance, fill=Phylum, order=Phylum)) + geom_bar(stat=\"identity\", position=\"stack\")+\n  scale_fill_manual(values=colores_endo2,\n                    labels=sorted_labels_ggplot_endo2,\n                    breaks=nombres_unicos_endo2)+\n  labs(y=\"Mean relative abundance (%)\", x=NULL, fill=\"Phylum\",title=titulo_plot_endo2)+\n  guides(fill = guide_legend(reverse = TRUE))+#sirve para cambiar el orden de la leyenda\n  scale_x_discrete(limits=limits_endo2,labels=group_label_endo2,\n                   breaks=levels_endo2)+\n  scale_y_continuous(expand=c(0.01,0.01),\n                     breaks=c(0,10,20,30,40,50,60,70,80,90,100),\n                     labels=c(\"0\",\"10\", \"20\",\"30\",\"40\",\"50\",\"60\",\"70\",\"80\",\"90\",\"100\"),\n                     limits = c(NA, 100))+\n  theme_bw()+\n  theme(panel.border = element_rect(colour=\"black\"))+\n  theme(axis.title.x=element_blank())+\n  theme(plot.title = element_text(face=\"bold\", hjust = 0.5, size=16))+\n  theme(axis.text = element_text(size = 14))+\n  theme(axis.text.x = element_text(face=\"bold\", size=16))+\n  theme(axis.title.y = element_text(size = 16))+\n  theme(legend.key.size = unit(0.9, \"cm\"))+\n  theme(legend.text = element_text(size = 18))+\n  theme(legend.title = element_text(size=18, face=\"bold\"))+\n  theme(legend.title.align=0)+\n  theme(legend.text.align = 0)\nx11()\np_endo2_phylum"
  },
  {
    "objectID": "Bacteria_data_analysis.html#genus-level",
    "href": "Bacteria_data_analysis.html#genus-level",
    "title": "Ecological analyses of bacterial dataset",
    "section": "6.2. Genus level",
    "text": "6.2. Genus level\n\n6.2.1. Obtain tables with the relative abundance and standard deviation values\nWe are going to obtain the relative abundance of each phylum detected in our samples.\n\ngenus_relabun=tax_glom(phy_data_relabun, taxrank = \"Genus\")\ncolSums(otu_table(genus_relabun))\n\nb=as.data.frame(otu_table(genus_relabun))\nbb=cbind(tax_table(genus_relabun),b)\nidentical(rownames(b),rownames(bb))\nwrite.table(data.frame(\"TAXA\"=rownames(bb),bb),file=\"abundrel_Genero_porReplicas.txt\", sep=\"\\t\",row.names =F)\n\ntable_genus = otu_table(genus_relabun)[,] %&gt;% t() %&gt;% as.data.frame()\ntax_genus=tax_table(genus_relabun)\n\ngenus_media=aggregate(table_genus, by=list(as.data.frame(sample_data(genus_relabun))$Fusion), FUN=mean)%&gt;% column_to_rownames(\"Group.1\") %&gt;% t() \n\ngenus_sd &lt;- aggregate(table_genus, by=list(as.data.frame(sample_data(genus_relabun))$Fusion), FUN=sd)%&gt;% column_to_rownames(\"Group.1\")  %&gt;% t()  %&gt;% \n  as.data.frame() %&gt;% rename_with(.fn= ~paste0(colnames(genus_media), \"_SD\"))\n\ngenus_media_sd=merge(tax_genus, genus_media, by=0) %&gt;%column_to_rownames(\"Row.names\") %&gt;%\n  merge(genus_sd, by=0) %&gt;% column_to_rownames(\"Row.names\")\ncolSums(genus_media_sd[,8:ncol(genus_media_sd)])\ngenus_media_sd$ASV_names=row.names(genus_media_sd)\n\nwrite.table(data.frame(\"TAXA\"=rownames(genus_media_sd),genus_media_sd), file=\"abundrel_media_sd_genus.txt\", sep=\"\\t\",row.names =F)\n\n\n\n6.2.2. Plotting\nWe are going to make a stacked bars plot, just indicating the most abundant genera\nFirstly, we have to prepare the data and modify the table so that we can obtain tables suitable for the plotting with the package ggplot2.\n\ndf_melt_genus = psmelt(physeq = genus_relabun) \ncolnames(df_melt_genus) \n\ndf_melt_aggreg2 = aggregate(df_melt_genus$Abundance, \n                            by=list(Group=df_melt_genus$Fusion, \n                                    Sample=df_melt_genus$Sample,Genus=df_melt_genus$Genus,\n                                    Compartment=df_melt_genus$Compartment,\n                                    Plot=df_melt_genus$Plot, Year=df_melt_genus$Year, Condition=df_melt_genus$Condition), FUN=sum)\ncolnames(df_melt_aggreg2)=c(\"Group\", \"Sample\", \"Genus\",\"Compartment\",\"Plot\",\"Year\",\"Condition\",\"Abundance\")\ncolnames(df_melt_aggreg2) \n\ndf_melt_aggreg_mean = aggregate(df_melt_aggreg2$Abundance, by=list(Group=df_melt_aggreg2$Group, \n                                                                   Genus=df_melt_aggreg2$Genus,\n                                                                   Compartment=df_melt_aggreg2$Compartment,\n                                                                   Plot=df_melt_aggreg2$Plot, Year=df_melt_aggreg2$Year,Condition=df_melt_aggreg2$Condition), FUN=mean)\ncolnames(df_melt_aggreg_mean)&lt;-c(\"Group\", \"Genus\",\"Compartment\", \"Plot\",\"Year\",\"Condition\",\"Abundance\")\ncolnames(df_melt_aggreg_mean)\n\ndf_melt_aggreg_sd=aggregate(df_melt_aggreg2$Abundance, by=list(Group=df_melt_aggreg2$Group, \n                                                               Genus=df_melt_aggreg2$Genus,\n                                                               Compartment=df_melt_aggreg2$Compartment,\n                                                               Plot=df_melt_aggreg2$Plot, Year=df_melt_aggreg2$Year,Condition=df_melt_aggreg2$Condition), FUN=sd)\ncolnames(df_melt_aggreg_sd)=c(\"Group\", \"Genus\",\"Compartment\",\"Plot\",\"Year\",\"Condition\",\"sd\")\n\nall(df_melt_aggreg_mean$Group==df_melt_aggreg_sd$Group)\nall(df_melt_aggreg_mean$Genus==df_melt_aggreg_sd$Genus)\n\ndf_melt_aggreg_mean$sd=df_melt_aggreg_sd$sd \nmedia_sd_genus_todos=df_melt_aggreg_mean\n\nNow, we are ready to plot the mean relative abundances. We want to order the genera by ascending relative abundance, keeping the unclassified and minor genera in the upper part of the plot.\n\n#a) RHIZOSPHERE\nmedia_sd_genus_rizo=media_sd_genus_todos[media_sd_genus_todos[,\"Compartment\"] == \"Rhizosphere\",]\n\n#a.1) South plot\nmedia_sd_genus_rizo1=media_sd_genus_rizo[media_sd_genus_rizo[,\"Plot\"] == \"Plot1\",]\n\nmedia_sd_genus_rizo1$Genus=as.character(media_sd_genus_rizo1$Genus)\nunclassified_r1=media_sd_genus_rizo1[media_sd_genus_rizo1[,\"Genus\"] == \"unclassified\",] \nmedia_sd_genus_rizo1=media_sd_genus_rizo1[media_sd_genus_rizo1[,\"Genus\"] != \"unclassified\",] \n\nmedia_sd_genus_rizo1$Genus[media_sd_genus_rizo1$Abundance &lt;= 2] = \"Other genera (&lt;2%)\" \nmedia_sd_genus_rizo1$Genus=as.factor(media_sd_genus_rizo1$Genus)\n\nothers_r1=media_sd_genus_rizo1[media_sd_genus_rizo1[,\"Genus\"] == \"Other genera (&lt;2%)\",]\nmedia_sd_genus_rizo1=media_sd_genus_rizo1[media_sd_genus_rizo1[,\"Genus\"] != \"Other genera (&lt;2%)\",]\n\nordenado_r1=media_sd_genus_rizo1[order(media_sd_genus_rizo1$Abundance, decreasing=T),] \nordenado_r1=rbind(ordenado_r1,others_r1,unclassified_r1)\n\ngroup_label_r1=c(\"M\",\"S\", \"M\",\"S\")\nlevels_r1=c(\"A_Plot1_Mature_Rhizosphere\",\"A_Plot1_Immature_Rhizosphere\",\n           \"B_Plot1_Mature_Rhizosphere\",\"B_Plot1_Immature_Rhizosphere\")\nlimits_r1=c(\"A_Plot1_Mature_Rhizosphere\",\"A_Plot1_Immature_Rhizosphere\",\n            \"B_Plot1_Mature_Rhizosphere\",\"B_Plot1_Immature_Rhizosphere\")\n\ngenus_name_ordered_r1=as.vector(ordenado_r1$Genus)\nnombres_unicos_r1=unique(genus_name_ordered_r1)\nordenado_r1$Genus=reorder.factor(ordenado_r1$Genus,new.order=rev(nombres_unicos_r1))\nlab_unicos_r1=nombres_unicos_r1 \n\nsorted_labels_ggplot_r1 &lt;- sapply(lab_unicos_r1,\n                                  function(x) if (x == \"Other genera (&lt;2%)\"|x == \"unclassified\"|x == \"Other genera (&lt;2%)\")\n                                  {parse(text=paste0(\"'\", as.character(x), \"'\"))} else {parse(text = paste0(\"italic('\",as.character(x), \"')\"))})\n\ncolores_r1 = c(\"#0099FF\",\"#00CC00\",\"#9933FF\",\"brown\",\"yellow\",\"orange\",\"#00FFFF\",\"red\", \n               \"pink\", \"magenta\",\"blue\",\"khaki2\", \n               \"grey\",\"black\")\n\nlength(lab_unicos_r1)==length(colores_r1) \nlength(lab_unicos_r1)\nlength(colores_r1)\n\ntitulo_plot_r1=\"South plot\"\n\npgenus_r1=ggplot(ordenado_r1, aes(x=Group, y=Abundance, fill=Genus, order=Genus)) + geom_bar(stat=\"identity\", position=\"stack\")+\n  scale_fill_manual(values=colores_r1,\n                    labels=sorted_labels_ggplot_r1,\n                    breaks=nombres_unicos_r1)+\n  labs(y=\"Mean relative abundance (%)\", x=NULL, fill=\"Genus\",title=titulo_plot_r1)+\n  guides(fill = guide_legend(reverse = TRUE))+\n  scale_x_discrete(limits=limits_r1,labels=group_label_r1,\n                   breaks=levels_r1)+\n  scale_y_continuous(expand=c(0.01,0.01),\n                     breaks=c(0,10,20,30,40,50,60,70,80,90,100),\n                     labels=c(\"0\",\"10\", \"20\",\"30\",\"40\",\"50\",\"60\",\"70\",\"80\",\"90\",\"100\"),\n                     limits = c(NA, 100))+\n  theme_bw()+\n  theme(panel.border = element_rect(colour=\"black\"))+\n  theme(axis.title.x=element_blank())+\n  theme(plot.title = element_text(face=\"bold\", hjust = 0.5, size=7))+\n  theme(axis.text = element_text(size = 7))+\n  theme(axis.text.x = element_text(face=\"bold\", size=7))+\n  theme(axis.title.y = element_text(size = 7))+\n  theme(legend.key.size = unit(0.2, \"cm\"))+\n  theme(legend.text = element_text(size = 5))+\n  theme(legend.title = element_text(size=5, face=\"bold\"))+\n  theme(legend.title.align=0)+\n  theme(legend.text.align = 0)+ \n  theme(legend.position = \"right\")\n\nx11()\npgenus_r1\n\n#a.2) North plot\nmedia_sd_genus_rizo2=media_sd_genus_rizo[media_sd_genus_rizo[,\"Plot\"] == \"Plot2\",]\n\nmedia_sd_genus_rizo2$Genus=as.character(media_sd_genus_rizo2$Genus)\nunclassified_r2=media_sd_genus_rizo2[media_sd_genus_rizo2[,\"Genus\"] == \"unclassified\",] \nmedia_sd_genus_rizo2=media_sd_genus_rizo2[media_sd_genus_rizo2[,\"Genus\"] != \"unclassified\",]\n\nmedia_sd_genus_rizo2$Genus[media_sd_genus_rizo2$Abundance &lt;= 2] = \"Other genera (&lt;2%)\" \nmedia_sd_genus_rizo2$Genus=as.factor(media_sd_genus_rizo2$Genus)\n\nothers_r2=media_sd_genus_rizo2[media_sd_genus_rizo2[,\"Genus\"] == \"Other genera (&lt;2%)\",]\nmedia_sd_genus_rizo2=media_sd_genus_rizo2[media_sd_genus_rizo2[,\"Genus\"] != \"Other genera (&lt;2%)\",]\n\nordenado_r2=media_sd_genus_rizo2[order(media_sd_genus_rizo2$Abundance, decreasing=T),] \nordenado_r2=rbind(ordenado_r2,others_r2,unclassified_r2)\n\ngroup_label_r2=c(\"M\",\"S\", \"M\",\"S\")\nlevels_r2=c(\"A_Plot2_Mature_Rhizosphere\",\"A_Plot2_Immature_Rhizosphere\",\n            \"B_Plot2_Mature_Rhizosphere\",\"B_Plot2_Immature_Rhizosphere\")\nlimits_r2=c(\"A_Plot2_Mature_Rhizosphere\",\"A_Plot2_Immature_Rhizosphere\",\n            \"B_Plot2_Mature_Rhizosphere\",\"B_Plot2_Immature_Rhizosphere\")\n\ngenus_name_ordered_r2=as.vector(ordenado_r2$Genus)\nnombres_unicos_r2=unique(genus_name_ordered_r2)\n\nordenado_r2$Genus=reorder.factor(ordenado_r2$Genus,new.order=rev(nombres_unicos_r2))\nlab_unicos_r2=nombres_unicos_r2\n\nsorted_labels_ggplot_r2 &lt;- sapply(lab_unicos_r2,\n                                  function(x) if (x == \"Other genera (&lt;2%)\"|x == \"unclassified\"|x == \"Other genera (&lt;2%)\")\n                                  {parse(text=paste0(\"'\", as.character(x), \"'\"))} else {parse(text = paste0(\"italic('\",as.character(x), \"')\"))})\n\n\ncolores_r2 = c(\"#0099FF\",\"#00CC00\",\"#9933FF\",\"yellow\",\"green4\",\"steelblue4\",\"brown\",\"maroon\",\"gold1\",\n            \n               \"grey\",\"black\")\n\nlength(lab_unicos_r2)==length(colores_r2)\nlength(lab_unicos_r2)\nlength(colores_r2)\n\ntitulo_plot_r2=\"North plot\"\n\npgenus_r2=ggplot(ordenado_r2, aes(x=Group, y=Abundance, fill=Genus, order=Genus)) + geom_bar(stat=\"identity\", position=\"stack\")+\n  scale_fill_manual(values=colores_r2,\n                    labels=sorted_labels_ggplot_r2,\n                    breaks=nombres_unicos_r2)+\n  labs(y=\"Mean relative abundance (%)\", x=NULL, fill=\"Genus\",title=titulo_plot_r2)+\n  guides(fill = guide_legend(reverse = TRUE))+\n  scale_x_discrete(limits=limits_r2,labels=group_label_r2,\n                   breaks=levels_r2)+\n  scale_y_continuous(expand=c(0.01,0.01),\n                     breaks=c(0,10,20,30,40,50,60,70,80,90,100),\n                     labels=c(\"0\",\"10\", \"20\",\"30\",\"40\",\"50\",\"60\",\"70\",\"80\",\"90\",\"100\"),\n                     limits = c(NA, 100))+\n  theme_bw()+\n  theme(panel.border = element_rect(colour=\"black\"))+\n  theme(axis.title.x=element_blank())+\n  theme(plot.title = element_text(face=\"bold\", hjust = 0.5, size=7))+\n  theme(axis.text = element_text(size = 7))+\n  theme(axis.text.x = element_text(face=\"bold\", size=7))+\n  theme(axis.title.y = element_text(size = 7))+\n  theme(legend.key.size = unit(0.2, \"cm\"))+\n  theme(legend.text = element_text(size = 5))+\n  theme(legend.title = element_text(size=5, face=\"bold\"))+\n  theme(legend.title.align=0)+\n  theme(legend.text.align = 0)+ \n  theme(legend.position = \"right\")\n\nx11()\npgenus_r2\n\n#b) ENDOSPHERE\nmedia_sd_genus_endo=media_sd_genus_todos[media_sd_genus_todos[,\"Compartment\"] == \"Endosphere\",]\n\n#b.1) South plot\nmedia_sd_genus_endo1=media_sd_genus_endo[media_sd_genus_endo[,\"Plot\"] == \"Plot1\",]\n\nmedia_sd_genus_endo1$Genus=as.character(media_sd_genus_endo1$Genus)\nunclassified_e1=media_sd_genus_endo1[media_sd_genus_endo1[,\"Genus\"] == \"unclassified\",] \nmedia_sd_genus_endo1=media_sd_genus_endo1[media_sd_genus_endo1[,\"Genus\"] != \"unclassified\",]\n\nmedia_sd_genus_endo1$Genus[media_sd_genus_endo1$Abundance &lt;= 2] = \"Other genera (&lt;2%)\" \nmedia_sd_genus_endo1$Genus=as.factor(media_sd_genus_endo1$Genus)\n\n\nothers_e1=media_sd_genus_endo1[media_sd_genus_endo1[,\"Genus\"] == \"Other genera (&lt;2%)\",]\nmedia_sd_genus_endo1=media_sd_genus_endo1[media_sd_genus_endo1[,\"Genus\"] != \"Other genera (&lt;2%)\",]\nordenado_e1=media_sd_genus_endo1[order(media_sd_genus_endo1$Abundance, decreasing=T),] \nordenado_e1=rbind(ordenado_e1,others_e1,unclassified_e1)\n\ngroup_label_e1=c(\"M\",\"S\", \"M\",\"S\")\nlevels_e1=c(\"A_Plot1_Mature_Endosphere\",\"A_Plot1_Immature_Endosphere\",\n            \"B_Plot1_Mature_Endosphere\",\"B_Plot1_Immature_Endosphere\")\nlimits_e1=c(\"A_Plot1_Mature_Endosphere\",\"A_Plot1_Immature_Endosphere\",\n            \"B_Plot1_Mature_Endosphere\",\"B_Plot1_Immature_Endosphere\")\n\ngenus_name_ordered_e1=as.vector(ordenado_e1$Genus)\nnombres_unicos_e1=unique(genus_name_ordered_e1)\n\nordenado_e1$Genus=reorder.factor(ordenado_e1$Genus,new.order=rev(nombres_unicos_e1))\nlab_unicos_e1=nombres_unicos_e1 \n\nsorted_labels_ggplot_e1&lt;- sapply(lab_unicos_e1,\n                                  function(x) if (x == \"Other genera (&lt;2%)\"|x == \"unclassified\"|x == \"Other genera (&lt;2%)\")\n                                  {parse(text=paste0(\"'\", as.character(x), \"'\"))} else {parse(text = paste0(\"italic('\",as.character(x), \"')\"))})\n\n\ncolores_e1 = c(\"purple\",\"violet\",\"firebrick\",\"#CAB2D6\",\"powderblue\",\"yellow4\",\"#FB9A99\",\n               \"#FDBF6F\", \"coral2\",\"springgreen3\",\"lightgoldenrod2\",\"mediumorchid2\",\"gold1\",\n                 \"grey\",\"black\")\n\nlength(lab_unicos_e1)==length(colores_e1)\nlength(lab_unicos_e1)\nlength(colores_e1)\n\ntitulo_plot_e1=\"South plot\"\n\npgenus_e1=ggplot(ordenado_e1, aes(x=Group, y=Abundance, fill=Genus, order=Genus)) + geom_bar(stat=\"identity\", position=\"stack\")+\n  scale_fill_manual(values=colores_e1,\n                    labels=sorted_labels_ggplot_e1,\n                    breaks=nombres_unicos_e1)+\n  labs(y=\"Mean relative abundance (%)\", x=NULL, fill=\"Genus\",title=titulo_plot_e1)+\n  guides(fill = guide_legend(reverse = TRUE))+\n  scale_x_discrete(limits=limits_e1,labels=group_label_e1,\n                   breaks=levels_e1)+\n  scale_y_continuous(expand=c(0.01,0.01),\n                     breaks=c(0,10,20,30,40,50,60,70,80,90,100),\n                     labels=c(\"0\",\"10\", \"20\",\"30\",\"40\",\"50\",\"60\",\"70\",\"80\",\"90\",\"100\"),\n                     limits = c(NA, 100))+\n  theme_bw()+\n  theme(panel.border = element_rect(colour=\"black\"))+\n  theme(axis.title.x=element_blank())+\n  theme(plot.title = element_text(face=\"bold\", hjust = 0.5, size=7))+\n  theme(axis.text = element_text(size = 7))+\n  theme(axis.text.x = element_text(face=\"bold\", size=7))+\n  theme(axis.title.y = element_text(size = 7))+\n  theme(legend.key.size = unit(0.2, \"cm\"))+\n  theme(legend.text = element_text(size = 5))+\n  theme(legend.title = element_text(size=5, face=\"bold\"))+\n  theme(legend.title.align=0)+\n  theme(legend.text.align = 0)+\n  theme(legend.position = \"none\")\n\nx11()\npgenus_e1\n\n#b.2) North plot\nmedia_sd_genus_endo2=media_sd_genus_endo[media_sd_genus_endo[,\"Plot\"] == \"Plot2\",]\n\nmedia_sd_genus_endo2$Genus=as.character(media_sd_genus_endo2$Genus)\nunclassified_e2=media_sd_genus_endo2[media_sd_genus_endo2[,\"Genus\"] == \"unclassified\",] \nmedia_sd_genus_endo2=media_sd_genus_endo2[media_sd_genus_endo2[,\"Genus\"] != \"unclassified\",]\n\nmedia_sd_genus_endo2$Genus[media_sd_genus_endo2$Abundance &lt;= 2] = \"Other genera (&lt;2%)\" \nmedia_sd_genus_endo2$Genus=as.factor(media_sd_genus_endo2$Genus)\n\nothers_e2=media_sd_genus_endo2[media_sd_genus_endo2[,\"Genus\"] == \"Other genera (&lt;2%)\",]\nmedia_sd_genus_endo2=media_sd_genus_endo2[media_sd_genus_endo2[,\"Genus\"] != \"Other genera (&lt;2%)\",]\n\nordenado_e2=media_sd_genus_endo2[order(media_sd_genus_endo2$Abundance, decreasing=T),] \nordenado_e2=rbind(ordenado_e2,others_e2,unclassified_e2)\n\n\ngroup_label_e2=c(\"M\",\"S\", \"M\",\"S\")\nlevels_e2=c(\"A_Plot2_Mature_Endosphere\",\"A_Plot2_Immature_Endosphere\",\n            \"B_Plot2_Mature_Endosphere\",\"B_Plot2_Immature_Endosphere\")\nlimits_e2=c(\"A_Plot2_Mature_Endosphere\",\"A_Plot2_Immature_Endosphere\",\n            \"B_Plot2_Mature_Endosphere\",\"B_Plot2_Immature_Endosphere\")\n\ngenus_name_ordered_e2=as.vector(ordenado_e2$Genus)\nnombres_unicos_e2=unique(genus_name_ordered_e2)\nordenado_e2$Genus=reorder.factor(ordenado_e2$Genus,new.order=rev(nombres_unicos_e2))\nlab_unicos_e2=nombres_unicos_e2 \n\nsorted_labels_ggplot_e2 &lt;- sapply(lab_unicos_e2,\n                                  function(x) if (x == \"Other genera (&lt;2%)\"|x == \"unclassified\"|x == \"Other genera (&lt;2%)\")\n                                  {parse(text=paste0(\"'\", as.character(x), \"'\"))} else {parse(text = paste0(\"italic('\",as.character(x), \"')\"))})\n\ncolores_e2 = c(\"purple\", \"violet\",\"burlywood\",\"gold1\",\"darkseagreen2\",\"darkmagenta\",\"sienna2\",\"grey90\",\"mediumslateblue\",\n               \"lightgoldenrod2\",\"springgreen3\",\"#00CC00\",\"saddlebrown\",\"orangered2\",\"powderblue\",\"#CAB2D6\",\"peachpuff\",\n               \"grey\",\"black\")\n\nlength(lab_unicos_e2)==length(colores_e2) \nlength(lab_unicos_e2)\nlength(colores_e2)\n\ntitulo_plot_e2=\"North plot\"\n\npgenus_e2=ggplot(ordenado_e2, aes(x=Group, y=Abundance, fill=Genus, order=Genus)) + geom_bar(stat=\"identity\", position=\"stack\")+\n  scale_fill_manual(values=colores_e2,\n                    labels=sorted_labels_ggplot_e2,\n                    breaks=nombres_unicos_e2)+\n  labs(y=\"Mean relative abundance (%)\", x=NULL, fill=\"Genus\",title=titulo_plot_e2)+\n  guides(fill = guide_legend(reverse = TRUE))+\n  scale_x_discrete(limits=limits_e2,labels=group_label_e2,\n                   breaks=levels_e2)+\n  scale_y_continuous(expand=c(0.01,0.01),\n                     breaks=c(0,10,20,30,40,50,60,70,80,90,100),\n                     labels=c(\"0\",\"10\", \"20\",\"30\",\"40\",\"50\",\"60\",\"70\",\"80\",\"90\",\"100\"),\n                     limits = c(NA, 100))+\n  theme_bw()+\n  theme(panel.border = element_rect(colour=\"black\"))+\n  theme(axis.title.x=element_blank())+\n  theme(plot.title = element_text(face=\"bold\", hjust = 0.5, size=7))+\n  theme(axis.text = element_text(size = 7))+\n  theme(axis.text.x = element_text(face=\"bold\", size=7))+\n  theme(axis.title.y = element_text(size = 7))+\n  theme(legend.key.size = unit(0.2, \"cm\"))+\n  theme(legend.text = element_text(size = 5))+\n  theme(legend.title = element_text(size=5, face=\"bold\"))+\n  theme(legend.title.align=0)+\n  theme(legend.text.align = 0)+ \n  theme(legend.position = \"right\")\n\nx11()\npgenus_e2\n\nIn Figure 7 you can observe an example of the stacked bar plot for the main genera. This kind of plot can be calculated at the taxonomical rank you prefer. Please, try to open the plot in a new window if you want to view it at full size.\n\n\n\nFigure 7. Distribution of the main classified genera in the root endosphere of mother and sucker plants in 2022 (left) and 2023 (right)"
  },
  {
    "objectID": "Bacteria_data_analysis.html#prepare-the-data",
    "href": "Bacteria_data_analysis.html#prepare-the-data",
    "title": "Ecological analyses of bacterial dataset",
    "section": "7.1 Prepare the data",
    "text": "7.1 Prepare the data\n\nmt1=as.data.frame(sample_data(phy_data_relabun))\nnames = unique(mt1$Fusion) #get the name of each level of the variable \"Fusion\", which in this example corresponds to each individual group of samples. For instance, the first level of the variable \"Fusion\" is \"A_Plot1_Mature_Rhizosphere\" (all rhizosphere samples of mother plants sampled in 2022 located in the south plot)\n\n#in the following for loop we are creating a list in which we are saving one each phyloseq object per group of samples. That is to say, in the first element of the list, the phyloseq object corresponding to the samples of the rhizosphere of mother plants sampled in 2022 located in the south plot is stored.\npruned_data = list()\nfor(i in 1:length(names)){\n  samples_group = mt1[which(mt1$Fusion==names[i]),]$Sample\n  pruned_data[[i]] = prune_samples(samples_group, phy_data_relabun)\n  }\n\n#this loop stored the taxonony and ASV table of each phyloseq element of the previously created list\notu_tables = list()\ntax_tables = list()\nfor (i in 1:length(pruned_data)){\n  otu_tables[[i]] &lt;- as.data.frame(otu_table(pruned_data[[i]]))\n  tax_tables[[i]] &lt;- as.data.frame(tax_table(pruned_data[[i]]))\n}#it gives the list \"otu_tables\", whose element [[1]] corresponds to the ASV table of the group of sample \"A_Plot1_Mature_Rhizosphere\". While \"tax_tables\" list stores the taxonomy tables\n\n#this list merges each ASV table with each tax table by rownames (by=0)\nwhole_tables = list()\nfor (i in 1:length(pruned_data)){\n  whole_tables[[i]] &lt;- merge(tax_tables[[i]],otu_tables[[i]], by=0)\n}\n\nfor(i in 1:length(whole_tables)){\n  whole_tables[[i]]$ASV_names=whole_tables[[i]]$Row.names\n}#it creates a new column in the list \"wholes_tables\" that corresponds to the rownames\n\nfor (i in 1:length(whole_tables)){ #create one dataframe per element from the list \"whole_tables\"\n  assign(paste0(names[i],\"_df\"),as.data.frame(whole_tables[[i]]))\n}\n\n#the previous loop returns complex dataframe names, so let's rename them and calculate the total number of sequences registered for each ASV in all the corresponding dataset \nA_r1_M=A_Plot1_Mature_Rhizosphere_df; A_r1_M$Sum=rowSums(A_r1_M[,9:ncol(A_r1_M)]); A_r1_M_def=A_r1_M[which(A_r1_M$Sum&gt;0,arr.ind=TRUE),];A_r1_M_def2= subset(A_r1_M_def, select = -c(Sum))#we remove those ASV that account for 0 sequences in sum in each dataset\nA_e1_M=A_Plot1_Mature_Endosphere_df; A_e1_M$Sum=rowSums(A_e1_M[,9:ncol(A_e1_M)]); A_e1_M_def=A_e1_M[which(A_e1_M$Sum&gt;0,arr.ind=TRUE),];A_e1_M_def2= subset(A_e1_M_def, select = -c(Sum))\nA_e1_I=A_Plot1_Immature_Endosphere_df; A_e1_I$Sum=rowSums(A_e1_I[,9:ncol(A_e1_I)]); A_e1_I_def=A_e1_I[which(A_e1_I$Sum&gt;0,arr.ind=TRUE),];A_e1_I_def2= subset(A_e1_I_def, select = -c(Sum))\nA_r1_I=A_Plot1_Immature_Rhizosphere_df; A_r1_I$Sum=rowSums(A_r1_I[,9:ncol(A_r1_I)]); A_r1_I_def=A_r1_I[which(A_r1_I$Sum&gt;0,arr.ind=TRUE),];A_r1_I_def2= subset(A_r1_I_def, select = -c(Sum))\nA_e2_M=A_Plot2_Mature_Endosphere_df; A_e2_M$Sum=rowSums(A_e2_M[,9:ncol(A_e2_M)]); A_e2_M_def=A_e2_M[which(A_e2_M$Sum&gt;0,arr.ind=TRUE),];A_e2_M_def2= subset(A_e2_M_def, select = -c(Sum))\nA_r2_M=A_Plot2_Mature_Rhizosphere_df; A_r2_M$Sum=rowSums(A_r2_M[,9:ncol(A_r2_M)]); A_r2_M_def=A_r2_M[which(A_r2_M$Sum&gt;0,arr.ind=TRUE),];A_r2_M_def2= subset(A_r2_M_def, select = -c(Sum))\nA_r2_I=A_Plot2_Immature_Rhizosphere_df; A_r2_I$Sum=rowSums(A_r2_I[,9:ncol(A_r2_I)]); A_r2_I_def=A_r2_I[which(A_r2_I$Sum&gt;0,arr.ind=TRUE),];A_r2_I_def2= subset(A_r2_I_def, select = -c(Sum))\nA_e2_I=A_Plot2_Immature_Endosphere_df; A_e2_I$Sum=rowSums(A_e2_I[,9:ncol(A_e2_I)]);A_e2_I_def=A_e2_I[which(A_e2_I$Sum&gt;0,arr.ind=TRUE),];A_e2_I_def2= subset(A_e2_I_def, select = -c(Sum))\nB_r1_M=B_Plot1_Mature_Rhizosphere_df; B_r1_M$Sum=rowSums(B_r1_M[,9:ncol(B_r1_M)]); B_r1_M_def=B_r1_M[which(B_r1_M$Sum&gt;0,arr.ind=TRUE),];B_r1_M_def2= subset(B_r1_M_def, select = -c(Sum))\nB_r1_I=B_Plot1_Immature_Rhizosphere_df; B_r1_I$Sum=rowSums(B_r1_I[,9:ncol(B_r1_I)]); B_r1_I_def=B_r1_I[which(B_r1_I$Sum&gt;0,arr.ind=TRUE),];B_r1_I_def2= subset(B_r1_I_def, select = -c(Sum))\nB_r2_M=B_Plot2_Mature_Rhizosphere_df; B_r2_M$Sum=rowSums(B_r2_M[,9:ncol(B_r2_M)]); B_r2_M_def=B_r2_M[which(B_r2_M$Sum&gt;0,arr.ind=TRUE),];B_r2_M_def2= subset(B_r2_M_def, select = -c(Sum))\nB_r2_I=B_Plot2_Immature_Rhizosphere_df; B_r2_I$Sum=rowSums(B_r2_I[,9:ncol(B_r2_I)]); B_r2_I_def=B_r2_I[which(B_r2_I$Sum&gt;0,arr.ind=TRUE),];B_r2_I_def2= subset(B_r2_I_def, select = -c(Sum))\nB_e1_I=B_Plot1_Immature_Endosphere_df; B_e1_I$Sum=rowSums(B_e1_I[,9:ncol(B_e1_I)]); B_e1_I_def=B_e1_I[which(B_e1_I$Sum&gt;0,arr.ind=TRUE),];B_e1_I_def2= subset(B_e1_I_def, select = -c(Sum))\nB_e1_M=B_Plot1_Mature_Endosphere_df; B_e1_M$Sum=rowSums(B_e1_M[,9:ncol(B_e1_M)]); B_e1_M_def=B_e1_M[which(B_e1_M$Sum&gt;0,arr.ind=TRUE),];B_e1_M_def2= subset(B_e1_M_def, select = -c(Sum))\nB_e2_M=B_Plot2_Mature_Endosphere_df; B_e2_M$Sum=rowSums(B_e2_M[,9:ncol(B_e2_M)]); B_e2_M_def=B_e2_M[which(B_e2_M$Sum&gt;0,arr.ind=TRUE),];B_e2_M_def2= subset(B_e2_M_def, select = -c(Sum))\nB_e2_I=B_Plot2_Immature_Endosphere_df; B_e2_I$Sum=rowSums(B_e2_I[,9:ncol(B_e2_I)]); B_e2_I_def=B_e2_I[which(B_e2_I$Sum&gt;0,arr.ind=TRUE),];B_e2_I_def2= subset(B_e2_I_def, select = -c(Sum))"
  },
  {
    "objectID": "Bacteria_data_analysis.html#compare-asvs-between-mother-and-sucker-plants",
    "href": "Bacteria_data_analysis.html#compare-asvs-between-mother-and-sucker-plants",
    "title": "Ecological analyses of bacterial dataset",
    "section": "7.2 Compare ASVs between mother and sucker plants",
    "text": "7.2 Compare ASVs between mother and sucker plants\nRemember that we want to retain the ASVs that are shared between mother and sucker plants (just in the root endosphere). They could be both inherited or acquired from the rhizosphere soil.\n\n#a) South plot\n#a.1) 2022\ncompartidos_A_e1=cbind(A_e1_M_def2[A_e1_M_def2$ASV_names %in% A_e1_I_def2$ASV_names,], A_e1_I_def2[A_e1_I_def2$ASV_names %in% A_e1_M_def2$ASV_names,])#retain those ASVs that are in the dataframe of mothers and suckers (root endosphere)\ncompartidos_A_e1=compartidos_A_e1[,-(21:28)]#removing extra information\nwrite.table(data.frame(\"_\"=rownames(compartidos_A_e1),compartidos_A_e1),file=\"Core_A_e1.txt\",sep=\"\\t\", row.names = F)\n\n#a.2) 2023\ncompartidos_B_e1=cbind(B_e1_M_def2[B_e1_M_def2$ASV_names %in% B_e1_I_def2$ASV_names,], B_e1_I_def2[B_e1_I_def2$ASV_names %in% B_e1_M_def2$ASV_names,])\ncompartidos_B_e1=compartidos_B_e1[,-(20:27)]\nwrite.table(data.frame(\"_\"=rownames(compartidos_B_e1),compartidos_B_e1),file=\"Core_B_e1.txt\",sep=\"\\t\", row.names = F)\n\n#b) North plot\n#b.1) 2022\ncompartidos_A_e2=cbind(A_e2_M_def2[A_e2_M_def2$ASV_names %in% A_e2_I_def2$ASV_names,], A_e2_I_def2[A_e2_I_def2$ASV_names %in% A_e2_M_def2$ASV_names,])\ncompartidos_A_e2=compartidos_A_e2[,-(21:28)]\nwrite.table(data.frame(\"_\"=rownames(compartidos_A_e2),compartidos_A_e2),file=\"Core_A_e2.txt\",sep=\"\\t\", row.names = F)\n\n#b.2) North plot\ncompartidos_B_e2=cbind(B_e2_M_def2[B_e2_M_def2$ASV_names %in% B_e2_I_def2$ASV_names,], B_e2_I_def2[B_e2_I_def2$ASV_names %in% B_e2_M_def2$ASV_names,])\ncompartidos_B_e2=compartidos_B_e2[,-(19:26)]\nwrite.table(data.frame(\"_\"=rownames(compartidos_B_e2),compartidos_B_e2),file=\"Core_B_e2.txt\",sep=\"\\t\", row.names = F)\n\nNow, we are going to compare the shared bacterial communities against the bacterial communities dwelling in the rhizosphere soil of the suckers. We will retain bacterial members that are in the root endosphere but NO in the rhizosphere soil\n\n#a) South plot\n#a.1) 2022\ncompartidos_A1_endo_rizo=cbind(compartidos_A_e1[compartidos_A_e1$ASV_names %in% A_r1_I_def2$ASV_names,], A_r1_I_def2[A_r1_I_def2$ASV_names %in% compartidos_A_e1$ASV_names,])\ncompartidos_A1_endo_rizo=compartidos_A1_endo_rizo[,-(33:40)]#remove extra information from the data (additional columns indicating, again, the taxonomy of the ASVs)\nwrite.table(data.frame(\"_\"=rownames(compartidos_A1_endo_rizo),compartidos_A1_endo_rizo),file=\"Compartidos_A1_endo_rizo.txt\",sep=\"\\t\", row.names = F)\n\n#a.2) 2023\ncompartidos_B1_endo_rizo=cbind(compartidos_B_e1[compartidos_B_e1$ASV_names %in% B_r1_I_def2$ASV_names,], B_r1_I_def2[B_r1_I_def2$ASV_names %in% compartidos_B_e1$ASV_names,])\ncompartidos_B1_endo_rizo=compartidos_B1_endo_rizo[,-(28:35)]\nwrite.table(data.frame(\"_\"=rownames(compartidos_B1_endo_rizo),compartidos_B1_endo_rizo),file=\"Compartidos_B1_endo_rizo.txt\",sep=\"\\t\", row.names = F)\n\n#b) North plot\n#b.1) 2022\ncompartidos_A2_endo_rizo=cbind(compartidos_A_e2[compartidos_A_e2$ASV_names %in% A_r2_I_def2$ASV_names,], A_r2_I_def2[A_r2_I_def2$ASV_names %in% compartidos_A_e2$ASV_names,])\ncompartidos_A2_endo_rizo=compartidos_A2_endo_rizo[,-(29:36)]\nwrite.table(data.frame(\"_\"=rownames(compartidos_A2_endo_rizo),compartidos_A2_endo_rizo),file=\"Compartidos_A2_endo_rizo.txt\",sep=\"\\t\", row.names = F)\n\n#b.2) 2023\ncompartidos_B2_endo_rizo=cbind(compartidos_B_e2[compartidos_B_e2$ASV_names %in% B_r2_I_def2$ASV_names,], B_r2_I_def2[B_r2_I_def2$ASV_names %in% compartidos_B_e2$ASV_names,])\ncompartidos_B2_endo_rizo=compartidos_B2_endo_rizo[,-(27:34)]\nwrite.table(data.frame(\"_\"=rownames(compartidos_B2_endo_rizo),compartidos_B2_endo_rizo),file=\"Compartidos_B2_endo_rizo.txt\",sep=\"\\t\", row.names = F)\n\n#Remove those ASV detected both in the rhizosphere and in the root endosphere\n\n#a) South plot\n#a.1) 2022\nespecif_A1_endo=subset(compartidos_A_e1, !(ASV_names %in% compartidos_A1_endo_rizo$ASV_names))\nwrite.table(data.frame(\"_\"=rownames(especif_A1_endo),especif_A1_endo),file=\"A1_Endo_Transmitidos_Madreahija.txt\",sep=\"\\t\", row.names = F)\n\n#a.2) 2023\nespecif_B1_endo=subset(compartidos_B_e1, !(ASV_names %in% compartidos_B1_endo_rizo$ASV_names))\nwrite.table(data.frame(\"_\"=rownames(especif_B1_endo),especif_B1_endo),file=\"B1_Endo_Transmitidos_Madreahija.txt\",sep=\"\\t\", row.names = F)\n\n#b) North plot\n#b.1) 2022\nespecif_A2_endo=subset(compartidos_A_e2, !(ASV_names %in% compartidos_A2_endo_rizo$ASV_names))\nwrite.table(data.frame(\"_\"=rownames(especif_A2_endo),especif_A2_endo),file=\"A2_Endo_Transmitidos_Madreahija.txt\",sep=\"\\t\", row.names = F)\n\n#b.2) 2023\nespecif_B2_endo=subset(compartidos_B_e2, !(ASV_names %in% compartidos_B2_endo_rizo$ASV_names))\nwrite.table(data.frame(\"_\"=rownames(especif_B2_endo),especif_B2_endo),file=\"B2_Endo_Transmitidos_Madreahija.txt\",sep=\"\\t\", row.names = F)\n\nIn this work, we analyzed carefully the number and proportions of the transferred ASVs in Excel"
  },
  {
    "objectID": "Bacteria_data_analysis.html#plotting-2",
    "href": "Bacteria_data_analysis.html#plotting-2",
    "title": "Ecological analyses of bacterial dataset",
    "section": "7.3 Plotting",
    "text": "7.3 Plotting\nIn this section, we are going to make different graph representing the inheritance process. We will use barplots\n\n#a) South plot\n#a.1) 2022\ntotales_M_A_e1=nrow(A_e1_M_def2)#get the total number of ASV in mothers\ntransferidos_A_e1=nrow(especif_A1_endo)#get the number of shared ASVs between mothers and suckers\nprop_transferidos_M_A_e1=(transferidos_A_e1 / totales_M_A_e1) *100 #calculate the proportion of transferred ASVs\nprop_perdidos_M_A_e1=((totales_M_A_e1-transferidos_A_e1) / totales_M_A_e1) *100#calculate the proportion of ASVs lost by the mothers\n\ntotales_I_A_e1=nrow(A_e1_I_def2)#get the total number of ASVs in suckers\nprop_transferidos_I_A_e1=(transferidos_A_e1 / totales_I_A_e1) *100#get the number of shared ASVs between mothers and suckers\nprop_adquiridos_I_A_e1=((totales_I_A_e1-transferidos_A_e1) / totales_I_A_e1) *100#calculate the proportion of ASVs acquired by the suckers\n\nbarras_A_e1=as.data.frame(rbind(prop_transferidos_M_A_e1,prop_perdidos_M_A_e1,\n                              prop_transferidos_I_A_e1,prop_adquiridos_I_A_e1))#create a dataframe with all the values in order to plot them \nbarras_A_e1$Year=\"A\"\nbarras_A_e1$Plant=c(\"Mother\", \"Mother\", \"Sucker\", \"Sucker\")\nbarras_A_e1$Condition=as.factor(c(\"Transmitted\",\"Lost\", \"Transmitted\", \"Acquired\"))\ncolnames(barras_A_e1)[1]=\"Proportion\"\n\n#a.2) 2023\ntotales_M_B_e1=nrow(B_e1_M_def2)\ntransferidos_B_e1=nrow(especif_B1_endo)\nprop_transferidos_M_B_e1=(transferidos_B_e1 / totales_M_B_e1) *100\nprop_perdidos_M_B_e1=((totales_M_B_e1-transferidos_B_e1) / totales_M_B_e1) *100\n\ntotales_I_B_e1=nrow(B_e1_I_def2)\nprop_transferidos_I_B_e1=(transferidos_B_e1 / totales_I_B_e1) *100\nprop_adquiridos_I_B_e1=((totales_I_B_e1-transferidos_B_e1) / totales_I_B_e1) *100\n\nbarras_B_e1=as.data.frame(rbind(prop_transferidos_M_B_e1,prop_perdidos_M_B_e1,\n                                prop_transferidos_I_B_e1,prop_adquiridos_I_B_e1))\nbarras_B_e1$Year=\"B\"\nbarras_B_e1$Plant=c(\"Mother\", \"Mother\", \"Sucker\", \"Sucker\")\nbarras_B_e1$Condition=as.factor(c(\"Transmitted\",\"Lost\", \"Transmitted\", \"Acquired\"))\ncolnames(barras_B_e1)[1]=\"Proportion\"\n\nA_e1=ggplot(barras_A_e1, aes(x=Plant, y=Proportion, fill=Condition, order=Condition)) + geom_bar(stat=\"identity\", position=\"stack\")+\n  scale_fill_manual(values=c(\"magenta\", \"deepskyblue\", \"magenta\",\"green\"),\n                    labels=c(\"Transmitted\",\"Lost\", \"Transmitted\", \"Acquired\"),\n                    breaks=c(\"Transmimtted\",\"Lost\", \"Transmitted\", \"Acquired\"))+\n  labs(y=\"Proportion of ASV (%)\", x=NULL, fill=\"Condition\",title=\"South plot (2022)\")+\n  guides(fill = guide_legend(reverse = TRUE))+\n  scale_x_discrete(limits=c(\"Mother\",\"Sucker\"),labels=c(\"Mother\",\"Sucker\"),\n                   breaks=c(\"Mother\",\"Sucker\"))+\n  scale_y_continuous(expand=c(0.01,0.01),\n                     breaks=c(0,10,20,30,40,50,60,70,80,90,100),\n                     labels=c(\"0\",\"10\", \"20\",\"30\",\"40\",\"50\",\"60\",\"70\",\"80\",\"90\",\"100\"),\n                     limits = c(NA, 101))+\n  theme_bw()+\n  theme(panel.border = element_rect(colour=\"black\"))+\n  theme(axis.title.x=element_blank())+\n  theme(plot.title = element_text(face=\"bold\", hjust = 0.5, size=16))+\n  theme(axis.text = element_text(size = 14))+\n  theme(axis.text.x = element_text(face=\"bold\", size=16))+\n  theme(axis.title.y = element_text(size = 16))+\n  theme(legend.key.size = unit(0.9, \"cm\"))+\n  theme(legend.text = element_text(size = 18))+\n  theme(legend.title = element_text(size=18, face=\"bold\"))+\n  theme(legend.title.align=0)+\n  theme(legend.text.align = 0)\nx11()\nA_e1\n\nB_e1=ggplot(barras_B_e1, aes(x=Plant, y=Proportion, fill=Condition, order=Condition)) + geom_bar(stat=\"identity\", position=\"stack\")+\n  scale_fill_manual(values=c(\"magenta\", \"deepskyblue\", \"magenta\",\"green\"),\n                    labels=c(\"Transmitted\",\"Lost\", \"Transmitted\", \"Acquired\"),\n                    breaks=c(\"Transmimtted\",\"Lost\", \"Transmitted\", \"Acquired\"))+\n  labs(y=\"Proportion of ASV (%)\", x=NULL, fill=\"Condition\",title=\"South plot (2023)\")+\n  guides(fill = guide_legend(reverse = TRUE))+\n  scale_x_discrete(limits=c(\"Mother\",\"Sucker\"),labels=c(\"Mother\",\"Sucker\"),\n                   breaks=c(\"Mother\",\"Sucker\"))+\n  scale_y_continuous(expand=c(0.01,0.01),\n                     breaks=c(0,10,20,30,40,50,60,70,80,90,100),\n                     labels=c(\"0\",\"10\", \"20\",\"30\",\"40\",\"50\",\"60\",\"70\",\"80\",\"90\",\"100\"),\n                     limits = c(NA, 101))+\n  theme_bw()+\n  theme(panel.border = element_rect(colour=\"black\"))+\n  theme(axis.title.x=element_blank())+\n  theme(plot.title = element_text(face=\"bold\", hjust = 0.5, size=16))+\n  theme(axis.text = element_text(size = 14))+\n  theme(axis.text.x = element_text(face=\"bold\", size=16))+\n  theme(axis.title.y = element_text(size = 16))+\n  theme(legend.key.size = unit(0.9, \"cm\"))+\n  theme(legend.text = element_text(size = 18))+\n  theme(legend.title = element_text(size=18, face=\"bold\"))+\n  theme(legend.title.align=0)+\n  theme(legend.text.align = 0)\nx11()\nB_e1\n\nx11()\np_Plot1=grid.arrange(A_e1,B_e1,ncol=2, nrow=1, top=textGrob(\"Plot 1\", gp=gpar(fontsize=18)))\n\n#b) North plot\n#b.1) 2022\ntotales_M_A_e2=nrow(A_e2_M_def2)\ntransferidos_A_e2=nrow(especif_A2_endo)\nprop_transferidos_M_A_e2=(transferidos_A_e2 / totales_M_A_e2) *100\nprop_perdidos_M_A_e2=((totales_M_A_e2-transferidos_A_e2) / totales_M_A_e2) *100\n\ntotales_I_A_e2=nrow(A_e2_I_def2)\nprop_transferidos_I_A_e2=(transferidos_A_e2 / totales_I_A_e2) *100\nprop_adquiridos_I_A_e2=((totales_I_A_e2-transferidos_A_e2) / totales_I_A_e2) *100\n\nbarras_A_e2=as.data.frame(rbind(prop_transferidos_M_A_e2,prop_perdidos_M_A_e2,\n                                prop_transferidos_I_A_e2,prop_adquiridos_I_A_e2))\nbarras_A_e2$Year=\"A\"\nbarras_A_e2$Plant=c(\"Mother\", \"Mother\", \"Sucker\", \"Sucker\")\nbarras_A_e2$Condition=as.factor(c(\"Transmitted\",\"Lost\", \"Transmitted\", \"Acquired\"))\ncolnames(barras_A_e2)[1]=\"Proportion\"\n\n#b.2) 2023\ntotales_M_B_e2=nrow(B_e2_M_def2)\ntransferidos_B_e2=nrow(especif_B2_endo)\nprop_transferidos_M_B_e2=(transferidos_B_e2 / totales_M_B_e2) *100\nprop_perdidos_M_B_e2=((totales_M_B_e2-transferidos_B_e2) / totales_M_B_e2) *100\n\ntotales_I_B_e2=nrow(B_e2_I_def2)\nprop_transferidos_I_B_e2=(transferidos_B_e2 / totales_I_B_e2) *100\nprop_adquiridos_I_B_e2=((totales_I_B_e2-transferidos_B_e2) / totales_I_B_e2) *100\n\nbarras_B_e2=as.data.frame(rbind(prop_transferidos_M_B_e2,prop_perdidos_M_B_e2,\n                                prop_transferidos_I_B_e2,prop_adquiridos_I_B_e2))\nbarras_B_e2$Year=\"B\"\nbarras_B_e2$Plant=c(\"Mother\", \"Mother\", \"Sucker\", \"Sucker\")\nbarras_B_e2$Condition=as.factor(c(\"Transmitted\",\"Lost\", \"Transmitted\", \"Acquired\"))\ncolnames(barras_B_e2)[1]=\"Proportion\"\n\nA_e2=ggplot(barras_A_e2, aes(x=Plant, y=Proportion, fill=Condition, order=Condition)) + geom_bar(stat=\"identity\", position=\"stack\")+\n  scale_fill_manual(values=c(\"magenta\", \"deepskyblue\", \"magenta\",\"green\"),\n                    labels=c(\"Transmitted\",\"Lost\", \"Transmitted\", \"Acquired\"),\n                    breaks=c(\"Transmimtted\",\"Lost\", \"Transmitted\", \"Acquired\"))+\n  labs(y=\"Proportion of ASV (%)\", x=NULL, fill=\"Condition\",title=\"North plot (2022)\")+\n  guides(fill = guide_legend(reverse = TRUE))+\n  scale_x_discrete(limits=c(\"Mother\",\"Sucker\"),labels=c(\"Mother\",\"Sucker\"),\n                   breaks=c(\"Mother\",\"Sucker\"))+\n  scale_y_continuous(expand=c(0.01,0.01),\n                     breaks=c(0,10,20,30,40,50,60,70,80,90,100),\n                     labels=c(\"0\",\"10\", \"20\",\"30\",\"40\",\"50\",\"60\",\"70\",\"80\",\"90\",\"100\"),\n                     limits = c(NA, 101))+\n  theme_bw()+\n  theme(panel.border = element_rect(colour=\"black\"))+\n  theme(axis.title.x=element_blank())+\n  theme(plot.title = element_text(face=\"bold\", hjust = 0.5, size=16))+\n  theme(axis.text = element_text(size = 14))+\n  theme(axis.text.x = element_text(face=\"bold\", size=16))+\n  theme(axis.title.y = element_text(size = 16))+\n  theme(legend.key.size = unit(0.9, \"cm\"))+\n  theme(legend.text = element_text(size = 18))+\n  theme(legend.title = element_text(size=18, face=\"bold\"))+\n  theme(legend.title.align=0)+\n  theme(legend.text.align = 0)\nx11()\nA_e2\n\nB_e2=ggplot(barras_B_e2, aes(x=Plant, y=Proportion, fill=Condition, order=Condition)) + geom_bar(stat=\"identity\", position=\"stack\")+\n  scale_fill_manual(values=c(\"magenta\", \"deepskyblue\", \"magenta\",\"green\"),\n                    labels=c(\"Transmitted\",\"Lost\", \"Transmitted\", \"Acquired\"),\n                    breaks=c(\"Transmimtted\",\"Lost\", \"Transmitted\", \"Acquired\"))+\n  labs(y=\"Proportion of ASV (%)\", x=NULL, fill=\"Condition\",title=\"North plot (2023)\")+\n  guides(fill = guide_legend(reverse = TRUE))+\n  scale_x_discrete(limits=c(\"Mother\",\"Sucker\"),labels=c(\"Mother\",\"Sucker\"),\n                   breaks=c(\"Mother\",\"Sucker\"))+\n  scale_y_continuous(expand=c(0.01,0.01),\n                     breaks=c(0,10,20,30,40,50,60,70,80,90,100),\n                     labels=c(\"0\",\"10\", \"20\",\"30\",\"40\",\"50\",\"60\",\"70\",\"80\",\"90\",\"100\"),\n                     limits = c(NA, 101))+\n  theme_bw()+\n  theme(panel.border = element_rect(colour=\"black\"))+\n  theme(axis.title.x=element_blank())+\n  theme(plot.title = element_text(face=\"bold\", hjust = 0.5, size=16))+\n  theme(axis.text = element_text(size = 14))+\n  theme(axis.text.x = element_text(face=\"bold\", size=16))+\n  theme(axis.title.y = element_text(size = 16))+\n  theme(legend.key.size = unit(0.9, \"cm\"))+\n  theme(legend.text = element_text(size = 18))+\n  theme(legend.title = element_text(size=18, face=\"bold\"))+\n  theme(legend.title.align=0)+\n  theme(legend.text.align = 0)\nx11()\nB_e1\n\nx11()\np_Plot2=grid.arrange(A_e2,B_e2,ncol=2, nrow=1, top=textGrob(\"Plot 2\", gp=gpar(fontsize=18)))\n\nWith this code a bar plot is created (see Figure 8)\n\n\n\nFigure 8. Bar plot indicating the transferred ASV, ASVs lost by the mothers, and ASVs acquired from the environment by the suckers\n\n\nWe are going to obtain the same plots but instead of plotting the proportion of ASVs lost, acquired and transferred, the relative abundance of each of them will be visualized\n\n#a) South plot\n#a.1) 2022\nperdidos_M_A_e1=subset(A_e1_M_def2, !(ASV_names %in% especif_A1_endo$ASV_names))#these are the ASVs that mothers lost\nperdidos_M_A_e1$Promedio=rowMeans(subset(perdidos_M_A_e1, select =c(9:ncol(perdidos_M_A_e1))))#mean relative abundance of each of them\nperdidos_M_A_e1_sum=sum(perdidos_M_A_e1$Promedio)#sum the relative abundance of all the ASVs lost by the mothers\nadquiridos_I_A_e1=subset(A_e1_I_def2, !(ASV_names %in% especif_A1_endo$ASV_names))#these are the ASVs that suckers retain from the environment\nadquiridos_I_A_e1$Promedio=rowMeans(subset(adquiridos_I_A_e1, select =c(9:ncol(adquiridos_I_A_e1))))#mean\nadquiridos_I_A_e1_sum=sum(adquiridos_I_A_e1$Promedio)\n\nespecif_A1_endo$Promedio_Madre=rowMeans(subset(especif_A1_endo, select =c(9:19)))#mean relative abundance of transferred ASVs (in mothers samples)\nespecif_A1_endo_M_sum=sum(especif_A1_endo$Promedio_Madre)  \nespecif_A1_endo$Promedio_Hijas=rowMeans(subset(especif_A1_endo, select =c(20:30)))#mean relative abundance of acquired ASV from mothers (in suckers samples)\nespecif_A1_endo_I_sum=sum(especif_A1_endo$Promedio_Hijas)\n\nAbund_A1_endo=c(especif_A1_endo_M_sum,perdidos_M_A_e1_sum,especif_A1_endo_I_sum,adquiridos_I_A_e1_sum)\nbarras_abund_A_e1=as.data.frame(cbind(barras_A_e1,Abund_A1_endo))#create a new dataframe with all the data\ncolnames(barras_abund_A_e1)[5]=\"Abundance\"\n\nwrite.table(data.frame(\"X\"=rownames(perdidos_M_A_e1),perdidos_M_A_e1),\"AbunRel_perdidos_Madre_A_e1.txt\",sep=\"\\t\",row.names = F)\nwrite.table(data.frame(\"X\"=rownames(adquiridos_I_A_e1),adquiridos_I_A_e1),\"AbunRel_AdquiridosAmbiente_A_e1.txt\",sep=\"\\t\",row.names = F)\nwrite.table(data.frame(\"X\"=rownames(especif_A1_endo),especif_A1_endo),\"AbunRel_TransferidosMadreHija_A_e1.txt\",sep=\"\\t\",row.names = F)\n\n#a.2) 2023\nperdidos_M_B_e1=subset(B_e1_M_def2, !(ASV_names %in% especif_B1_endo$ASV_names))\nperdidos_M_B_e1$Promedio=rowMeans(subset(perdidos_M_B_e1, select =c(9:ncol(perdidos_M_B_e1))))\nperdidos_M_B_e1_sum=sum(perdidos_M_B_e1$Promedio)\nadquiridos_I_B_e1=subset(B_e1_I_def2, !(ASV_names %in% especif_B1_endo$ASV_names))\nadquiridos_I_B_e1$Promedio=rowMeans(subset(adquiridos_I_B_e1, select =c(9:ncol(adquiridos_I_B_e1))))\nadquiridos_I_B_e1_sum=sum(adquiridos_I_B_e1$Promedio)\n\nespecif_B1_endo$Promedio_Madre=rowMeans(subset(especif_B1_endo, select =c(9:19)))\nespecif_B1_endo_M_sum=sum(especif_B1_endo$Promedio_Madre)  \nespecif_B1_endo$Promedio_Hijas=rowMeans(subset(especif_B1_endo, select =c(20:27)))\nespecif_B1_endo_I_sum=sum(especif_B1_endo$Promedio_Hijas)\n\nAbund_B1_endo=c(especif_B1_endo_M_sum,perdidos_M_B_e1_sum,especif_B1_endo_I_sum,adquiridos_I_B_e1_sum)\nbarras_abund_B_e1=as.data.frame(cbind(barras_B_e1,Abund_B1_endo))\ncolnames(barras_abund_B_e1)[5]=\"Abundance\"\n\nwrite.table(data.frame(\"X\"=rownames(perdidos_M_B_e1),perdidos_M_B_e1),\"AbunRel_perdidos_Madre_B_e1.txt\",sep=\"\\t\",row.names = F)\nwrite.table(data.frame(\"X\"=rownames(adquiridos_I_B_e1),adquiridos_I_B_e1),\"AbunRel_AdquiridosAmbiente_B_e1.txt\",sep=\"\\t\",row.names = F)\nwrite.table(data.frame(\"X\"=rownames(especif_B1_endo),especif_B1_endo),\"AbunRel_TransferidosMadreHija_B_e1.txt\",sep=\"\\t\",row.names = F)\n\n#b) North plot\n#b.2) 2022\nperdidos_M_A_e2=subset(A_e2_M_def2, !(ASV_names %in% especif_A2_endo$ASV_names))\nperdidos_M_A_e2$Promedio=rowMeans(subset(perdidos_M_A_e2, select =c(9:ncol(perdidos_M_A_e2))))\nperdidos_M_A_e2_sum=sum(perdidos_M_A_e2$Promedio)\nadquiridos_I_A_e2=subset(A_e2_I_def2, !(ASV_names %in% especif_A2_endo$ASV_names))\nadquiridos_I_A_e2$Promedio=rowMeans(subset(adquiridos_I_A_e2, select =c(9:ncol(adquiridos_I_A_e2))))\nadquiridos_I_A_e2_sum=sum(adquiridos_I_A_e2$Promedio)\n\nespecif_A2_endo$Promedio_Madre=rowMeans(subset(especif_A2_endo, select =c(9:20)))\nespecif_A2_endo_M_sum=sum(especif_A2_endo$Promedio_Madre)  \nespecif_A2_endo$Promedio_Hijas=rowMeans(subset(especif_A2_endo, select =c(21:28)))\nespecif_A2_endo_I_sum=sum(especif_A2_endo$Promedio_Hijas)\n\nAbund_A2_endo=c(especif_A2_endo_M_sum,perdidos_M_A_e2_sum,especif_A2_endo_I_sum,adquiridos_I_A_e2_sum)\nbarras_abund_A_e2=as.data.frame(cbind(barras_A_e2,Abund_A2_endo))\ncolnames(barras_abund_A_e2)[5]=\"Abundance\"\n\nwrite.table(data.frame(\"X\"=rownames(perdidos_M_A_e2),perdidos_M_A_e2),\"AbunRel_perdidos_Madre_A_e2.txt\",sep=\"\\t\",row.names = F)\nwrite.table(data.frame(\"X\"=rownames(adquiridos_I_A_e2),adquiridos_I_A_e2),\"AbunRel_AdquiridosAmbiente_A_e2.txt\",sep=\"\\t\",row.names = F)\nwrite.table(data.frame(\"X\"=rownames(especif_A2_endo),especif_A2_endo),\"AbunRel_TransferidosMadreHija_A_e2.txt\",sep=\"\\t\",row.names = F)\n\n#b.2) 2023\nperdidos_M_B_e2=subset(B_e2_M_def2, !(ASV_names %in% especif_B2_endo$ASV_names))\nperdidos_M_B_e2$Promedio=rowMeans(subset(perdidos_M_B_e2, select =c(9:ncol(perdidos_M_B_e2))))\nperdidos_M_B_e2_sum=sum(perdidos_M_B_e2$Promedio)\nadquiridos_I_B_e2=subset(B_e2_I_def2, !(ASV_names %in% especif_B2_endo$ASV_names))\nadquiridos_I_B_e2$Promedio=rowMeans(subset(adquiridos_I_B_e2, select =c(9:ncol(adquiridos_I_B_e2))))\nadquiridos_I_B_e2_sum=sum(adquiridos_I_B_e2$Promedio)\n\nespecif_B2_endo$Promedio_Madre=rowMeans(subset(especif_B2_endo, select =c(9:18)))\nespecif_B2_endo_M_sum=sum(especif_B2_endo$Promedio_Madre)  \nespecif_B2_endo$Promedio_Hijas=rowMeans(subset(especif_B2_endo, select =c(19:26)))\nespecif_B2_endo_I_sum=sum(especif_B2_endo$Promedio_Hijas)\n\nAbund_B2_endo=c(especif_B2_endo_M_sum,perdidos_M_B_e2_sum,especif_B2_endo_I_sum,adquiridos_I_B_e2_sum)\nbarras_abund_B_e2=as.data.frame(cbind(barras_B_e2,Abund_B2_endo))\ncolnames(barras_abund_B_e2)[5]=\"Abundance\"\n\nwrite.table(data.frame(\"X\"=rownames(perdidos_M_B_e2),perdidos_M_B_e2),\"AbunRel_perdidos_Madre_B_e2.txt\",sep=\"\\t\",row.names = F)\nwrite.table(data.frame(\"X\"=rownames(adquiridos_I_B_e2),adquiridos_I_B_e2),\"AbunRel_AdquiridosAmbiente_B_e2.txt\",sep=\"\\t\",row.names = F)\nwrite.table(data.frame(\"X\"=rownames(especif_B2_endo),especif_B2_endo),\"AbunRel_TransferidosMadreHija_B_e2.txt\",sep=\"\\t\",row.names = F)\n\nA1_abun=ggplot(barras_abund_A_e1, aes(x=Plant, y=Abundance, fill=Condition, order=Condition)) + geom_bar(stat=\"identity\", position=\"stack\")+\n  scale_fill_manual(values=c(\"magenta\", \"deepskyblue\", \"magenta\",\"green\"),\n                    labels=c(\"Transmitted\",\"Lost\", \"Transmitted\", \"Acquired\"),\n                    breaks=c(\"Transmimtted\",\"Lost\", \"Transmitted\", \"Acquired\"))+\n  labs(y=\"Relative abundance of ASV (%)\", x=NULL, fill=\"Condition\",title=\"Plot 1 (2022)\")+\n  guides(fill = guide_legend(reverse = TRUE))+\n  scale_x_discrete(limits=c(\"Mother\",\"Sucker\"),labels=c(\"Mother\",\"Sucker\"),\n                   breaks=c(\"Mother\",\"Sucker\"))+\n  scale_y_continuous(expand=c(0.01,0.01),\n                     breaks=c(0,10,20,30,40,50,60,70,80,90,100),\n                     labels=c(\"0\",\"10\", \"20\",\"30\",\"40\",\"50\",\"60\",\"70\",\"80\",\"90\",\"100\"),\n                     limits = c(NA, 101))+\n  theme_bw()+\n  theme(panel.border = element_rect(colour=\"black\"))+\n  theme(axis.title.x=element_blank())+\n  theme(plot.title = element_text(face=\"bold\", hjust = 0.5, size=16))+\n  theme(axis.text = element_text(size = 14))+\n  theme(axis.text.x = element_text(face=\"bold\", size=16))+\n  theme(axis.title.y = element_text(size = 16))+\n  theme(legend.key.size = unit(0.9, \"cm\"))+\n  theme(legend.text = element_text(size = 18))+\n  theme(legend.title = element_text(size=18, face=\"bold\"))+\n  theme(legend.title.align=0)+\n  theme(legend.text.align = 0)\nx11()\nA1_abun\n\nB1_abun=ggplot(barras_abund_B_e1, aes(x=Plant, y=Abundance, fill=Condition, order=Condition)) + geom_bar(stat=\"identity\", position=\"stack\")+\n  scale_fill_manual(values=c(\"magenta\", \"deepskyblue\", \"magenta\",\"green\"),\n                    labels=c(\"Transmitted\",\"Lost\", \"Transmitted\", \"Acquired\"),\n                    breaks=c(\"Transmimtted\",\"Lost\", \"Transmitted\", \"Acquired\"))+\n  labs(y=\"Relative abundance of ASV (%)\", x=NULL, fill=\"Condition\",title=\"Plot 1 (2023)\")+\n  guides(fill = guide_legend(reverse = TRUE))+\n  scale_x_discrete(limits=c(\"Mother\",\"Sucker\"),labels=c(\"Mother\",\"Sucker\"),\n                   breaks=c(\"Mother\",\"Sucker\"))+\n  scale_y_continuous(expand=c(0.01,0.01),\n                     breaks=c(0,10,20,30,40,50,60,70,80,90,100),\n                     labels=c(\"0\",\"10\", \"20\",\"30\",\"40\",\"50\",\"60\",\"70\",\"80\",\"90\",\"100\"),\n                     limits = c(NA, 101))+\n  theme_bw()+\n  theme(panel.border = element_rect(colour=\"black\"))+\n  theme(axis.title.x=element_blank())+\n  theme(plot.title = element_text(face=\"bold\", hjust = 0.5, size=16))+\n  theme(axis.text = element_text(size = 14))+\n  theme(axis.text.x = element_text(face=\"bold\", size=16))+\n  theme(axis.title.y = element_text(size = 16))+\n  theme(legend.key.size = unit(0.9, \"cm\"))+\n  theme(legend.text = element_text(size = 18))+\n  theme(legend.title = element_text(size=18, face=\"bold\"))+\n  theme(legend.title.align=0)+\n  theme(legend.text.align = 0)\nx11()\nB1_abun\n\nA2_abun=ggplot(barras_abund_A_e2, aes(x=Plant, y=Abundance, fill=Condition, order=Condition)) + geom_bar(stat=\"identity\", position=\"stack\")+\n  scale_fill_manual(values=c(\"magenta\", \"deepskyblue\", \"magenta\",\"green\"),\n                    labels=c(\"Transmitted\",\"Lost\", \"Transmitted\", \"Acquired\"),\n                    breaks=c(\"Transmimtted\",\"Lost\", \"Transmitted\", \"Acquired\"))+\n  labs(y=\"Relative abundance of ASV (%)\", x=NULL, fill=\"Condition\",title=\"Plot 2 (2022)\")+\n  guides(fill = guide_legend(reverse = TRUE))+\n  scale_x_discrete(limits=c(\"Mother\",\"Sucker\"),labels=c(\"Mother\",\"Sucker\"),\n                   breaks=c(\"Mother\",\"Sucker\"))+\n  scale_y_continuous(expand=c(0.01,0.01),\n                     breaks=c(0,10,20,30,40,50,60,70,80,90,100),\n                     labels=c(\"0\",\"10\", \"20\",\"30\",\"40\",\"50\",\"60\",\"70\",\"80\",\"90\",\"100\"),\n                     limits = c(NA, 101))+\n  theme_bw()+\n  theme(panel.border = element_rect(colour=\"black\"))+\n  theme(axis.title.x=element_blank())+\n  theme(plot.title = element_text(face=\"bold\", hjust = 0.5, size=16))+\n  theme(axis.text = element_text(size = 14))+\n  theme(axis.text.x = element_text(face=\"bold\", size=16))+\n  theme(axis.title.y = element_text(size = 16))+\n  theme(legend.key.size = unit(0.9, \"cm\"))+\n  theme(legend.text = element_text(size = 18))+\n  theme(legend.title = element_text(size=18, face=\"bold\"))+\n  theme(legend.title.align=0)+\n  theme(legend.text.align = 0)\nx11()\nA2_abun\n\nB2_abun=ggplot(barras_abund_B_e2, aes(x=Plant, y=Abundance, fill=Condition, order=Condition)) + geom_bar(stat=\"identity\", position=\"stack\")+\n  scale_fill_manual(values=c(\"magenta\", \"deepskyblue\", \"magenta\",\"green\"),\n                    labels=c(\"Transmitted\",\"Lost\", \"Transmitted\", \"Acquired\"),\n                    breaks=c(\"Transmimtted\",\"Lost\", \"Transmitted\", \"Acquired\"))+\n  labs(y=\"Relative abundance of ASV (%)\", x=NULL, fill=\"Condition\",title=\"Plot 2 (2023)\")+\n  guides(fill = guide_legend(reverse = TRUE))+\n  scale_x_discrete(limits=c(\"Mother\",\"Sucker\"),labels=c(\"Mother\",\"Sucker\"),\n                   breaks=c(\"Mother\",\"Sucker\"))+\n  scale_y_continuous(expand=c(0.01,0.01),\n                     breaks=c(0,10,20,30,40,50,60,70,80,90,100),\n                     labels=c(\"0\",\"10\", \"20\",\"30\",\"40\",\"50\",\"60\",\"70\",\"80\",\"90\",\"100\"),\n                     limits = c(NA, 101))+\n  theme_bw()+\n  theme(panel.border = element_rect(colour=\"black\"))+\n  theme(axis.title.x=element_blank())+\n  theme(plot.title = element_text(face=\"bold\", hjust = 0.5, size=16))+\n  theme(axis.text = element_text(size = 14))+\n  theme(axis.text.x = element_text(face=\"bold\", size=16))+\n  theme(axis.title.y = element_text(size = 16))+\n  theme(legend.key.size = unit(0.9, \"cm\"))+\n  theme(legend.text = element_text(size = 18))+\n  theme(legend.title = element_text(size=18, face=\"bold\"))+\n  theme(legend.title.align=0)+\n  theme(legend.text.align = 0)\nx11()\nB2_abun\n\nx11()\np_abund_p1=grid.arrange(A1_abun,B1_abun,ncol=2, nrow=1, top=textGrob(\"Plot 1\", gp=gpar(fontsize=18)))\n\nx11()\np_abund_p2=grid.arrange(A2_abun,B2_abun,ncol=2, nrow=1, top=textGrob(\"Plot 2\", gp=gpar(fontsize=18)))"
  },
  {
    "objectID": "Bacteria_data_analysis.html#phylum",
    "href": "Bacteria_data_analysis.html#phylum",
    "title": "Ecological analyses of bacterial dataset",
    "section": "8.1 Phylum",
    "text": "8.1 Phylum\n\n#a) RHIZOSPHERE\nANCOM_phylum_rizo=ancomloop(input_object_phyloseq = rizo, grouping = \"Fusion\",\n                            ancom.options = list(global=FALSE, struc_zero=TRUE, n_cl=8),out.unclassified = TRUE, tax.level=\"Phylum\")\n###options:\n#grouping: indicate your grouping variable\n#n_cl: the number of cores\n#global: apply the global test (for more information, read this paper: https://www.nature.com/articles/s41467-020-17041-7 and documentation of the function ancombc)\n#struc_zero: remove \"structural zeros\" (not real zeros but zeros resulting from a wrong sampling procedure)\n#out.unclassified: apply or not the test to unclassified taxa\n#tax.level: indicate the taxonomical level that you want to analyze\n\nwrite.table(data.frame(\"_\"=rownames(ANCOM_phylum_rizo[[1]]),ANCOM_phylum_rizo[[1]]),file=\"ANCOM_Phylum_Rizo_2022_Plot1_I.txt\",sep=\"\\t\", row.names = F) #save the first element of the list, which corresponds to the results obtained from the comparison of the first group of samples with the other groups\nwrite.table(data.frame(\"_\"=rownames(ANCOM_phylum_rizo[[2]]),ANCOM_phylum_rizo[[2]]),file=\"ANCOM_Phylum_Rizo_2022_Plot1_M.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_phylum_rizo[[3]]),ANCOM_phylum_rizo[[3]]),file=\"ANCOM_Phylum_Rizo_2022_Plot2_I.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_phylum_rizo[[4]]),ANCOM_phylum_rizo[[4]]),file=\"ANCOM_Phylum_Rizo_2022_Plot2_M.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_phylum_rizo[[5]]),ANCOM_phylum_rizo[[5]]),file=\"ANCOM_Phylum_Rizo_2023_Plot1_I.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_phylum_rizo[[6]]),ANCOM_phylum_rizo[[6]]),file=\"ANCOM_Phylum_Rizo_2023_Plot1_M.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_phylum_rizo[[7]]),ANCOM_phylum_rizo[[7]]),file=\"ANCOM_Phylum_Rizo_2023_Plot2_I.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_phylum_rizo[[8]]),ANCOM_phylum_rizo[[8]]),file=\"ANCOM_Phylum_Rizo_2023_Plot2_M.txt\",sep=\"\\t\", row.names = F)\n\n#b) ENDOSPHERE\nANCOM_phylum_endo=ancomloop(input_object_phyloseq = endo, grouping = \"Fusion\", \n                            ancom.options = list(global=FALSE, struc_zero=TRUE, n_cl=8),out.unclassified = TRUE, tax.level=\"Phylum\")\n\nwrite.table(data.frame(\"_\"=rownames(ANCOM_phylum_endo[[1]]),ANCOM_phylum_endo[[1]]),file=\"ANCOM_Phylum_endo_2022_Plot1_I.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_phylum_endo[[2]]),ANCOM_phylum_endo[[2]]),file=\"ANCOM_Phylum_endo_2022_Plot1_M.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_phylum_endo[[3]]),ANCOM_phylum_endo[[3]]),file=\"ANCOM_Phylum_endo_2022_Plot2_I.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_phylum_endo[[4]]),ANCOM_phylum_endo[[4]]),file=\"ANCOM_Phylum_endo_2022_Plot2_M.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_phylum_endo[[5]]),ANCOM_phylum_endo[[5]]),file=\"ANCOM_Phylum_endo_2023_Plot1_I.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_phylum_endo[[6]]),ANCOM_phylum_endo[[6]]),file=\"ANCOM_Phylum_endo_2023_Plot1_M.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_phylum_endo[[7]]),ANCOM_phylum_endo[[7]]),file=\"ANCOM_Phylum_endo_2023_Plot2_I.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_phylum_endo[[8]]),ANCOM_phylum_endo[[8]]),file=\"ANCOM_Phylum_endo_2023_Plot2_M.txt\",sep=\"\\t\", row.names = F)\n\nIn this work, we analyzed exhaustively the results in Excel. Pay attention to the column entitled “diff_abbn”, which shows the phyla that were differentially abundant."
  },
  {
    "objectID": "Bacteria_data_analysis.html#genus",
    "href": "Bacteria_data_analysis.html#genus",
    "title": "Ecological analyses of bacterial dataset",
    "section": "8.2 Genus",
    "text": "8.2 Genus\n\n#a) RHIZOSPHERE\nANCOM_genus_rizo=ancomloop(input_object_phyloseq = rizo, grouping = \"Fusion\", \n                            ancom.options = list(global=FALSE, struc_zero=TRUE, n_cl=8),out.unclassified = TRUE, tax.level=\"Genus\")\n\nwrite.table(data.frame(\"_\"=rownames(ANCOM_genus_rizo[[1]]),ANCOM_genus_rizo[[1]]),file=\"ANCOM_Genus_Rizo_2022_Plot1_I.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_genus_rizo[[2]]),ANCOM_genus_rizo[[2]]),file=\"ANCOM_Genus_Rizo_2022_Plot1_M.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_genus_rizo[[3]]),ANCOM_genus_rizo[[3]]),file=\"ANCOM_Genus_Rizo_2022_Plot2_I.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_genus_rizo[[4]]),ANCOM_genus_rizo[[4]]),file=\"ANCOM_Genus_Rizo_2022_Plot2_M.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_genus_rizo[[5]]),ANCOM_genus_rizo[[5]]),file=\"ANCOM_Genus_Rizo_2023_Plot1_I.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_genus_rizo[[6]]),ANCOM_genus_rizo[[6]]),file=\"ANCOM_Genus_Rizo_2023_Plot1_M.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_genus_rizo[[7]]),ANCOM_genus_rizo[[7]]),file=\"ANCOM_Genus_Rizo_2023_Plot2_I.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_genus_rizo[[8]]),ANCOM_genus_rizo[[8]]),file=\"ANCOM_Genus_Rizo_2023_Plot2_M.txt\",sep=\"\\t\", row.names = F)\n\n#b) ENDOSPHERE\nendo=subset_samples(phy_total, Compartment==\"Endosphere\")\nendo=prune_taxa(taxa_sums(endo)&gt;0.0, endo)\n\nANCOM_genus_endo=ancomloop(input_object_phyloseq = endo, grouping = \"Fusion\", \n                            ancom.options = list(global=FALSE, struc_zero=TRUE, n_cl=8),out.unclassified = TRUE, tax.level=\"Genus\")\n\nwrite.table(data.frame(\"_\"=rownames(ANCOM_genus_endo[[1]]),ANCOM_genus_endo[[1]]),file=\"ANCOM_Genus_Endo_2022_Plot1_I.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_genus_endo[[2]]),ANCOM_genus_endo[[2]]),file=\"ANCOM_Genus_Endo_2022_Plot1_M.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_genus_endo[[3]]),ANCOM_genus_endo[[3]]),file=\"ANCOM_Genus_Endo_2022_Plot2_I.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_genus_endo[[4]]),ANCOM_genus_endo[[4]]),file=\"ANCOM_Genus_Endo_2022_Plot2_M.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_genus_endo[[5]]),ANCOM_genus_endo[[5]]),file=\"ANCOM_Genus_Endo_2023_Plot1_I.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_genus_endo[[6]]),ANCOM_genus_endo[[6]]),file=\"ANCOM_Genus_Endo_2023_Plot1_M.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_genus_endo[[7]]),ANCOM_genus_endo[[7]]),file=\"ANCOM_Genus_Endo_2023_Plot2_I.txt\",sep=\"\\t\", row.names = F)\nwrite.table(data.frame(\"_\"=rownames(ANCOM_genus_endo[[8]]),ANCOM_genus_endo[[8]]),file=\"ANCOM_Genus_Endo_2023_Plot2_M.txt\",sep=\"\\t\", row.names = F)\n\nIn this work, we analyzed exhaustively the results in Excel. Pay attention to the column entitled “diff_abbn”, which shows the genera that were differentially abundant."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Bacteria_reads_processing.html",
    "href": "Bacteria_reads_processing.html",
    "title": "Processing of 16S rRNA reads obtained from Illumina MiSeq platform",
    "section": "",
    "text": "First of all, we will install and load of the required packages and libraries\ninstall.packages(\"devtools\")\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))\n  install.packages(\"BiocManager\")\nBiocManager::install(\"dada2\")\ndevtools::install_github(\"nuriamw/micro4all\")\nif (!require(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\nBiocManager::install(\"ShortRead\")\ninstall.packages(\"tidyverse\")\n\nlibrary(devtools)\nlibrary(dada2)\nlibrary(micro4all)\nlibrary(ShortRead)\nlibrary(tidyverse)\nAs you can see, we are going to use different functions of DADA2 package, so it will be nice if you read all the documentation regarding this package."
  },
  {
    "objectID": "Bacteria_reads_processing.html#a-count-the-number-of-reads",
    "href": "Bacteria_reads_processing.html#a-count-the-number-of-reads",
    "title": "Processing of 16S rRNA reads obtained from Illumina MiSeq platform",
    "section": "a) Count the number of reads",
    "text": "a) Count the number of reads\nIt would be nice to check whether we obtained enough reads from the sequencing service. Otherwise, we should ask the service to to repeat the sequencing.\n\nraw_reads_count = NULL\n\nfor (i in 1:length(fnFs)){\n    raw_reads_count = rbind(raw_reads_count, \n                            length(ShortRead::readFastq(fnFs[i])))\n  } #this loop counts the number of F reads by means of the ShortRead package\n\nrownames(raw_reads_count)= sample.names #formatting of the output\ncolnames(raw_reads_count)= \"Number_of_reads\"\na=data.frame(\"_\"=rownames(raw_reads_count),raw_reads_count)\n\nraw_reads_count2 = NULL\nfor (i in 1:length(fnRs)){#do the same with R reads\n  raw_reads_count2 &lt;- rbind(raw_reads_count2, \n                            length(ShortRead::readFastq(fnRs[i])))\n} \nrownames(raw_reads_count2)= sample.names\ncolnames(raw_reads_count2)= \"Number_of_reads\"\nb=data.frame(\"_\"=rownames(raw_reads_count2),raw_reads_count2)\n\na==b #check that we get the same number of F and R reads\n\ncbind(row.names(raw_reads_count)[which.min(raw_reads_count)],\n      min(raw_reads_count))#check which sample accounts for the lowest number of reads. Be carefual if you keep the negative control of the sequencing\ncbind(row.names(raw_reads_count)[which.max(raw_reads_count)],\n      max(raw_reads_count))#check which sample accounts for the highest number of reads.\n\nwrite.table(data.frame(\"_\"=rownames(raw_reads_count),raw_reads_count),\n            file=\"Num_raw_reads_16s.txt\", sep=\"\\t\",row.names =F)\nView(raw_reads_count) #please, check the number of reads per sample\n\nAt this point, we have to check the number of raw reads per sample. The researcher has to verify whether this number is enough or not. It depends on the type of sample, among other parameters."
  },
  {
    "objectID": "Bacteria_reads_processing.html#b-inspect-the-length-of-the-reads",
    "href": "Bacteria_reads_processing.html#b-inspect-the-length-of-the-reads",
    "title": "Processing of 16S rRNA reads obtained from Illumina MiSeq platform",
    "section": "b) Inspect the length of the reads",
    "text": "b) Inspect the length of the reads\nIn our case, the genomics service followed 2x275 bp and 2x300 bp PE strategy, so most of the sequences are expected to have 275 or 300 bp.\n\nreads=ShortRead::readFastq(fnFs) #save the reads in a new variable with the format of ShortRead package, which is a bit different from standard R variable\nuniques = unique(reads@quality@quality@ranges@width) #get the length of the reads\n\ncounts= NULL\n\nfor (i in 1:length(uniques)) {\n  counts=rbind(counts,\n               length(which(reads@quality@quality@ranges@width==uniques[i])))\n  \n}#specific loop to count the number of reads of each length.  \n\nhistogram =  cbind(uniques,counts)\ncolnames(histogram) = c(\"Seq.length\", \"counts\")\n\n#check the histogram\nhead(histogram[order(histogram[,1],decreasing = TRUE),]) #Most of the sequences should fall in expected sequence length\n\n#plotting\nhist(reads@quality@quality@ranges@width, main=\"Forward length distribution\",\n     xlab=\"Sequence length\", ylab=\"Raw reads\")\n\nwrite.table(histogram, file=\"Lenght_raw_reads_16S.txt\", sep=\"\\t\",row.names =F)"
  },
  {
    "objectID": "Bacteria_reads_processing.html#c-check-the-quality-plots",
    "href": "Bacteria_reads_processing.html#c-check-the-quality-plots",
    "title": "Processing of 16S rRNA reads obtained from Illumina MiSeq platform",
    "section": "c) Check the quality plots",
    "text": "c) Check the quality plots\nIn this step, keep in mind the expected length of your amplicon. Then, check if the overlapping of F and R reads is possible considering the quality of the last nucleotides.\n\nplotQualityProfile(fnFs[4:5])#select the specific samples you want to check, in this case 4 and 5\nplotQualityProfile(fnRs[4:5])"
  },
  {
    "objectID": "Fungi_reads_processing.html",
    "href": "Fungi_reads_processing.html",
    "title": "Fungi",
    "section": "",
    "text": "First of all, we will install and load of the required packages and libraries\ninstall.packages(\"devtools\")\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))\n  install.packages(\"BiocManager\")\nBiocManager::install(\"dada2\")\ndevtools::install_github(\"nuriamw/micro4all\")\nif (!require(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\nBiocManager::install(\"ShortRead\")\ninstall.packages(\"tidyverse\")\n\nlibrary(devtools)\nlibrary(dada2)\nlibrary(micro4all)\nlibrary(ShortRead)\nlibrary(tidyverse)\nAs you can see, we are going to use different functions of DADA2 package, so it will be nice if you read all the documentation regarding this package."
  },
  {
    "objectID": "Fungi_reads_processing.html#a-count-the-number-of-reads",
    "href": "Fungi_reads_processing.html#a-count-the-number-of-reads",
    "title": "Fungi",
    "section": "a) Count the number of reads",
    "text": "a) Count the number of reads\nIt would be nice to check whether we obtained enough reads from the sequencing service. Otherwise, we should ask for the service to repeat the sequencing.\n\nraw_reads_count = NULL\n\nfor (i in 1:length(fnFs)){\n    raw_reads_count = rbind(raw_reads_count, \n                            length(ShortRead::readFastq(fnFs[i])))\n  } #this loop counts the number of F reads by means of the ShortRead package\n\nrownames(raw_reads_count)= sample.names #formatting of the output\ncolnames(raw_reads_count)= \"Number_of_reads\"\na=data.frame(\"_\"=rownames(raw_reads_count),raw_reads_count)\n\nraw_reads_count2 = NULL\nfor (i in 1:length(fnRs)){#do the same with R reads\n  raw_reads_count2 &lt;- rbind(raw_reads_count2, \n                            length(ShortRead::readFastq(fnRs[i])))\n} \nrownames(raw_reads_count2)= sample.names\ncolnames(raw_reads_count2)= \"Number_of_reads\"\nb=data.frame(\"_\"=rownames(raw_reads_count2),raw_reads_count2)\n\na==b #check that we get the same number of F and R reads\n\ncbind(row.names(raw_reads_count)[which.min(raw_reads_count)],\n      min(raw_reads_count))#check which sample accounts for the lowest number of reads. Be careful if you keep the negative control of the sequencing\ncbind(row.names(raw_reads_count)[which.max(raw_reads_count)],\n      max(raw_reads_count))#check which sample accounts for the highest number of reads.\n\nwrite.table(data.frame(\"_\"=rownames(raw_reads_count),raw_reads_count),\n            file=\"Num_raw_reads_ITS.txt\", sep=\"\\t\",row.names =F)\nView(raw_reads_count) #please, check the number of reads per sample\n\nAt this point, we have to check the number of raw reads per sample. The researcher has to verify whether this number is enough or not. It depends on the type of sample, among other parameters."
  },
  {
    "objectID": "Fungi_reads_processing.html#b-inspect-the-length-of-the-reads",
    "href": "Fungi_reads_processing.html#b-inspect-the-length-of-the-reads",
    "title": "Fungi",
    "section": "b) Inspect the length of the reads",
    "text": "b) Inspect the length of the reads\n\n\n\n\n\n\nImportant\n\n\n\nRemember that ITS2 varies in length among different fungi. We have to keep this in mind along the analysis, since we have to skip several steps based on the length of the reads (comparing to the processing of 16S rRNA reads).\n\n\nIn spite of that indicated in the above callout, we will inspect the length of the reads just to confirm the genomics service has performed a good job.\nIn our case, the genomics service followed a 2x300 bp PE strategy.\n\nreads=ShortRead::readFastq(fnFs) #save the reads in a new variable with the format of ShortRead package, which is a bit different from standard R variable\nuniques = unique(reads@quality@quality@ranges@width) #get the length of the reads\n\ncounts= NULL\n\nfor (i in 1:length(uniques)) {\n  counts=rbind(counts,\n               length(which(reads@quality@quality@ranges@width==uniques[i])))\n  \n}#specific loop to count the number of reads of each length.  \n\nhistogram =  cbind(uniques,counts)\ncolnames(histogram) = c(\"Seq.length\", \"counts\")\n\n#check the histogram\nhead(histogram[order(histogram[,1],decreasing = TRUE),]) #Most of the sequences should fall in expected sequence length\n\n#plotting\nhist(reads@quality@quality@ranges@width, main=\"Forward length distribution\",\n     xlab=\"Sequence length\", ylab=\"Raw reads\")\n\nwrite.table(histogram, file=\"Lenght_raw_reads_ITS.txt\", sep=\"\\t\",row.names =F)"
  },
  {
    "objectID": "Fungi_reads_processing.html#c-check-the-quality-plots",
    "href": "Fungi_reads_processing.html#c-check-the-quality-plots",
    "title": "Fungi",
    "section": "c) Check the quality plots",
    "text": "c) Check the quality plots\nCheck if the overlapping of F and R reads is possible considering the quality of the last nucleotides. Be careful with the quality of R reads (which tends to be worse than that of F reads, especially in the latest part of the reads)\n\nplotQualityProfile(fnFs[4:5])#select the specific samples you want to check, in this case 4 and 5\nplotQualityProfile(fnRs[4:5])"
  }
]